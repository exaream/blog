[{"id":0,"href":"/php/upgrade/","title":"Upgrade","section":"PHP","content":" PHP Upgrade # Supported Versions # https://www.php.net/supported-versions.php https://qiita.com/bezeklik/items/72d1ff8393f66673e2bc Rector # Overview # rectorphp/rector Rector instantly upgrades and refactors the PHP code of your application.\nRules Overview Install # $ composer require rector/rector --dev $ composer install $ vendor/bin/rector init $ vi rector.php \u0026lt;?php declare(strict_types=1); // use Rector\\CodeQuality\\Rector\\Class_\\InlineConstructorDefaultToPropertyRector; use Rector\\Config\\RectorConfig; use Rector\\Set\\ValueObject\\LevelSetList; return static function (RectorConfig $rectorConfig): void { // register paths to upgrade and refactor PHP code $rectorConfig-\u0026gt;paths([ __DIR__ . \u0026#39;/src\u0026#39;, ]); // register paths to skip $rectorConfig-\u0026gt;skip([ __DIR__ . \u0026#39;/foo/bar\u0026#39;, ]); // register following values // arguments and default values: max seconds = 120, max number of process = 16, job size = 20 $rectorConfig-\u0026gt;parallel(300); // register a single rule // $rectorConfig-\u0026gt;rule(InlineConstructorDefaultToPropertyRector::class); // define sets of rules $rectorConfig-\u0026gt;sets([ // LevelSetList::UP_TO_PHP_54, // LevelSetList::UP_TO_PHP_55, // LevelSetList::UP_TO_PHP_56, // LevelSetList::UP_TO_PHP_70, // LevelSetList::UP_TO_PHP_71, // LevelSetList::UP_TO_PHP_72, // LevelSetList::UP_TO_PHP_73, LevelSetList::UP_TO_PHP_74, LevelSetList::UP_TO_PHP_80, LevelSetList::UP_TO_PHP_81, LevelSetList::UP_TO_PHP_82, ]); }; Run # $ vendor/bin/rector --help $ vendor/bin/rector process src --config=rector.php --dry-run $ vendor/bin/rector process src --config=rector.php Directory Structure # . ├── src # Target dir to upgrade and refactor PHP code ├── vendor │ ├── bin │ ├── composer │ ├── phpstan │ ├── rector │ └── autoload.php ├── composer.json ├── composer.lock └── rector.php Rector for Laravel # Overview # driftingly/rector-laravel This package is a Rector extension developed by the Laravel community.\nLaravel Versions Rules Overview Install # $ composer require driftingly/rector-laravel --dev $ composer install $ vendor/bin/rector init $ vi rector.php \u0026lt;?php declare(strict_types=1); // use Rector\\CodeQuality\\Rector\\Class_\\InlineConstructorDefaultToPropertyRector; use Rector\\Config\\RectorConfig; use Rector\\Set\\ValueObject\\LevelSetList; use RectorLaravel\\Set\\LaravelSetList; return static function (RectorConfig $rectorConfig): void { // register paths to upgrade and refactor PHP code $rectorConfig-\u0026gt;paths([ __DIR__ . \u0026#39;/src\u0026#39;, ]); // register paths to skip $rectorConfig-\u0026gt;skip([ __DIR__ . \u0026#39;/foo/bar\u0026#39;, ]); // register following values // arguments and default values: max seconds = 120, max number of process = 16, job size = 20 $rectorConfig-\u0026gt;parallel(300); // register a single rule // $rectorConfig-\u0026gt;rule(InlineConstructorDefaultToPropertyRector::class); // define sets of rules $rectorConfig-\u0026gt;sets([ // LevelSetList::UP_TO_PHP_54, // LevelSetList::UP_TO_PHP_55, // LevelSetList::UP_TO_PHP_56, // LevelSetList::UP_TO_PHP_70, // LevelSetList::UP_TO_PHP_71, // LevelSetList::UP_TO_PHP_72, // LevelSetList::UP_TO_PHP_73, LevelSetList::UP_TO_PHP_74, LevelSetList::UP_TO_PHP_80, LevelSetList::UP_TO_PHP_81, LevelSetList::UP_TO_PHP_82, // LaravelSetList::LARAVEL_51, // LaravelSetList::LARAVEL_52, // LaravelSetList::LARAVEL_53, // LaravelSetList::LARAVEL_54, // LaravelSetList::LARAVEL_55, // LaravelSetList::LARAVEL_56, // LaravelSetList::LARAVEL_57, // LaravelSetList::LARAVEL_58, LaravelSetList::LARAVEL_60, LaravelSetList::LARAVEL_70, LaravelSetList::LARAVEL_80, LaravelSetList::LARAVEL_90, ]); }; Run # $ vendor/bin/rector process src --config=rector.php --dry-run $ vendor/bin/rector process src --config=rector.php References # https://www.php.net/supported-versions.php https://qiita.com/bezeklik/items/72d1ff8393f66673e2bc https://github.com/rectorphp/rector https://github.com/driftingly/rector-laravel https://spatie.be/courses/front-line-php/automatically-upgrading-your-code-to-php-8-using-rector PHP Conference Japan 2021: PHP8 version upgrade in legacy systems "},{"id":1,"href":"/conference/","title":"Conference","section":"Home","content":" Conference # Speaker "},{"id":2,"href":"/conference/speaker/","title":"Speaker","section":"Conference","content":" Speaker # References # tiwtter.com/tenntenn 初めて海外カンファレンス登壇するためにやったこと monochromegane/conference-proposals Go Conference 2022 Spring で採択されたプロポーザル（CfP） PaperCall "},{"id":3,"href":"/mac/brew/","title":"Homebrew","section":"Mac","content":" Overview # Homebrew is a package maneger for macOS.\nInstall # /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; Command # Show help.\nbrew help Update Homebrew itself.\nbrew update Update packages.\nbrew upgrade Install a package.\nbrew install \u0026lt;package name\u0026gt; e.g.\nbrew install wget Search a package.\nbrew search \u0026lt;package name\u0026gt; brew search /regex/ List all installed packages.\nbrew list List all installed packages with parent directories\nbrew list -v Uninstall an package.\nbrew uninstall \u0026lt;package name\u0026gt; List installed packages that have an updated version available.\nbrew outdated Remove outdated packages.\nbrew cleanup Confirm outdated packages before removing.\nbrew cleanup --dry-run "},{"id":4,"href":"/go/testscript/","title":"Go TestScript","section":"Go","content":" Go TestScript # 概要 # TestScript は元々 Go のコンパイラをテストするために作成されたもの。\nhttps://cs.opensource.google/go/go/+/release-branch.go1.19:src/cmd/go/script_test.go シェルスクリプトのように記述でき、ファイルシステム上で動作するものをテストできる。 定義済のコマンドは以下で確認できる。\nhttps://cs.opensource.google/go/go/+/release-branch.go1.19:src/cmd/go/script_test.go 独自のコマンドを追加することができる。 Go のコンパイル時に使用される TestScript は以下で確認できる。\nhttps://cs.opensource.google/go/go/+/master:src/cmd/go/testdata/script/ TestScript は txtar (テキストベースのアーカイブ形式) によって表現されている。\nhttps://pkg.go.dev/golang.org/x/tools/txtar Go 内部のテストコードを使用できるよう、再構成されたものが以下で公開されている。\nhttps://github.com/rogpeppe/go-internal/tree/master/testscript テストコードの書き方 # 定義済コマンドをテストで使用 # testdata/script/TestFoo/hello-world.txt\nexec echo \u0026#39;hello world!\u0026#39; stdout \u0026#39;hello world!\\n\u0026#39; sample_test.go\npackage sample_test import ( \u0026#34;path/filepath\u0026#34; \u0026#34;testing\u0026#34; \u0026#34;github.com/rogpeppe/go-internal/testscript\u0026#34; ) var scriptDir = filepath.Join(\u0026#34;testdata\u0026#34;, \u0026#34;script\u0026#34;) func TestFoo(t *testing.T) { t.Parallel() testscript.Run(t, testscript.Params{ Dir: filepath.Join(scriptDir, t.Name()), WorkdirRoot: t.TempDir(), }) } 独自のコマンドを作成してテストで使用 # testdata/script/TestFoo/hello-world.txt\nmycat hello.txt world.txt stdout \u0026#39;hello\\n\u0026#39; stdout \u0026#39;world!\\n\u0026#39; -- hello.txt -- hello -- world.txt -- world! sample_test.go\npackage sample_test import ( \u0026#34;os\u0026#34; \u0026#34;path/filepath\u0026#34; \u0026#34;testing\u0026#34; \u0026#34;github.com/rogpeppe/go-internal/testscript\u0026#34; ) var scriptDir = filepath.Join(\u0026#34;testdata\u0026#34;, \u0026#34;script\u0026#34;) func TestMain(m *testing.M) { os.Exit(testscript.RunMain(m, map[string]func() int{ \u0026#34;mycat\u0026#34;: mycat, })) } func TestFoo(t *testing.T) { t.Parallel() testscript.Run(t, testscript.Params{ Dir: filepath.Join(scriptDir, t.Name()), WorkdirRoot: t.TempDir(), }) } // mycat behaves like cat command. // Do NOT use *testing.T as an argument because we use mycat in testscript.RunMain(). func mycat() int { if len(os.Args) == 1 { _, err := io.Copy(os.Stdout, os.Stdin) if err != nil { return 1 } return 0 } for _, fname := range os.Args[1:] { f, err := os.Open(fname) if err != nil { return 1 } _, err = io.Copy(os.Stdout, f) if err != nil { return 1 } } return 0 } References # https://cs.opensource.google/go/go/+/master:src/cmd/go/testdata/script/ https://cs.opensource.google/search?q=testscript\u0026ss=go%2Fgo:src%2F https://pkg.go.dev/github.com/rogpeppe/go-internal/testscript https://encore.dev/blog/testscript-hidden-testing-gem "},{"id":5,"href":"/career/job-interview/","title":"Job Interview","section":"Career","content":" Job Interview # Key Points # All answers connect to \u0026ldquo;Why should they hire you?\u0026rdquo; https://grow.google/certificates/interview-warmup/ https://github.com/Twipped/InterviewThis Candidate # Tell me about yourself? What are you passionate about? Anything you are passionate about? What’s your strength and weakness? What does your boss say about you? What’s your career plan? What was that you have inspired the most, recently? What would you like to accomplish in next 30 days? (or 90 days?) Resume Related # Would you go through your resume? Would you tell me about your educational background? Would you tell me about your typical day? Would you tell me more about XXXXX? Any experience with XXXXX? Why are you seeking a new position now? Just curious why looking for next oppunity, why leaving {Current Company}? New Job/Company/Position/Project etc # Why this job? Why are you interested in our company? What do you think about us? What do you know about us? What do you know about our products? What do you know about our tech stack? What is the most important thing as {New Role} How do you feel? How do you go about? How would you approach? Do you have any questions? Example(SAR format) Situation, Task , Action, Result Project Related # Would you explain me bit about your current project? What are the tech stack used in your current project? How would you select what technologies to use? When have you gone above and beyond at work? Would you share with me your success stroy as an enginner? What was the highest volume system project you have worked in the past? What was the most challenging project you have ever worked on? Would you tell me how you handled difficult situations? If you handle again, how would you handle differently? Tech Related # Why would you like coding? (Do you passionate about coding?) How would you apporach learning new tech? How would you keep up with new techogoes? Why did your team select these stack? What’s your favorit stack? and why? How do you related XXXXXX? Leadership related # How would you handle conflict on your team? How would you handle conflict between teams? How would you go about setting up new team, project for our company? How would you handle a low performace employee? What approach would you take to create a high-performance team? Have you worked with an offshore team? How would you manage them? What metrics would you use? (KPI, metric reporting, data driven) "},{"id":6,"href":"/career/link/","title":"Career Link","section":"Career","content":" Link # Tool # LinkedIn: 人脈構築 connpass: イベント Github: ポートフォリオ Meety: カジュアル面談 Zenn: 技術の記事と電子書籍 Qiita: 技術の記事 Tech Feed: 技術の記事のフィード Twitter DeepL: 翻訳ツール Mentimeter: Easy-to-build presentations, interactive Polls, Quizzes, and Word Clouds Volume Master Blog # TECH PLAY Blogs mercari engineering LINE Engineering M3 Tech Blog Yahoo! JAPAN Tech Blog RAKUS Developers Blog MEDLEY Tech Blog Job # japan-dev TokyoDev levels.fyi Training # cybozu New Grads Training 2021 mixi New Grads Training 2022 Git Test \u0026amp; Design New Grads Training 2021 Git DB Design Android iOS Frontend Game "},{"id":7,"href":"/go/check-list/","title":"Go Check List","section":"Go","content":" Go Check Sheet # References # Style Guide Effective Go Go Code Review Comments Uber Go Style Guide Knowledge プログラミング言語Go完全入門 よくわかるcontextの使い方 Goでの並行処理を徹底解剖！ Goで時刻を扱うチートシート Goにおけるjsonの扱い方を整理・考察してみた ~ データスキーマを添えて Go言語のジェネリクス入門(1) Go言語のジェネリクス入門(2) インスタンス化と型推論 Workspace mode Testing Advanced Testing with Go Goのテーブル駆動テストをわかりやすく書きたい Library multierr testscript Static Analytics goleak errcheck gosec tennvet fieldalignment 設計 # パッケージ管理 # Go Modules (go.mod) 設計 # 分割 パッケージを適切に分割 ファイルを適切に分割 命名 大文字なしの1単語 UpperCamelCase, snake_cake, chain-case は NG 具体性のない命名は NG e.g. common や util などは NG fileutil のように具体性がある命名は許容範囲 標準/準標準パッケージと同じ名前は避けること 気持ちの良い命名は良い設計ができた証拠 冗長な命名は設計がうまくいっていない証拠 適切に型定義すること 多くの引数を引き回さないこと 何でもかんでも構造体にしないこと e.g. go/token.Pos int ソースコード上の場所を表す型　大小を演算子で比較できる token.FileSet は構造体　構造体ではメソッド化が必要になるため面倒 型同士がお互いを知りすぎていると密結合になるため注意 過度の抽象化をおこなわないこと メソッドの数が多すぎるインターフェイス テストの事情を背負いすぎているインターフェイス internal ディレクトリ 公開したくない機能を隠蔽 internal 以下は内部パッケージ internal ディレクトリ以下のパッケージのみ参照可 internal 以下でエクスポートしても外のパッケージから参照不可 大規模データの入力を考慮 処理できる範囲を仕様として明確化 大きすぎる入力はエラーとして処理 (大規模データの入力を想定せずに落ちるのはNG) メモリが溢れないこと 処理に時間がかかりすぎないこと 再帰呼び出ししすぎてスタックオーバーフローをおこさないこと テスト可用性 パッケージ変数は極力使用しないこと t.Parallel 使用時に競合するため Configurability(設定変更容易性) 定数は初期値としてのみ使用, 構造体のフィールド等で値を変更してテストで使用 実装 # README.md を作成 処理のまとまり 読み手が脳のワーキングメモリを消費しない長さ 読む際, 息継ぎしやすい長さ ネストは浅く（特に if文 や for文） DRY 同じ処理を複数回かかないこと 適切に関数に切り出していること main.go はできるだけ薄くすること 標準/準標準パッケージの機能を充分に活用 bufio, bytes, exec, fmt, fs, io, os, path, filepath, strings, etc ディレクトリ区切り Linux, Mac, Windows etc どのOSでも動作するようメソッドを選択 path.Join path パッケージの区切りは全てスラッシュ filepath.FromSlash, filepath.ToSlash Export メソッドと返り値で公開と非公開を統一（捻じれが生じないようにすること） 初期化 初期化には make を使用したほうが間違いが少ない） map[int]int{} -\u0026gt; make(map[int]int) エラー処理 log.Fatal は内部で os.Exit(1) を呼んでいるためパッケージ側では使用しないこと エラーメッセージ https://github.com/golang/go/wiki/CodeReviewComments#error-strings 簡潔に記述 先頭は小文字 終端は句読点なし 通常のエラー処理は panic を使用せず error を複数戻り値で使用　https://github.com/golang/go/wiki/CodeReviewComments#dont-panic 並行処理 並行処理での競合を回避するためにパッケージ変数は基本的に使用せず不変なものにのみ使用すること context のキーは 空の構造体（empty struct）を使用（メモリ消費なし） type ctxKey struct{} var a ctxKey 解析 # テスト # テーブル駆動テスト 参照 https://zenn.dev/kimuson13/articles/go_table_driven_test https://engineering.mercari.com/en/blog/entry/20211221-a-deep-dive-into-table-driven-testing-in-golang/ テーブルを簡潔に記述 テーブルのケースは可読性を考慮し横1行で記述 名前の長い定数や変数を再定義 型エイリアスを使用 デフォルト値を用意 ヘルパー関数を活用 ヘルパー関数はエラーを返却しないこと 構造体リテラルからフィールド名を削除 構造体の入力と期待値の間に1行空行を挿入（可読性を考慮） 可変長引数をうまく活用した関数を作成　strings.NewReplacer エラー処理 t.Error と t.Fatal の使い分け エラーがおきるかどうかは bool 値で判断 関数の違いは errors.As や errors.Is を使用 文言をチェックしたい場合は golden test で差分比較 非公開な機能(Unexported) https://engineering.mercari.com/blog/entry/2018-08-08-080000/ 並列化(Parallelization) tt https://qiita.com/sho-hata/items/19356a3525fa47cfd2b1 t.Parallel 最初から極力全ての箇所で使用 https://engineering.mercari.com/blog/entry/how_to_use_t_parallel/ go test -suffle ./... テストを並列化できることをチェック 後処理 サブテスト関数で t.Parallel を使用する場合, defer ではなく Cleanup を使用 https://engineering.mercari.com/blog/entry/how_to_use_t_parallel/ 出力先の切替 fmt.Fprintln(writer, xxx), io.Writer, os.Stdout, bytes.Buffer テストデータ 可能であればテストヘルパーでデータを作成 一時ディレクトリを使用 t.TempDir() strings.Repeat 同じ文字列をリピートして生成 io.LimitedReader 指定したバイト数のデータを生成 golden ファイルテスト https://github.com/tenntenn/golden txtar 形式(テキスター)を使用 カバレッジ go test -cover ./... カバレッジを出力 go tool cover テストを記述できていない箇所を視覚的に確認 その他 go test -v は常時実行しないこと, CI等のノイズになるため, あくまでもオプション その他 # Timing-Dependent Tests https://speakerdeck.com/mitchellh/advanced-testing-with-go?slide=62 1行で Go Playground のURLを生成 tree -Ffi --gitignore --noreport -I TODO.md | grep -v /$ | xargs gp share "},{"id":8,"href":"/python/basic/","title":"Python Basic","section":"Python","content":" Python Basic # Install macOS # Check the default version of Python on macOS # $ python --version Python 2.7.16 $ which python /usr/bin/python Install the latest version using Homebrew # brew update Update Homebrew itself brew install Install package $ brew update $ brew install python Add Python\u0026rsquo;s path # $ vi ~/.bash_profile export PATH=\u0026#34;/usr/local/opt/python/libexec/bin:$PATH\u0026#34; $ source ~/.bash_profile Check that the latest version is available # $ python --version Python 3.9.13 $ which python /usr/local/opt/python/libexec/bin/python If you want to update Python on macOS in the future # brew upgrade Update if there is an update for the installed package $ brew update $ brew upgrade python Version # Terminal # Version\n$ python --version Python 3.9.13 $ python -V Python 3.9.13 $ python -VV Python 3.9.13 (main, May 24 2022, 21:28:31) [Clang 13.1.6 (clang-1316.0.21.2)] Integer/Float etc.\n$ python \u0026gt;\u0026gt;\u0026gt; print(\u0026#34;Hi\u0026#34;, \u0026#34;Mike\u0026#34;) Hi Mike \u0026gt;\u0026gt;\u0026gt; print(\u0026#34;Hi\u0026#34;, \u0026#34;Mike\u0026#34;, sep=\u0026#34;, \u0026#34;, end=\u0026#34;.\\n\u0026#34;) Hi, Mike. \u0026gt;\u0026gt;\u0026gt; 2 + 2 4 \u0026gt;\u0026gt;\u0026gt; type(1) \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; type(1.0) \u0026lt;class \u0026#39;float\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; .1 0.1 \u0026gt;\u0026gt;\u0026gt; 17 / 2 8.5 \u0026gt;\u0026gt;\u0026gt; 17 / 5 3.4 \u0026gt;\u0026gt;\u0026gt; 19 / 3 6.333333333333333 \u0026gt;\u0026gt;\u0026gt; 19 // 3 6 \u0026gt;\u0026gt;\u0026gt; 4 * 4 * 4 64 \u0026gt;\u0026gt;\u0026gt; 4 ** 3 64 \u0026gt;\u0026gt;\u0026gt; pie = 3.14159265359 \u0026gt;\u0026gt;\u0026gt; pie 3.14159265359 \u0026gt;\u0026gt;\u0026gt; round(pie, 2) 3.14 \u0026gt;\u0026gt;\u0026gt; import math \u0026gt;\u0026gt;\u0026gt; math.sqrt(25) 5.0 \u0026gt;\u0026gt;\u0026gt; help(math) String\n$ python \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;c:\\name\u0026#39;) c: ame \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;c:\\\\name\u0026#39;) c:\\name \u0026gt;\u0026gt;\u0026gt; print(r\u0026#39;c:\\name\u0026#39;) c:\\name \u0026gt;\u0026gt;\u0026gt; print(\u0026#34;\u0026#34;\u0026#34; ... aaa ... bbb ... ccc ... \u0026#34;\u0026#34;\u0026#34;) aaa bbb ccc \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;Hello, \u0026#39; * 2 + \u0026#39;Mark\u0026#39;) Hello, Hello, Mark \u0026gt;\u0026gt;\u0026gt; str = (\u0026#39;aaaaaa\u0026#39;\u0026#39;bbbbbb\u0026#39;) \u0026gt;\u0026gt;\u0026gt; str \u0026#39;aaaaaabbbbbb\u0026#39; \u0026gt;\u0026gt;\u0026gt; str = (\u0026#39;aaaaaa\u0026#39; ... \u0026#39;bbbbbb\u0026#39;) \u0026gt;\u0026gt;\u0026gt; str \u0026#39;aaaaaabbbbbb\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; str = \u0026#39;python\u0026#39; \u0026gt;\u0026gt;\u0026gt; str[0] \u0026#39;p\u0026#39; \u0026gt;\u0026gt;\u0026gt; str[1] \u0026#39;y\u0026#39; \u0026gt;\u0026gt;\u0026gt; str[2] \u0026#39;t\u0026#39; \u0026gt;\u0026gt;\u0026gt; str[-1] \u0026#39;n\u0026#39; \u0026gt;\u0026gt;\u0026gt; str[0:2] \u0026#39;py\u0026#39; \u0026gt;\u0026gt;\u0026gt; str[:2] \u0026#39;py\u0026#39; \u0026gt;\u0026gt;\u0026gt; str[2:] \u0026#39;thon\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026#39;J\u0026#39; + str[1:] \u0026#39;Jython\u0026#39; \u0026gt;\u0026gt;\u0026gt; str[:] \u0026#39;Jython\u0026#39; \u0026gt;\u0026gt;\u0026gt; n = len(str) \u0026gt;\u0026gt;\u0026gt; n 6 \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; s = \u0026#39;My name is Alice. Hi, Alice.\u0026#39; \u0026gt;\u0026gt;\u0026gt; s \u0026#39;My name is Alice. Hi, Alice.\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; is_start = s.startswith(\u0026#39;My\u0026#39;) \u0026gt;\u0026gt;\u0026gt; is_start True \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; s.find(\u0026#39;Alice\u0026#39;) 11 \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; s.rfind(\u0026#39;Alice\u0026#39;) 22 \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; s.count(\u0026#39;Alice\u0026#39;) 2 \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; s.capitalize() \u0026#39;My name is alice. hi, alice.\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; s.title() \u0026#39;My Name Is Alice. Hi, Alice.\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; s.upper() \u0026#39;MY NAME IS ALICE. HI, ALICE.\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; s.lower() \u0026#39;my name is alice. hi, alice.\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; s.replace(\u0026#39;Alice\u0026#39;, \u0026#39;Bob\u0026#39;) \u0026#39;My name is Bob. Hi, Bob.\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; \u0026#39;My name is {}.\u0026#39;.format(\u0026#39;Chris\u0026#39;) \u0026#39;My name is Chris.\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; \u0026#34;My name is {}. I\u0026#39;m a {}.\u0026#34;.format(\u0026#39;Chris\u0026#39;, \u0026#39;student\u0026#39;) \u0026#34;My name is Chris. I\u0026#39;m a student.\u0026#34; \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; \u0026#34;My family name is {1}, my first name is {0}.\u0026#34;.format(\u0026#39;John\u0026#39;, \u0026#39;Smith\u0026#39;) \u0026#39;My family name is Smith, my first name is John.\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; \u0026#34;My family name is {family_name}, my first name is {first_name}.\u0026#34;.format(first_name=\u0026#39;John\u0026#39;, family_name=\u0026#39;Smith\u0026#39;) \u0026#39;My family name is Smith, my first name is John.\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; x = str(1) \u0026gt;\u0026gt;\u0026gt; type(x) \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; first_name = \u0026#39;John\u0026#39; \u0026gt;\u0026gt;\u0026gt; family_name = \u0026#39;Smith\u0026#39; \u0026gt;\u0026gt;\u0026gt; print(f\u0026#39;My name is {first_name} {family_name}.\u0026#39;) My name is John Smith. \u0026gt;\u0026gt;\u0026gt; List\n$ python \u0026gt;\u0026gt;\u0026gt; l = [1, 20, 300, 4000, 50000] \u0026gt;\u0026gt;\u0026gt; l[0] 1 \u0026gt;\u0026gt;\u0026gt; l[1] 20 \u0026gt;\u0026gt;\u0026gt; l[-1] 50000 \u0026gt;\u0026gt;\u0026gt; l[0:2] [1, 20] \u0026gt;\u0026gt;\u0026gt; l[2:4] [300, 4000] \u0026gt;\u0026gt;\u0026gt; l[2:] [300, 4000, 50000] \u0026gt;\u0026gt;\u0026gt; l[:] [1, 20, 300, 4000, 50000] \u0026gt;\u0026gt;\u0026gt; len(l) 5 \u0026gt;\u0026gt;\u0026gt; type(l) \u0026lt;class \u0026#39;list\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; list(\u0026#39;abc\u0026#39;) [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;] \u0026gt;\u0026gt;\u0026gt; l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \u0026gt;\u0026gt;\u0026gt; l[::2] [1, 3, 5, 7, 9] \u0026gt;\u0026gt;\u0026gt; l[1::2] [2, 4, 6, 8, 10] \u0026gt;\u0026gt;\u0026gt; l[::-1] [10, 9, 8, 7, 6, 5, 4, 3, 2, 1] \u0026gt;\u0026gt;\u0026gt; x = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;] \u0026gt;\u0026gt;\u0026gt; y = [\u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;g\u0026#39;] \u0026gt;\u0026gt;\u0026gt; z = [x, y] \u0026gt;\u0026gt;\u0026gt; z [[\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;], [\u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;g\u0026#39;]] \u0026gt;\u0026gt;\u0026gt; z[0] [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;] \u0026gt;\u0026gt;\u0026gt; z[0][0] \u0026#39;a\u0026#39; \u0026gt;\u0026gt;\u0026gt; z[1][2] \u0026#39;g\u0026#39; \u0026gt;\u0026gt;\u0026gt; zz = x + y \u0026gt;\u0026gt;\u0026gt; zz [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;g\u0026#39;] \u0026gt;\u0026gt;\u0026gt; Source code # sys # import sys print(sys.version) # Python 3.9.13 (main, May 24 2022, 21:28:31) # [Clang 13.1.6 (clang-1316.0.21.2)] print(type(sys.version)) # \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; print(sys.version_info) # sys.version_info(major=3, minor=9, micro=13, releaselevel=\u0026#39;final\u0026#39;, serial=0) print(type(sys.version_info)) # \u0026lt;class \u0026#39;sys.version_info\u0026#39;\u0026gt; print(sys.version_info[0]) # 3 print(sys.version_info[1]) # 9 print(sys.version_info[2]) # 13 print(sys.version_info.major) # 3 print(sys.version_info.minor) # 9 print(sys.version_info.micro) # 13 platform # import platform print(platform.python_version()) # 3.9.13 print(type(platform.python_version())) # \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; print(platform.python_version_tuple()) # (\u0026#39;3\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;13\u0026#39;) print(type(platform.python_version_tuple())) # \u0026lt;class \u0026#39;tuple\u0026#39;\u0026gt; Package # $ pip list option option description -o --outdated List outdated packages. -u --uptodate List update packages. -e --editable List editable projects. --format \u0026lt;list_format\u0026gt; Select the output format among: columns (default), freeze, or json. --not-required List packages that are not dependencies of installed packages. $ pip freeze pip list --format freeze equals pip freeze --all\n$ pip show \u0026lt;installed package\u0026gt; e.g.)\n$ pip show numpy Argument # sys.argv # sample.py\nimport sys args = sys.argv print(args) print(args[1]) print(args[2]) Run\n$ python simple.py aaa 123 [\u0026#39;sample.py\u0026#39;, \u0026#39;aaa\u0026#39;, \u0026#39;123\u0026#39;] aaa argparse # Simple sample # sample.py\nimport argparse description = \u0026#39;A description of this program.\u0026#39; parser = argparse.ArgumentParser(description=description) parser.add_argument(\u0026#39;foo\u0026#39;, type=str, help=\u0026#39;First argument.\u0026#39;) parser.add_argument(\u0026#39;bar\u0026#39;, type=int, help=\u0026#39;Second argument.\u0026#39;) args = parser.parse_args() print(args) print(args.foo) print(args.bar) Run\n$ python sample.py aaa 123 Namespace(foo=\u0026#39;aaa\u0026#39;, bar=123) aaa 123 Check help using -h or ---help\n$ python sample.py --help usage: sample.py [-h] foo bar A description of this program. positional arguments: foo First argument. bar Second argument. optional arguments: -h, --help show this help message and exit Advanced sample # sample.py\nimport argparse description = \u0026#39;A description of this program.\u0026#39; parser = argparse.ArgumentParser(description=description) help = \u0026#39;A required named argument.\u0026#39; parser.add_argument(\u0026#39;--named_arg1\u0026#39;, type=str, required=True, help=help) help = \u0026#39;An optional named argument.\u0026#39; parser.add_argument(\u0026#39;--named_arg2\u0026#39;, type=int, help=help) help = \u0026#39;True is specified automatically if you set this.\u0026#39; parser.add_argument(\u0026#39;--flag1\u0026#39;, action=\u0026#39;store_true\u0026#39;, help=help) help = \u0026#39;False is specified automatically if you set this.\u0026#39; parser.add_argument(\u0026#39;--flag2\u0026#39;, action=\u0026#39;store_false\u0026#39;, help=help) args = parser.parse_args() print(args) print(args.named_arg1) print(args.named_arg2) print(args.flag1) print(args.flag2) Run\n$ python sample.py --named_arg1 aaa --named_arg2 123 --flag1 --flag2 Namespace(named_arg1=\u0026#39;aaa\u0026#39;, named_arg2=123, flag1=True, flag2=False) aaa 123 True False File/Directory # Move to current directory # import os os.getcwd() Get an absolute path # import os absolute_path = os.path.abspath(path) Check if it is an absolute path # import os os.path.isabs(path) Get a relative path # import os relative_path = os.path.relpath(path) Get a file\u0026rsquo;s directory # import os dir_name = os.path.dirname(file_path) Get a file name # import os file_name = os.path.basename(file_path) Get a file\u0026rsquo;s stem # import os file_stem = os.path.splitext(file_name)[0] # sample.png -\u0026gt; sample Check if a file or a directory exists # import os path = \u0026#34;/foo/bar/sample.png\u0026#34; os.path.exists(path) import os path = \u0026#34;/foo/bar/sample.png\u0026#34; os.path.isfile(path) import os path = \u0026#34;/foo/bar/\u0026#34; os.path.isdir(path) References # https://docs.python.org/ja/3.9/library/argparse.html https://qiita.com/kzkadc/items/e4fc7bc9c003de1eb6d0 https://www.delftstack.com/ja/howto/python/python-get-filename-without-extension-from-path/ https://note.nkmk.me/python-os-basename-dirname-split-splitext/ https://note.nkmk.me/python-sys-platform-version-info/ https://pip.pypa.io/en/stable/cli/pip_list/ "},{"id":9,"href":"/tool/jenkins/","title":"Jenkins","section":"Tool","content":" Jenkins # Install # Docker Compose # How to Install and Run Jenkins With Docker Compose Make docker-compose.yml\nhttps://hub.docker.com/_/jenkins version: \u0026#39;3.8\u0026#39; services: jenkins: container_name: jenkins image: jenkins/jenkins:latest privileged: true ports: - 8080:8080 volumes: - ./jenkins_home:/var/jenkins_home Run the following. $ docker-compose up -d Confirm the admin initial password. $ docker logs jenkins | less ************************************************************* ************************************************************* ************************************************************* Jenkins initial setup is required. An admin user has been created and a password generated. Please use the following password to proceed to installation: XXXXXXXXXXXXXXXXXXXXXXXXXXX (You can see the password here) This may also be found at: /var/jenkins_home/secrets/initialAdminPassword ************************************************************* ************************************************************* ************************************************************* or\n$ docker container ls $ docker container exec -it jenkins sh $ cat /var/jenkins_home/secrets/initialAdminPassword Access http://localhost:8080 . Unlock Jenkins page. Enter the admin initial password in Administrator passwprd . Click Continue . Customize Jenkins page. Click Install suggested plugins (if you are a beginner). Create First Admin User page. Click Skip and continuue as admin . CentOS # sudo wget --no-check-certificate -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key sudo yum install -y jenkins Jenkins Agent # Generate SSH keys # Generate the private key and the public key. $ ssh-keygen -t ed25519 -f jenkins_agent Generating public/private ed25519 key pair. Enter passphrase (empty for no passphrase): Enter same passphrase again: $ ls -al jenkins_agent* jenkins_agent (private key) jenkins_agent.pub (public key) Confirm the strength. $ ssh-keygen -l -f jenkins_agent 256 SHA256:XXXXXXXXXXXXXX XXXXXX@XXXXXX (ED25519) Set the private key in Jenkins # Access http://localhost:8080 and login. Move to Dashboad \u0026gt; Manage Jenkins \u0026gt; Manage Credentials . Click Jenkins under Stores scoped to Jenkins . Click Global credentials (unrestricted) . Click Add Credentials in left menu. Set options. Select SSH Username with private key . Select System (Jenkins and nodes only) from Scope . This means the key can NOT be used for jobs. Enter jenkins_agent for ID . Enter Jenkins agent key for Description . Enter jenkins for Username . Select Enter directly of Provate key . Click Add . Enter the contents of the private key. Your can see it by executing following cat jenkins_agent . Click OK . Set the public key # Add agent container to docker-compose.yml . https://hub.docker.com/r/jenkins/ssh-agent Do NOT enclose the contents of the public key in quotes. version: \u0026#39;3.8\u0026#39; services: jenkins: container_name: jenkins image: jenkins/jenkins:latest privileged: true ports: - 8080:8080 volumes: - ./jenkins_home:/var/jenkins_home agent: image: jenkins/ssh-agent:jdk11 privileged: true container_name: agent expose: - 22 environment: - JENKINS_AGENT_SSH_PUBKEY=ssh-ed25519 XXXXXXXXXXXXXX XXXXXX@XXXXXX (Please write the public key here) Restart docker compose. $ docker-compose down $ docker-compose up -d Add new node # Access http://localhost:8080 and login. Move to Dashboad \u0026gt; Manage Jenkins \u0026gt; Manage Nodes and Clouds . Click New Node in the menu on the left. Enter jenkins_agent in Name . Select Permanent Agent in Type . Click Create . Enter /home/jenkins/agent in Remote root directory . Select Use this node as much as possible in Usage . Select Launch agents via SSH in Launch method . Select Jenkins(Jenkins Agent Key) in Credentials. Select Non verifying Verification Strategy in Host Key Verification Strategy . Click Advanced on the right. Enter /usr/local/openjdk-11/bin/java in JavaPath . Click Save . Click jenkins-agent in node list. Click Log in the menu on the left. . It is OK if you see Agent successfully connected and online . Plugin # Access http://localhost:8080 and login. Move to Dashboad \u0026gt; Manage Jenkins \u0026gt; Manage Plugins . Click Installed . Confirm that the following are already installed if you choose Install suggested plugins previous step. Mailer Build With Parameter Click Available . Find and select the following using a search box. Rebuilder Blue Ocean Office 365 Connector Maven Integration Install without restart Job # Pipeline # Jenkins Pipline Syntax e.g.\npipeline { agent any stages { stage(\u0026#39;Hello\u0026#39;) { steps { echo \u0026#39;Hello\u0026#39; } } stage(\u0026#39;World(SKIP)\u0026#39;) { when { expression { params.SKIP == false } } steps { echo \u0026#39;World\u0026#39; } } } } "},{"id":10,"href":"/go/link/","title":"Go Link","section":"Go","content":" Go Link # Style Guide # Uber Go Style Guide Uber Go Style Guide(Japanese) Video # Go Conference # 2022 Spring Track A 2022 Spring Track B 2021 Autumn Track A 2021 Autumn Track B 2021 Spring Track A 2021 Spring Track B Article # Go Github Go Spec Go Release Go Download Go の命名規則 Goのロギングライブラリ 2021年冬 私がGoのソースコードを読むときのTips Goの標準ライブラリのコードリーディングのすすめ インタフェースの実装パターン Goのinterfaceをデータ構造から理解する Go First Step The Go Playground A Tour of Go Effective Go Standard library Project Layout (Directory Structure) Error handling and Go Context go-safeweb SQL Injection, XSS, XSRF etc. Sample # Slice and Map Book # エキスパートたちのGo言語 一流のコードから応用力を学ぶ https://cs.opensource.google/go/go/+/master:src/strings/ https://cs.opensource.google/go/go/+/master:src/errors/ https://cs.opensource.google/go/go/+/master:src/errors/wrap.go;l=104\n"},{"id":11,"href":"/tool/linkedin/","title":"LinkedIn","section":"Tool","content":" LinkedIn # How to export LincedIn contacts # Click My Network at the top. Click on Connections under Manage my network. Click Manage synced and imported contacts. Click Export contacts under Advanced actions. Select Doenload larget data archive including connections, ~. "},{"id":12,"href":"/mac/","title":"Mac","section":"Home","content":" Mac # Mac Setting iTerm2 Homebrew "},{"id":13,"href":"/python/ocr/","title":"Python OCR","section":"Python","content":" Python OCR # Overview # How to get text from an image using Tesseract which is an OCR (Optical Character Recognition) engine and Python.\nPrecondition # Version # macOS: Big Sur 11.4 Docker: 20.10.5, build 55c4c88 docker-compose: 1.29.0, build 07737305 Simple sample # Version # Debian GNU/Linux: 10 (buster) Python: 3.9.6 pyocr: 0.8 opencv-python: 4.5.3.56 Directory structure # python-ocr/ ├── README.md ├── img │ ├── .gitkeep │ └── sample.jpg ├── setup │ ├── Dockerfile │ └── docker-compose.yml └── simple.py Source # https://github.com/exaream/python-ocr Dockerfile\nFROM python:latest RUN apt-get update RUN apt-get -y install \\ tesseract-ocr* \\ libgl1-mesa-dev \\ vim RUN apt-get clean RUN pip install --upgrade pip RUN pip install \\ pillow \\ pyocr \\ # cv2 opencv-python \\ opencv-contrib-python WORKDIR /opt/ ENTRYPOINT [\u0026#34;/usr/bin/tail\u0026#34;, \u0026#34;-f\u0026#34;, \u0026#34;/dev/null\u0026#34;] docker-compose.yml\nversion: \u0026#39;3\u0026#39; services: python-ocr: build: context: ../ dockerfile: setup/Dockerfile container_name: python-ocr volumes: - ../:/opt simple.py\nimport os import pyocr import sys from PIL import Image if len(sys.argv) != 2: print(\u0026#34;Please input an image file name in the first argument.\u0026#34;) exit() img_dir = os.path.dirname(__file__) + \u0026#39;/img/\u0026#39; img_file_name = os.path.basename(sys.argv[1]) img_path = img_dir + img_file_name img_obj = Image.open(img_path) builder = pyocr.builders.TextBuilder(tesseract_layout = 6) ocr_engine = pyocr.get_available_tools()[0] langs = ocr_engine.get_available_languages() text = ocr_engine.image_to_string(img_obj, lang=\u0026#39;jpn\u0026#39;, builder=builder) print(langs) print(text) Preparation # pytyon-ocr directory on your host machine\ndocker-compose -f setup/docker-compose.yml up -d --build docker exec -it python-ocr bash Run # docker container\ncd /opt/ python simple.py sample.jpg Advanced sample # grayscale threshold processing. named argument Version # Same as \u0026ldquo;simple sample\u0026rdquo; above. Directory structure # python-ocr/ ├── README.md ├── img │ ├── .gitkeep │ └── sample.jpg ├── library │ ├── base.py │ ├── cv.py │ └── ocr.py ├── main.py ├── setup │ ├── Dockerfile │ └── docker-compose.yml └── simple.py Source # https://github.com/exaream/python-ocr base.py\nimport os from typing import NoReturn class Base: arg_parser = None img_dir = \u0026#39;\u0026#39; def __init__(self) -\u0026gt; NoReturn: self.set_img_dir() def get_file_name(self, file_path: str) -\u0026gt; str: return os.path.basename(file_path) # Get file name without extension. def get_file_stem(self, file_path: str) -\u0026gt; str: file_name = self.get_file_name(file_path) return os.path.splitext(file_name)[0] def is_file(self, file_path: str) -\u0026gt; bool: return os.path.isfile(file_path) def set_img_dir(self, img_dir: str = \u0026#39;\u0026#39;) -\u0026gt; NoReturn: if img_dir != \u0026#39;\u0026#39;: self.img_dir = img_dir else: dir = os.path.dirname(os.path.abspath(__file__)) + \u0026#39;/../img/\u0026#39; self.img_dir = os.path.abspath(dir) def get_img_dir(self) -\u0026gt; str: return self.img_dir cv.py\nimport cv2 # OpenCV (Open Source Computer Vision Library) from typing import NoReturn class ComputerVision: def get_obj(self, img_path: str) -\u0026gt; cv2: return cv2.imread(img_path) def get_grayscale_obj(self, obj: cv2) -\u0026gt; cv2: return cv2.cvtColor(obj, cv2.COLOR_BGR2GRAY) # Thresholding # Convert colors other than black (if a RBG value is greater than a threshold) to white RGB(255,255,255). def get_threshold_obj(self, obj: cv2, threshold: int = 170) -\u0026gt; cv2: return cv2.threshold(obj, threshold, 255, cv2.THRESH_BINARY)[1] def write_obj_to_img(self, obj: cv2, img_path: str) -\u0026gt; NoReturn: cv2.imwrite(img_path, obj) ocr.py\nimport pyocr from PIL import Image from pyocr.builders import TextBuilder from typing import NoReturn class OpticalCharacterRecognition: ocr_engine = None def __init__(self) -\u0026gt; NoReturn: self.__set_ocr_engine() def get_img_obj(self, img_path: str) -\u0026gt; Image: return Image.open(img_path) def get_available_languages(self) -\u0026gt; list: return self.ocr_engine.get_available_languages() def get_text_by_img_obj(self, img_obj: Image, builder: TextBuilder, lang: str = \u0026#39;eng\u0026#39;) -\u0026gt; str: return self.ocr_engine.image_to_string(img_obj, lang=lang, builder=builder) def get_builder(self, tesseract_layout: int = 3) -\u0026gt; TextBuilder: return TextBuilder(tesseract_layout=tesseract_layout) def __set_ocr_engine(self) -\u0026gt; NoReturn: self.ocr_engine = pyocr.get_available_tools()[0] main.py\nimport argparse from library import base, cv, ocr # Initialize classes. sample_base = base.Base() sample_cv = cv.ComputerVision() sample_ocr = ocr.OpticalCharacterRecognition() langs = sample_ocr.get_available_languages() # Get arguments. arg_parser = argparse.ArgumentParser() arg_parser.add_argument(\u0026#39;--img\u0026#39;, type=str, required=True) args = arg_parser.parse_args() # Set image paths. img_file_name = sample_base.get_file_name(args.img) img_file_stem = sample_base.get_file_stem(args.img) img_dir = sample_base.get_img_dir() + \u0026#39;/\u0026#39; img_org_path = img_dir + img_file_name img_gray_path = img_dir + img_file_stem + \u0026#39;-gray.png\u0026#39; img_threshold_path = img_dir + img_file_stem + \u0026#39;-threshold.png\u0026#39; if sample_base.is_file(img_org_path) == False: print(\u0026#34;The file doesn\u0026#39;t exist: \u0026#34; + img_org_path) exit() # Get CV (Computer Vision Library) object. cv_obj = sample_cv.get_obj(img_org_path) # Apply grayscale to the image. cv_obj = sample_cv.get_grayscale_obj(cv_obj) sample_cv.write_obj_to_img(cv_obj, img_gray_path) # Apply Threshold processing to the image. cv_obj = sample_cv.get_threshold_obj(cv_obj) sample_cv.write_obj_to_img(cv_obj, img_threshold_path) # Get text by the processed image. img_obj = sample_ocr.get_img_obj(img_threshold_path) builder = sample_ocr.get_builder() text = sample_ocr.get_text_by_img_obj(img_obj, builder=builder, lang=\u0026#39;jpn\u0026#39;) print(langs) print(text) Run # Run below if the docker container is stopped.\npytyon-ocr directory on your host machine\ndocker-compose -f setup/docker-compose.yml up -d docker exec -it python-ocr bash docker container\ncd /opt/ python main.py --img sample.jp References # dockerhub python pyocr Tesseract tesseract-ocr "},{"id":14,"href":"/go/test/","title":"Go Test","section":"Go","content":" Go Test # Unit Test # Run # Run all unit tests # $ go test ./... Show detailed information\n$ go test ./... -v Disable test cache\n$ go test ./... -count=1 Run a method of a unit test # $ go test ./mypkg/ -run TestSample Coverage # Output coverage to a terminal\n$ go test -cover ./... Output the coverage profile to a file and view it in a browser\n$ go test -coverprofile=cover.out ./... $ go tool cover -html=cover.out Output the coverage profile to a file and convert it to a html file\n$ go test -coverprofile=cover.out ./... $ o tool cover -html=cover.out -o cover.html Clean test cache # If you see (cached) in results of unit tests\n$ go clean -testcache Setup and shutdown # func TestMain(m *testing.M) { setup() code := m.Run() shutdown() os.Exit(code) } func setup() { // Voluntary method name // Your code } func shutdown() { // Voluntary method name // Your code } Run subtests in parallel # func TestSample(t *testing.T) { t.Parallel() // Run main test in parallel t.Logf(\u0026#34;Start: %s\u0026#34;, time.Now()) tests := []struct { name string code string msg string }{ {\u0026#34;1\u0026#34;, \u0026#34;0001\u0026#34;, \u0026#34;foo\u0026#34;}, {\u0026#34;2\u0026#34;, \u0026#34;0002\u0026#34;, \u0026#34;bar\u0026#34;}, {\u0026#34;3\u0026#34;, \u0026#34;0003\u0026#34;, \u0026#34;baz\u0026#34;}, } for _, test := range tests { t.Run(test.name, func(t *testing.T) { // Run subtests t.Parallel() // Run subtests in parallel if msg := mypkg.Sample(test.code); msg != test.msg { t.Errorf(\u0026#34;The message must be %s: %s\u0026#34;, test.msg, msg) } }) } t.Logf(\u0026#34;End: %s\u0026#34;, time.Now()) } References # 非公開（unexported）な機能を使ったテスト go-cmpを使う理由とTipsの紹介 クロージャ内では(*testing.T).Fatalメソッドの呼び出しを避ける理由 "},{"id":15,"href":"/tool/vagrant/","title":"Vagrant","section":"Tool","content":" Vagrant # Basic # start/create\n$ vagrant up $ vagrant up sample connect\n$ vagrant ssh sample stop\n$ vagrant halt sample delete\n$ ls -A .vagrant\tVagrantfile $ vagrant destroy -f $ rm -rf Vagrantfile .vagrant Uninstall # Remove the Vagrant Program # On macOS:\n$ sudo rm -rf /opt/vagrant /usr/local/bin/vagrant $ sudo pkgutil --forget com.vagrant.vagrant On Linux:\n$ rm -rf /opt/vagrant $ rm -f /usr/bin/vagrant On Windows:\nUninstall using the add/remove programs section of the control panel Remove User Data # On macOS or Linux:\n$ rm -rf ~/.vagrant.d On Windows\nRemove the following directory.\nC:\\Users\\YourUsername\\.vagrant.d References # Uninstalling Vagrant "},{"id":16,"href":"/go/word/","title":"Go Word","section":"Go","content":" Go Word # Mutex:「相互排他」を表す英語 \u0026ldquo;mutual exclusion\u0026rdquo; の略。(「Go言語による並行処理」P49 3.2.2参照) "},{"id":17,"href":"/english/sentence/","title":"English Sentence","section":"English","content":" English Sentence # Sentence Translation Remarks I\u0026rsquo;ll leave work. 退勤します。 - I\u0026rsquo;m leaving my desk. 離席します。 - I\u0026rsquo;m back. 戻りました。 離席していた場合など。 When is your available date? 空いている日はいつですか？ Are you available sometime next week? 来週は空いていますか？ Are you available on Wednesday of next week? 来週 水曜日は空いていますか？ How about next Tuesday? 来週の火曜日はいかがですか？ Next Tuesday is fine with me. 来週の火曜日は大丈夫です。 When will be convenient for you? いつが都合良いですか？ What time is convenient for you? 何時が都合良いですか Please let me know a convenient time for you. あなたにとって都合の良い時間を知らせてください Please let me know your availability. 都合を知らせてください Could you please let me know your availability? ご都合を教えていただけますでしょうか？ Could we meet on 20th at 1pm instead? 代わりに20日の午後1時はいかがですか？ I\u0026rsquo;ll be available at that time. その時間は大丈夫です。 I\u0026rsquo;ll adjust my schedule to accommodate yours. あなたの予定に合わせて私のスケジュールを調整します。 I\u0026rsquo;ll adjust my schedule to match yours. あなたの予定に合わせて私のスケジュールを調整します。 What are you working on? 今何をやっているのですか？ - Who\u0026rsquo;s working on this? 誰がこれをやっているのですか？ - I need to finish the investigation before I start working on it. それをやる前に調査を終わらせないといけません。 - I need to get this bug fixed by the next week. 来週までにこのバグを直さないといけません。 - Can you please take a look at it? それを見ていただけますか？ - Can I ask you a favor? ちょっとお願いがあるのですが 個人的なカジュアルな依頼 I have something I need you to help with. ちょっとお願いがあるのですが ビジネスで依頼する際の前置き Do you have any questions so far? ここまでで何か質問はありますか？ Does it make sense so far? ここまで理解できましたか？ 部下や同僚に理解度を確認 It makes sense to xxx xxxするのは合理的ですね It does not make sense よくわからない、理解できない make it more compact もっと簡潔にする make it more structured より構造化する be interactive with your audience 視聴者と双方向で ask for feedback フィードバックを求める From my point of view 私の見解では - In my opinion 私の見解では - In my view 私の判断では - If you ask me 私の意見では - As far as I\u0026rsquo;m concerned 私に関する限り - Let me know if you have any questions. 何か質問があれば私に知らせてください。 \u0026ldquo;Do you understand?\u0026rdquo; は角が立つため、こちらがお勧め。 Let me know what you think. 意見を聞かせてください。 - Let me know when you get ready to start. 用意ができたら教えてください。 - distributed transaction 分散トランザクション - communicate 通信する - organize 体系づける, まとめる - synchronous 同期 - asynchronous 非同期 - compatibility 互換性 - consistent 一貫性のある - analogy 類推 - statistical 統計の - storyline (話の)筋 takeaway 持ち帰り abbreviation 略語 monotone voice 単調な声 "},{"id":18,"href":"/english/","title":"English","section":"Home","content":" English # TOEIC English Sentence "},{"id":19,"href":"/english/toeic/","title":"TOEIC","section":"English","content":" TOEIC # 試験で必要な能力 # 英語力 脳の処理能力(情報処理、短期記憶) 試験慣れ 脳の処理能力の理解 # 脳のエネルギー消費量 脳の重量は全体重の2％だが、エネルギーの消費量は全体の18％。 脳の入力速度の改善 速聴 インターチェンジ効果 高速道路を降りた後、普段よりゆっくりに感じる現象。 速聴することで、試験本番で解像度高く聴きとれる。 再生速度が速すぎると英語固有の周波数が失われるため注意。 個人的には 1.1〜1.2倍速がオススメ。 脳の短期記憶領域の拡大 ワーキング・メモリー (Working Memory)：認知心理学において、情報を一時的に保ちながら操作するための構造や過程を指す構成概念。作業記憶、作動記憶とも呼ばれる。 Nバック・トレーニング(Dual N Back Training)：脳のワーキング・メモリを拡大するための脳トレ。複数のスマホアプリあり。 モヤモヤ・ノート：頭の中の考えをすべて吐き出してスッキリするためのノート。 脳の記憶の忘却曲線 エビングハウスの忘却曲線 経過時間 記憶に残る割合 20分後 58% 1時間後 44% 9時間後 36% 1日 33% 2日 28% 6日後 25% 31日後 21% 記憶した内容が定着するよう毎日学習を継続すること。 脳の疲労回復 マインドフルネス 米国企業等で取り入れられている瞑想法。ストレスの軽減、記憶力・集中力の向上等。 1日15分の瞑想の継続により、左海馬や側頭頭頂接合部において灰白質（かいはくしつ）の密度が増加。 学習教材 # 公式問題集：最新5冊の別冊「解説・解答」のみを使用。 音声ダウンロード 公式TOEIC Listening \u0026amp; Reading 問題集 9 公式TOEIC Listening \u0026amp; Reading 問題集 8 公式TOEIC Listening \u0026amp; Reading 問題集 7 公式TOEIC Listening \u0026amp; Reading 問題集 6 公式TOEIC Listening \u0026amp; Reading 問題集 5 金のフレーズ：頻出度の高いフレーズと英単語を学べる書籍。 音声ダウンロード (無料) TOEIC L \u0026amp; R TEST 出る単特急 金のフレーズ スタディサプリ：英文法や英単語を学べるアプリ。 スタディサプリ Audipo：倍速再生が可能なスマホアプリ。最高は4倍速。 App Store (iPhone) Google Store (Android) 学習方法 # 公式問題集 # 最新5冊の10周精読 別冊「解説・解答」のみを使用。 解答や日本語訳を見ながら、英語を聞く時は英文を目で追いながら、繰り返し解くこと。 初めから解答を活用することで、脳のエネルギー消費量を最小化。 テスト1回分の精読の目安は、1周目12時間、6周目3〜4時間で完了。 Listening 事前準備 音がつながるところ、音が消える（弱まる）ところにシャープペンで下線を記入。 英語の文節の区切りにシャープペンでスラッシュを記入。 手順 ①精読 ②音読 ③英文を読みながらシャドウイング ④英文を見ずにシャドウイング。 Part 2 で聞き取りにくい箇所はディクテーション。 本番想定の練習 各パートごとの目標時間を設定。 本番と同じシャープペンと消しゴムを使用。 本番と同じマークシートを使用。 事前に問題集のマークシートを多めにコピーして使用。 慣れることで本番当日のマークミスを防止。 終了後にミスした箇所の傾向を分析。 スタディサプリ # 文法 カリスマ講師 関 正生(せき まさお) 先生の動画で基本文法を把握。 英単語・英熟語 TEPPAN英単語を毎日実施。(1〜2秒で即答できるレベル) ミスした単語のみ自動抽出される仕組み。 金のフレーズ # 音声を毎日聴き、頻出のフレーズとセットで英単語を記憶。 道具 # ヘッドフォン SONY WH-1000XM4 IPテストをオンラインでおこなう際に使用。 ノイズキャンセリング機能は必須。(窓の外の救急車の音なども遮断。) マークシート用シャープペン アリスト 3FIT 1.3（芯 1.3mm） オート 木軸シャープ消しゴム付2.0（芯 2.0mm) マークシート用消しゴム 三菱鉛筆 マークシート用消しゴム ER100MX アロマ MUJI エッセンシャルオイル ローズマリー 食品 # ブドウ糖：森永製菓 大粒ラムネ 41g（ブドウ糖90%配合） 消化にエネルギーを使わずに脳へ効果的にエネルギーを補給。 カフェイン：MEJ C COFFEE 炭の香りがキャンプを思い出させてくれるコーヒー。 本番カフェインの効果が最大限発揮できるようカフェインは本番前のみ摂取。 公開テスト # 本番前 # 雑用はできるだけ前日に済ませること。 当日は極力 脳の判断力を使わないようにすること。 当日着る服も前日に用意すること。 モヤモヤ・ノートにグチ・モヤモヤ・不安・気になることを全て書き出すこと。 脳内の瞬間記憶の作業領域を空ける＝脳のワーキング・メモリーを開放。 腹5分目の空腹状態をキープ。 水、ナッツ、ラムネ（ブドウ糖）のみ。 消化で体内のエネルギーを使用しないようにすること。 一気に血糖値を上げないようラムネは徐々に口内で溶かして摂取。\n一気に血糖値が上がると眠くなるため。 早めに受付を済ませ、解答用紙への事前の記入を済ませること。 試験35分前にトイレを済ませること。 試験30分前にヨーグルトを食べ、その後 コーヒー（カフェイン）を飲むこと。 カフェインは摂取後20〜30分で効果が現れるため。 カフェインが切れた時に集中力が一気に落ちるのを防ぐため予めヨーグルトを摂取。 直前までイヤフォン等で英語を聞き続けること。 精読済のもののみ聞き、聞き取れた自信のある状態でテストに入ること。 本番 # Part 2 目を閉じて聴くことで、視覚情報を遮断し音声のみに集中。 先頭に最大の注意を注いで聞く。（What・Who・Why・How・Will・Did・Are等） 設問が流れると同時に心の中でつぶやく（シャドウイングする）ことで、短期記憶に一瞬定着。 Part 3 ＆ 4 ナレーターによる Part の説明の間に Part 3 後半のグラフと図形を見ておくこと。 開始前に 3つの設問を3〜4秒でスキャン。開始前に選択肢は読まない。\n（脳の消費を避けるため） Why she said “XXXX” というような問題の場合は Sheと\u0026quot;XXXX\u0026quot;の部分のみ読んで瞬間記憶に格納。 英語を聞きながら、相応しい選択肢を指で押さえること。\nこの時点ではマークシートに記入しない。（記入に意識がいくと聞き逃すため。） 英語の読み上げが終わったら、指で押さえておいた選択肢を一気にマーク。 ナレーターが設問を読んでいる間に、次の問題の設問のスキャンを開始。 Part5 1問20秒以内。30問を10分以内で解くこと。 まず選択肢をザッと見ること。 選択肢を読み、品詞問題だとわかる場合は穴埋めの前後のみ見て5秒以内に即答。 Part6 大問を2分〜2分30秒、合計8〜10分以内に解くこと。 文章の穴埋めは後にまわすこと。 Part7 各パッセージを読む前に該当する設問をザッと読むこと。\n（設問を少し念頭に置いて長文を読む） チャットや図表以外はパラグラフ・リーディングをすること。 各段落内の最初と最後の1文のみをバーっと読み、全体の構成と配置を把握。 その後、必要に応じて設問で求められている箇所を深堀りして探し出すこと。 本番後 # 本番終了直後に自己分析すること。 改善点の例 イギリス英語 意図問題(問題文に suggest や imply 等を含むもの) 多義語、定型表現 前置詞・接続詞・接続副詞 IP テスト (オンラインの場合) # 概要 # Institutional Program Test の略。 企業、学校、塾等が主催する団体受験のこと。 特にコロナの時期は、自宅でオンラインで受験するケースがある。 事前のPC設定 # 大きめの外部モニターを接続しメインモニターに設定。 IP Test の文字が小さく読む速度が落ちるため、大きめのモニターに表示。 アプリの停止 Docker Clipy Box (Mac の場合) メニューバーで Box アイコンをクリックし検索メニューを表示。 または、キーボードショートカット (Ctrl + Option + Cmd + Space)を使用。 歯車アイコンをクリックし [終了] をクリック。 プロンプトに従い、開いているファイルを閉じ、終了に同意。 本番 # Listening / Reading 共通 公開テストとはパート分けが異なるため注意。 脳の休息時間 「Listening と Reading の間」「Reading UNIT ONE と Reading UNIT TWOの間」は\nタイマーでカウントされないため、数十秒〜数分 目を閉じて脳をリフレッシュ可能。 Reading 問題文の先読み 問題の表示後2秒程度で英語の音声が始まるため、問題文の先読みは不可。 Part 3〜4 要素の問題では 問題表示後の2秒の間に 3つの設問を目でスキャン。 パート分け UNIT ONE 23min, UNIT TWO 14min (2021年2月現在) UNIT TWO に進むと UNIT ONE の確認・修正は不可。 UNIT ONE で時間が余った状態で UNIT TWO に進んだ場合も、UNIT ONE の余り時間は UNIT TWO に繰り越されないため注意。 その他 # 以下のような場合、できる限り試験前に試験官に伝え、より良い環境で臨めるようにすること。 試験会場の机がガタつく場合 冷暖房の直風がきつい場合 廊下でスタッフの方がビニールを片付ける音がうるさい場合 電車の音が Reading の妨げになるケースがあるため\n受験票が届き次第、会場の周囲をマップで確認すること。 References # 40歳オーバーでニート状態だったぼくが初めてTOEICを受けていきなり930点取って人生を劇的に変えた、効果絶大な英語勉強法 自分を操る超集中力 "},{"id":20,"href":"/git/basic/","title":"Git Basic","section":"Git","content":" Git Basic # 実用的なコマンド # 頻繁に使うコマンド # $ git branch -a $ git checkout -b sample_branch_name # Edit source code $ git status $ git add . $ git commit -m \u0026#34;message\u0026#34; $ git push origin sample_branch_name git tag sample_tag_name git tag -n git push origin sample_tag_name 指定したフォーマットでコミット・ログを表示 # $ git log --graph --date=iso --pretty=format:\u0026#34;[%ad] %h %an : %s\u0026#34; 特定の注釈を含むコミットを検索 # $ git log --oneline --grep \u0026#34;\u0026lt;pattern\u0026gt;\u0026#34; コミット間の変更ファイル一覧を表示 # $ git diff --stat \u0026lt;Commit A\u0026gt; \u0026lt;Commit B\u0026gt; ファイル名のみ表示する場合\n$ git diff --stat --name-only \u0026lt;Commit A\u0026gt; \u0026lt;Commit B\u0026gt; Git 設定 # バージョンを確認 # $ git --version 設定の一覧を表示 # 設定適用範囲\nsystem: システム全体に適用 global: ユーザー単位で適用（ユーザーのホームディレクトリ直下の設定ファイルを参照） local: Gitリポジトリ単位で適用（.git ディレクトリ直下の設定ファイルを参照） $ git config --system --list $ git config --global --list $ git config --local --list 適用範囲を指定しない場合 --local と同様に Gitリポジトリ内の設定を表示\n$ git config --list Gitリポジトリの管理するディレクトリ外で以下を実行した場合 エラーが発生\n$ git config --local --list fatal: --local can only be used inside a git repository --list オプションの短縮版\n$ git config --system -l $ git config --global -l $ git config --local -l 設定ファイルを直接編集 # $ git config --system --edit $ git config --global --edit $ git config --local --edit --edit オプションの短縮版\n$ git config --system -e $ git config --global -e $ git config --local -e どの設定ファイルに記載された設定が適用されているか確認 # $ git config --show-origin user.name $ git config --show-origin user.email $ git config --show-origin core.autocrlf ユーザー名/メールアドレスを設定 # \u0026ndash;global オプションを付けないと、該当のリポジトリのみ有効な設定になる $ git config --global user.name \u0026lt;username\u0026gt; $ git config --global user.email \u0026lt;mailaddress\u0026gt; 出力をカラーリングするよう設定 # $ git config --global color.ui auto コマンドにエイリアスを設定 # $ git config --global alias.\u0026lt;aliasname\u0026gt; \u0026lt;commandname\u0026gt; 不要なファイルを管理対象外 # .gitignore に記載されたファイル名は、Gitの管理対象外 .gitignore ファイル自体をコミットしておくこと $ echo \u0026lt;file name\u0026gt; \u0026gt;\u0026gt; .gitignore 空ディレクトリを管理対象 # Gitでは空ディレクトリは管理対象外 空ディレクトリを管理対象にする場合、任意のファイルを配置 慣例的に .gitkeep というファイルを使用 $ cd \u0026lt;directory name\u0026gt; $ touch .gitkeep プロキシサーバを経由してhttp接続 # $ git config --global http.proxy \u0026lt;プロキシサーバのアドレス\u0026gt;:\u0026lt;プロキシサーバのポート番号\u0026gt; .gitconfig ファイルの http の項目に次の設定を直接追加することもできる [http] proxy = \u0026lt;プロキシサーバのアドレス\u0026gt;:\u0026lt;プロキシサーバのポート番号\u0026gt; ユーザー認証の必要なプロキシサーバを経由してhttp接続 # $ git config --global http.proxy http://\u0026lt;ユーザ名ー\u0026gt;:\u0026lt;パスワード\u0026gt;@\u0026lt;プロキシサーバのアドレス\u0026gt;:\u0026lt;プロキシサーバのポート番号\u0026gt; .gitconfig ファイルの http の項目に次の設定を直接追加することもできる [http] proxy = http://\u0026lt;ユーザー名\u0026gt;:\u0026lt;パスワード\u0026gt;@\u0026lt;プロキシサーバのアドレス\u0026gt;:\u0026lt;プロキシサーバのポート番号\u0026gt; 基本操作 # リポジトリを作成 # $ git init ファイルやディレクトリをインデックスに登録 # $ git add . $ git add *.txt インデックスに追加されたファイルをコミット # $ git commit 変更されたファイルの一覧を表示 # $ git status 変更されたファイルの差分を表示 # $ git diff コミットログを表示 # $ git log コミットログを表示 # git log コマンドで参照したコミットやHEADを指定\n$ git show \u0026lt;commit\u0026gt; ファイルやディレクトリ名の変更や移動 # $ git mv \u0026lt;old file name\u0026gt; \u0026lt;new file name\u0026gt; 管理対象ではないファイルを削除 # -n ： 削除されるファイルを確認 -f ： 実際にファイルを削除 -x ： .gitignore に指定されたファイルも削除 $ git clean 手元で変更したインデックスに登録されていないファイルを元に戻す # $ git checkout -- \u0026lt;file\u0026gt; インデックスに登録したファイルの取り消し # $ git reset HEAD -- \u0026lt;file\u0026gt; 以前にコミットしたことのあるファイルだけを全てインデックスに登録 # $ git add -u コミットログ操作 # コミットログを表示 # $ git log 各コミットログを1行で表示\n$ git log --oneline git log の主なオプション # オプション 内容 -n 件数を指定して表示 \u0026ndash;relative-date 相対フォーマット (“3 days ago” など) で日付を表示 \u0026ndash;oneline 1行で表示 \u0026ndash;pretty フォーマットを指定して表示. オプションは oneline, short, full, fuller, fomat(独自指定) \u0026ndash;graph ブランチやマージの履歴をアスキーグラフで表示 git log --pretty のフォーマット # 置換文字列 内容 %H コミットのハッシュ %h コミットのハッシュ (短縮版) %T ツリーのハッシュ %t ツリーのハッシュ (短縮版) %P 親のハッシュ %p 親のハッシュ (短縮版) %an Author の名前 %ae Author のメールアドレス %ad Author の日付 (-date= オプションに従った形式) %ar Author の相対日付 %cn Committer の名前 %ce Committer のメールアドレス %cd Committer の日付 %cr Committer の相対日付 %s 件名 git log の日付フォーマット # フォーマット 内容 relative 相対時間 (3 days ago) local ローカルタイムゾーン iso ISO 8601 フォーマット rfc RFC 2822 フォーマット short YYYY-MM-DD raw %s %z default 標準 直前のコミットの内容を修正 # 現在のブランチの先頭のコミットに上書き 入力画面が表示されるのでコミットログを確認して保存\n$ git commit --amend 入力画面が表示されず即上書き保存\ngit commit --amend --no-edit 直前のコミットのコメントだけを修正 # インデックスにファイルを登録していない状態で再コミット\n入力画面が表示されるのでコメントを修正して保存\n$ git commit --amend 過去のコミットの内容を修正 # 指定したコミットより後のコミットを指定すると、コミットの一覧が表示される その中から修正したいコミットを見つけてその行の pick の文字を edit に変更して保存・終了する $ git rebase -i \u0026lt;commit\u0026gt; 修正したいファイルを編集、保存した後に --amend オプションを指定してコミット $ git commit --amend --continue オプションを指定し rebase を実行 $ git rebase --continue 過去のコミットのコメントを修正 # 指定したコミットより後のコミットを指定すると、コミットの一覧が表示される その中から修正したいコミットを見つけてその行の pick の文字を edit に変更して保存・終了する $ git rebase -i \u0026lt;commit\u0026gt; 修正したいファイルを編集、保存した後に --amend オプションを指定してコミット コメントの入力画面が表示されるので、コメントを修正 $ git commit --amend --continue オプションを指定し rebase を実行 $ git rebase --continue rebase を途中で中止 # $ git rebase --abort HEADの移動履歴を表示 # 過去に HEAD が指していたコミットの一覧を表示(削除したコミットや rebase 等によってまとめられたコミットなども表示)\n$ git reflog ブランチの先頭の移動履歴 # 過去にそのブランチの先頭が指していたコミットの一覧\n$ git reflog \u0026lt;branch name\u0026gt; 直前のコミットを取り消し # $ git reset --hard HEAD~ rebase を取り消し # HEADの移動履歴から rebase 直前のコミットを確認 $ git reflog 見つけたハッシュ値を \u0026lt;commit\u0026gt; で指定して reset を実行 $ git reset --hard \u0026lt;commit\u0026gt; 直前の reset を取り消し # reset 前のコミットは ORIG_HEAD という名前で参照できるので、これを指定して reset を実行\n$ git reset --hard ORIG_HEAD ブランチを間違えてしまったコミットを移動 # \u0026lt;commit\u0026gt; で指定したコミットを現在のブランチにコピー\n$ git cherry-pick \u0026#34;\u0026lt;commit\u0026gt;\u0026#34; 特定のコメントを含むコミットを検索 # \u0026lt;pattern\u0026gt; で指定した文字がコミットログに含まれるコミット\n$ git log --grep \u0026#34;\u0026lt;pattern\u0026gt;\u0026#34; ブランチ操作 # ローカル・ブランチの一覧を表示 # $ git branch 特定の文字列を含むブランチをローカル・ブランチから検索 # $ git branch --list \u0026#39;sample-*\u0026#39; or\n$ git branch -l \u0026#39;sample-*\u0026#39; ローカル・ブランチとリモート・ブランチの一覧を表示 # $ git branch --all or\n$ git branch -a 特定の文字列を含むブランチをローカル・ブランチとリモート・ブランチから検索 # $ git branch --all --list \u0026#39;sample-*\u0026#39; or\n$ git branch -a -l \u0026#39;sample-*\u0026#39; ブランチを作成 # $ git branch \u0026lt;branch name\u0026gt; ブランチ名を変更 # $ git branch -m \u0026lt;old branch\u0026gt; \u0026lt;new branch\u0026gt; ブランチを削除 # $ git branch -d \u0026lt;branch name\u0026gt; ブランチを強制的に削除 # HEAD にマージされていないコミットがあるブランチを強制的に削除\n$ git branch -D \u0026lt;branch name\u0026gt; ブランチを切り替え # $ git checkout \u0026lt;branch\u0026gt; ブランチの作成と切り替えを一度に実行\n$ git checkout -b \u0026lt;branch\u0026gt; ブランチをマージ # $ git merge \u0026lt;branch\u0026gt; fast-forwardなマージであってもマージコミットを作成\nブランチが存在したという情報を残したいときに有用\n$ git merge --no-ff \u0026lt;branch\u0026gt; リモート操作 # 既存のリモートリポジトリを複製 # $ git clone \u0026lt;repository url\u0026gt; リモートリポジトリを追加 # $ git remote add \u0026lt;name\u0026gt; \u0026lt;repository url\u0026gt; リモートリポジトリの一覧を表示 # $ git remote リモートリポジトリのブランチからローカルリポジトリのブランチを作成 # $ git checkout \u0026lt;branch\u0026gt; リモートリポジトリにブランチを作成 / ブランチに変更内容を反映 # repository や refspec は省略可 repository には remote add コマンドで追加したリポジトリ名以外にURLを直接指定可 repository を省略した場合, 追跡しているリモートリポジトリを指定 refspec はブランチ名などを指定可 refspec を省略した場合, デフォルトでは全てのブランチが対象 $ git push \u0026lt;repository\u0026gt; \u0026lt;refspec\u0026gt; リモートリポジトリのブランチの変更内容を確認 # リモートリポジトリでの変更内容を確認したいがローカルリポジトリには反映させたくない場合に fetchを実行 repository や refspec は省略可 repository には remote add コマンドで追加したリポジトリ名以外にURLを直接指定可 repository を省略した場合, 追跡しているリモートリポジトリを指定 refspec はブランチ名などを指定可 refspec を省略した場合, デフォルトでは全てのブランチが対象 $ git fetch \u0026lt;repository\u0026gt; \u0026lt;refspec\u0026gt; リモートリポジトリから削除されたブランチをローカルリポジトリでも削除 # $ git fetch --prune or\n$ git remote prune \u0026lt;repository\u0026gt; リモートリポジトリのブランチの変更内容をローカルリポジトリのブランチに反映 # pull = fetch + merge repository や refspec は省略可 repository には remote add コマンドで追加したリポジトリ名以外にURLを直接指定可 repository を省略した場合, 追跡しているリモートリポジトリを指定 refspec はブランチ名などを指定可 refspec を省略した場合, デフォルトでは全てのブランチが対象 $ git pull \u0026lt;repository\u0026gt; \u0026lt;refspec\u0026gt; リモートリポジトリのブランチを削除 # $ git push --delete \u0026lt;repository\u0026gt; \u0026lt;branch name\u0026gt; リモートリポジトリにタグを作成 # $ git push \u0026lt;repository\u0026gt; \u0026lt;tag name\u0026gt; リモートリポジトリのタグを削除 # $ git push --delete \u0026lt;repository\u0026gt; \u0026lt;tag name\u0026gt; 登録済のリモートリポジトリのアドレスを変更 # 指定した名前で登録されているリモートリポジトリのアドレスを のアドレスに変更\n$ git remote set-url \u0026lt;name\u0026gt; \u0026lt;newurl\u0026gt; 登録済のリモートリポジトリの名前を変更 # $ git remote rename \u0026lt;old\u0026gt; \u0026lt;new\u0026gt; サブモジュール(submodule)操作 # サブモジュールの設定 # .gitmodules というファイルを作成して以下の内容を記述\n[submodule \u0026#34;\u0026lt;submodule name\u0026gt;\u0026#34;] path = \u0026lt;directory name\u0026gt; url = \u0026lt;repository url\u0026gt; e.g.)\n[submodule \u0026#34;themes/hugo-book\u0026#34;] path = themes/hugo-book url = https://github.com/alex-shpak/hugo-book サブモジュールを含めて既存のリモートリポジトリを複製 # $ git clone --recursive \u0026lt;repository url\u0026gt; サブモジュールを後から複製 # $ git submodule update --init --recursive サブモジュールのリモートリポジトリのブランチを指定し最新を反映 # $ git submodule add -b \u0026lt;branch name\u0026gt; \u0026lt;repository url\u0026gt; サブモジュールのリモートリポジトリのマスタの最新を反映 # git submodule update --remote タグ操作 # ローカルのタグの一覧を表示 # タグ名のみ\n$ git tag タグ名と注釈\n$ git tag -n -n 表示する注釈の行数 $ git tag -n1 リモートのタグの一覧を表示 # リモート・リポジトリ origin のタグの一覧を取得\n$ git ls-remote --tags origin リモートのタグを取得 fetch # $ git fetch --all --tags タグ付け (タグを作成) # 現在のコミットにタグ付け # 注釈なし\n$ git tag \u0026lt;tag name\u0026gt; 注釈付き\n$ git tag -m \u0026#34;\u0026lt;tag message\u0026gt;\u0026#34; \u0026lt;tag name\u0026gt; $ git tag --message \u0026#34;\u0026lt;tag message\u0026gt;\u0026#34; \u0026lt;tag name\u0026gt; 注釈付き (viが起動)\n$ git tag -a \u0026lt;tag name\u0026gt; $ git tag --annotate \u0026lt;tag name\u0026gt; 後からコミットにタグ付け # 指定したコミット, 注釈付き\n$ git tag -m \u0026#34;\u0026lt;tag message\u0026gt;\u0026#34; \u0026lt;tag name\u0026gt; \u0026lt;commit\u0026gt; $ git tag --message \u0026#34;\u0026lt;tag message\u0026gt;\u0026#34; \u0026lt;tag name\u0026gt; \u0026lt;commit\u0026gt; 指定したコミット, 注釈付き (viが起動)\n$ git tag -a \u0026lt;tag name\u0026gt; -m \u0026lt;tag message\u0026gt; \u0026lt;commit\u0026gt; $ git tag --annotate \u0026lt;tag name\u0026gt; --message \u0026lt;tag message\u0026gt; \u0026lt;commit\u0026gt; タグを削除 # まだプッシュしていないタグは削除可\n$ git tag -d \u0026lt;tag name\u0026gt; $ git tag --delete \u0026lt;tag name\u0026gt; タグを共有 # リモート・リポジトリ origin にプッシュ\n$ git push origin \u0026lt;tag name\u0026gt; 全てのタグをリモート・リポジトリ origin にプッシュ\n$ git push origin --tags タグをチェックアウト # $ git checkout \u0026lt;tag name\u0026gt; タグをチェックアウトすると同時にブランチを作成\n$ git checkout \u0026lt;tag name\u0026gt; -b \u0026lt;branch name\u0026gt; トラブル対応 # Error \u0026ldquo;would clobber existing tag\u0026rdquo; # リモートとローカルのリポジトリのタグ名が重複していることが原因\nリモート・リポジトリのタグでローカル・リポジトリのタグを上書きし解消\n$ git fetch --tags -f 過去のコミットの編集者(Author)とコミッター(Committer)を変更 # 編集者(Author)とコミッター(Committer)のユーザー名とメールを確認\n$ git log --pretty=full commit XXXXXXXXXX (HEAD -\u0026gt; sample-branch, origin/sample-branch) Author: before-foo \u0026lt;before-foo@sample.com\u0026gt; Commit: before-bar \u0026lt;before-bar@sample.com\u0026gt; 過去の全コミットを変更\n$ git filter-branch -f --env-filter \\ \u0026#34;GIT_AUTHOR_NAME=\u0026#39;after-foo\u0026#39;; \\ GIT_AUTHOR_EMAIL=\u0026#39;after-foo@sample.com\u0026#39;; \\ GIT_COMMITTER_NAME=\u0026#39;after-bar\u0026#39;; \\ GIT_COMMITTER_EMAIL=\u0026#39;after-bar@sample.com\u0026#39;;\u0026#34; \\ HEAD 過去のコミットに反映されたことを確認\n$ git log --pretty=full リモートリポジトリへ強制的に反映\ngit push -f 特定の条件の過去のコミットのみ修正する場合\n$ git filter-branch --commit-filter \u0026#39; if [ \u0026#34;$GIT_COMMITTER_EMAIL\u0026#34; = \u0026#34;before-bar@sample.com\u0026#34; ]; then GIT_AUTHOR_NAME=\u0026#34;after-foo\u0026#34;; GIT_AUTHOR_EMAIL=\u0026#34;after-foo@sample.com\u0026#34;; GIT_COMMITTER_NAME=\u0026#34;after-bar\u0026#34;; GIT_COMMITTER_EMAIL=\u0026#34;after-bar@sample.com\u0026#34;; git commit-tree \u0026#34;$@\u0026#34;; else git commit-tree \u0026#34;$@\u0026#34;; fi\u0026#39; HEAD その他 # 特定のディレクトリやファイルのみチェックアウト # mkdir work \u0026amp;\u0026amp; cd $_ git init . git sparse-checkout init --cone git sparse-checkout set \u0026lt;target path of directory or file\u0026gt; git sparse-checkout list git remote add origin \u0026lt;remote url\u0026gt; git pull origin \u0026lt;branch name\u0026gt; ls -al \u0026lt;target path of directory or file\u0026gt; HEAD~ と HEAD^ の違い # ^ (キャレット): n番目の親 ~ (チルダ): 最初の親のみに続くn世代前の祖先 https://git-scm.com/docs/git-rev-parse#_specifying_revisions\nG H I J \\ / \\ / D E F \\ | / \\ \\ | / | \\|/ | B C \\ / \\ / A A = = A^0 B = A^ = A^1 = A~1 C = = A^2 D = A^^ = A^1^1 = A~2 E = B^2 = A^^2 F = B^3 = A^^3 G = A^^^ = A^1^1^1 = A~3 H = D^2 = B^^2 = A^^^2 = A~2^2 I = F^ = B^3^ = A^^3^ J = F^2 = B^3^2 = A^^3^2 バージョンアップ # macOS # $ git --version $ brew ls | grep git nothing $ brew install git $ brew link --overwrite git $ which git /usr/local/bin/git $ ls -la /usr/local/bin/git $ git --version References # https://qiita.com/gold-kou/items/7f6a3b46e2781b0dd4a0 https://qiita.com/jesus_isao/items/63557eba36819faa4ad9 https://backlog.com/ja/git-tutorial/reference/ https://qiita.com/harukasan/items/9149542584385e8dea75 https://qiita.com/kawasaki_dev/items/41afaafe477b877b5b73 GitのCommitユーザを修正する方法 "},{"id":21,"href":"/mysql/basic/","title":"MySQL","section":"MySQL","content":" MySQL Basic # Preparation # Install to macOS # $ brew install mysql Start # $ mysql.server start Starting MySQL ....... SUCCESS! Check the vertion # $ mysql --version mysql Ver 8.0.26 for macos11.3 on x86_64 (Homebrew) Make initial settings # $ mysql_secure_installation パスワード強度検証プラグインの利用有無 パスワード強度の選択 root ユーザーのパスワード設定 匿名ユーザーの削除 リモートからの root ユーザーとしてのログインの禁止 サンプル用 test データベースの削除 $ mysql_secure_installation Securing the MySQL server deployment. Connecting to MySQL using a blank password. VALIDATE PASSWORD COMPONENT can be used to test passwords and improve security. It checks the strength of password and allows the users to set only those passwords which are secure enough. Would you like to setup VALIDATE PASSWORD component? ### パスワード強度検証プラグインの利用 Press y|Y for Yes, any other key for No: y ### y と入力 There are three levels of password validation policy: LOW Length \u0026gt;= 8 MEDIUM Length \u0026gt;= 8, numeric, mixed case, and special characters STRONG Length \u0026gt;= 8, numeric, mixed case, special characters and dictionary file ### パスワード検証ポリシーの選択 Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 2　### 2 と入力 Please set the password for root here. New password: ### rootユーザー用のパスワードを入力 Re-enter new password: ### rootユーザー用のパスワードを再入力 Estimated strength of the password: 100 Do you wish to continue with the password provided? (Press y|Y for Yes, any other key for No) : y　### y と入力 By default, a MySQL installation has an anonymous user, allowing anyone to log into MySQL without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. ### 匿名ユーザーの削除 Remove anonymous users? (Press y|Y for Yes, any other key for No) : y ### y と入力 Success. Normally, root should only be allowed to connect from \u0026#39;localhost\u0026#39;. This ensures that someone cannot guess at the root password from the network. ### リモートからの root ログインの拒否 Disallow root login remotely? (Press y|Y for Yes, any other key for No) : y ### y と入力 Success. By default, MySQL comes with a database named \u0026#39;test\u0026#39; that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. ### test データベースの削除 Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y　### y と入力 - Dropping test database... Success. - Removing privileges on test database... Success. Reloading the privilege tables will ensure that all changes made so far will take effect immediately. ### 特権テーブルの即時適用 Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y　### y と入力 Success. All done! 設定ファイル # 設定ファイル my.cnf のパス、適用範囲、読み込み順序\n# Path Scope 1 /etc/my.cnf グローバル 2 /etc/mysql/my.cnf グローバル 3 ~/my.cnf ユーザー固有 ログイン # e.g) rootユーザーでのログイン\n$ mysql -uroot -p Enter password: ### 設定したパスワードを入力 バージョン # SELECT VERSION(); タイムゾーン # SHOW VARIABLES LIKE \u0026#39;%time_zone%\u0026#39;; 文字コードと照合順序 # 文字コード\nSHOW VARIABLES LIKE \u0026#39;%character\\_set\\_%\u0026#39;; 照合順序(ソート順)\nSHOW VARIABLES LIKE \u0026#39;collation%\u0026#39;; サーバ全体 # サーバの文字コードの確認\nSHOW GLOBAL VARIABLES LIKE \u0026#39;character_set_server\u0026#39;; サーバの照合順序(ソート順)の確認\nSHOW GLOBAL VARIABLES LIKE \u0026#39;collation_server\u0026#39;; DB単位 # DB作成時に文字コードと照合順序(ソート順)を設定\nCREATE DATABASE `sample_db` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin; DBの文字コードの確認\nSHOW GLOBAL VARIABLES LIKE \u0026#39;character_set_database\u0026#39;; DBの照合順序(ソート順)の確認\nSHOW GLOBAL VARIABLES LIKE \u0026#39;collation_database\u0026#39;; カラム単位 # サーバやDBと異なる文字コードや照合順序(ソート順)を設定する方法\nCREATE TABLE tbl1 ( id bigint NOT NULL, col1 varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_as_ci NOT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8mb4_general_ci; 照合順序が異なるカラムで結合 # SELECT * FROM sample_table_1 a INNER JOIN sample_table_2 b ON a.name = b.name COLLATE utf8mb4_0900_as_ci; 文字コード utf8mb4 のデフォルトの照合順序のMySQLバージョンごとの違い # Version Character Set(文字コード) Collation(照合順序=ソート順) \u0026gt;= 8.0 utf8mb4 utf8mb4_general_ci \u0026lt;= 5.7 utf8mb4 utf8mb4_0900_ai_ci データベース/テーブル/カラムの一覧 # データベースの一覧 # SHOW DATABASES; SELECT DISTINCT table_schema AS database_name FROM information_schema.tables WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) ORDER BY table_schema; テーブルの一覧 # USE sample_database; SHOW TABLES; SHOW TABLES FROM sample_database; SELECT table_schema AS database_name, table_name FROM information_schema.tables WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) AND table_type = \u0026#39;BASE TABLE\u0026#39; ORDER BY table_schema, table_type, table_name; テーブルごとの自動採番 AUTO_INCREMENT の一覧 # SELECT table_schema AS database_name, table_name, auto_increment FROM information_schema.tables WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) AND table_type = \u0026#39;BASE TABLE\u0026#39; ORDER BY table_schema, table_name; テーブルごとのカラムの一覧（カンマ区切り） # SELECT table_schema AS database_name, table_name, GROUP_CONCAT(column_name) AS column_names FROM information_schema.columns WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) GROUP BY table_schema, table_name テーブルの物理名と論理名（テーブル・コメント）の一覧 # SELECT table_schema AS databae_name, table_name, table_comment FROM information_schema.tables WHERE table_schema = \u0026#39;sample_database\u0026#39; ORDER BY table_schema, table_name; カラムの物理名と論理名（カラム・コメント）の一覧 # SELECT table_schema AS databae_name, table_name, column_name, column_comment FROM information_schema.columns ORDER BY table_schema, table_name; 特定のカラムを含むテーブルの一覧 # SELECT table_schema AS databae_name, table_name, column_name, column_comment FROM information_schema.columns WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) AND column_name LIKE \u0026#39;%sample_column%\u0026#39; ORDER BY table_schema, table_name, column_name; インデックスの一覧 # SELECT table_schema AS database_name, table_name, column_name, index_name FROM information_schema.statistics ORDER BY table_schema, table_name, column_name; ビューの一覧 # SELECT table_schema AS database_name, table_name AS view_name FROM information_schema.tables WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) AND table_type = \u0026#39;VIEW\u0026#39; ORDER BY table_schema, table_name; テーブルのキー情報の一覧 # テーブルごとのプライマリーキー制約の一覧 # SELECT table_schema AS database_name, table_name, column_name AS primary_key FROM information_schema.KEY_COLUMN_USAGE WHERE constraint_name = \u0026#39;PRIMARY\u0026#39;; テーブルごとのユニークキー制約の一覧 # SELECT table_schema AS database_name, table_name, GROUP_CONCAT(column_name) AS unique_keys FROM information_schema.KEY_COLUMN_USAGE WHERE position_in_unique_constraint = 1 GROUP BY table_schema, table_name; テーブルごとの外部キー制約の一覧 # SELECT table_schema AS database_name, table_name, GROUP_CONCAT( CONCAT( column_name, \u0026#39;=\u0026#39;, referenced_table_name, \u0026#39;.\u0026#39;, referenced_column_name ) ) AS referenced FROM information_schema.KEY_COLUMN_USAGE WHERE referenced_table_name IS NOT NULL GROUP BY table_schema, table_name; テーブルごとのプライマリーキー・ユニークキー・外部キー一覧 # SELECT table_info.*, primary_info.primary_key, unique_info.unique_keys, reference_info.referenced FROM ( SELECT table_schema AS database_name, table_name FROM information_schema.tables WHERE table_type = \u0026#39;BASE TABLE\u0026#39; ) AS table_info LEFT JOIN ( SELECT table_schema AS database_name, table_name, GROUP_CONCAT(column_name) AS unique_keys FROM information_schema.KEY_COLUMN_USAGE WHERE position_in_unique_constraint = 1 GROUP BY table_schema, table_name ) AS unique_info ON table_info.database_name = unique_info.database_name AND table_info.table_name = unique_info.table_name LEFT JOIN ( SELECT table_schema AS database_name, table_name, column_name AS primary_key FROM information_schema.KEY_COLUMN_USAGE WHERE constraint_name = \u0026#39;PRIMARY\u0026#39; ) AS primary_info ON table_info.database_name = primary_info.database_name AND table_info.table_name = primary_info.table_name LEFT JOIN ( SELECT table_schema AS database_name, table_name, GROUP_CONCAT( CONCAT( column_name, \u0026#39;=\u0026#39;, referenced_table_name, \u0026#39;.\u0026#39;, referenced_column_name ) ) AS referenced FROM information_schema.KEY_COLUMN_USAGE WHERE referenced_table_name IS NOT NULL GROUP BY table_schema, table_name ) AS reference_info ON table_info.database_name = reference_info.database_name AND table_info.table_name = reference_info.table_name データ容量の一覧 # データベースごとのサイズの一覧 # SELECT table_schema AS database_name, CONCAT( SUM(data_length + index_length) / (1024 * 1024), \u0026#39; MB\u0026#39; ) AS db_size FROM information_schema.tables GROUP BY table_schema ORDER BY table_schema; データベースごとのテーブル数の一覧 # SELECT table_schema AS database_name, COUNT(*) AS table_count FROM information_schema.tables WHERE table_type = \u0026#39;BASE TABLE\u0026#39; GROUP BY table_schema; テーブルごとのサイズの一覧 # SELECT table_schema AS database_name, table_name, CONCAT( (data_length + index_length) / (1024 * 1024), \u0026#39; MB\u0026#39; ) AS table_size FROM information_schema.tables WHERE table_type = \u0026#39;BASE TABLE\u0026#39; AND table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) ORDER BY table_schema, (data_length + index_length) DESC, table_name; テーブルごとのレコード数の一覧 # SELECT table_schema AS database_name, table_name, table_rows FROM information_schema.tables AS `target` WHERE table_type = \u0026#39;BASE TABLE\u0026#39; AND table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) ORDER BY table_schema, table_rows DESC, table_name; データベース/テーブルごとの件数/容量/カラム/キー情報/文字コード/AUTO_INCREMENTの一覧 # SELECT table_info.table_schema AS database_name, database_info.table_count, database_info.db_size, table_info.table_name, table_info.table_rows, table_info.table_size, columns_info.column_names, key_info.primary_key, key_info.unique_keys, key_info.referenced, table_info.auto_increment, table_info.table_collation AS character_info FROM ( -- 全テーブル情報 SELECT *, CONCAT( (data_length + index_length) / (1024 * 1024), \u0026#39; MB\u0026#39; ) AS table_size FROM information_schema.tables WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) AND table_type = \u0026#39;BASE TABLE\u0026#39; ) AS table_info LEFT JOIN ( -- データベースの容量とテーブル数 SELECT table_schema AS database_name, CONCAT( SUM(data_length + index_length) / (1024 * 1024), \u0026#39; MB\u0026#39; ) AS db_size, SUM( CASE WHEN table_type = \u0026#39;BASE TABLE\u0026#39; THEN 1 ELSE 0 END ) AS table_count FROM information_schema.tables GROUP BY table_schema ) AS database_info ON table_info.table_schema = database_info.database_name LEFT JOIN ( -- テーブルごとのカラム SELECT table_schema AS database_name, table_name, GROUP_CONCAT(column_name) AS column_names FROM information_schema.columns WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) GROUP BY table_schema, table_name ) AS columns_info ON table_info.table_schema = columns_info.database_name AND table_info.table_name = columns_info.table_name LEFT JOIN ( -- テーブルのキー情報（プライマリーキー、ユニークキー、外部キー） SELECT table_info.*, primary_info.primary_key, unique_info.unique_keys, reference_info.referenced FROM ( SELECT table_schema AS database_name, table_name FROM information_schema.tables WHERE table_type = \u0026#39;BASE TABLE\u0026#39; ) AS table_info LEFT JOIN ( SELECT table_schema AS database_name, table_name, GROUP_CONCAT(column_name) AS unique_keys FROM information_schema.KEY_COLUMN_USAGE WHERE position_in_unique_constraint = 1 GROUP BY table_schema, table_name ) AS unique_info ON table_info.database_name = unique_info.database_name AND table_info.table_name = unique_info.table_name LEFT JOIN ( SELECT table_schema AS database_name, table_name, column_name AS primary_key FROM information_schema.KEY_COLUMN_USAGE WHERE constraint_name = \u0026#39;PRIMARY\u0026#39; ) AS primary_info ON table_info.database_name = primary_info.database_name AND table_info.table_name = primary_info.table_name LEFT JOIN ( SELECT table_schema AS database_name, table_name, GROUP_CONCAT( CONCAT( column_name, \u0026#39;=\u0026#39;, referenced_table_name, \u0026#39;.\u0026#39;, referenced_column_name ) ) AS referenced FROM information_schema.KEY_COLUMN_USAGE WHERE referenced_table_name IS NOT NULL GROUP BY table_schema, table_name ) AS reference_info ON table_info.database_name = reference_info.database_name AND table_info.table_name = reference_info.table_name ) AS key_info ON table_info.table_schema = key_info.database_name AND table_info.table_name = key_info.table_name ORDER BY table_info.table_schema, table_info.table_name; データベース # データベースの新規作成 # CHARACTER SET 文字コード utf8mb4 絵文字にも対応。 COLLATE 照合順序 utf8mb4_bin: 全ての区別あり（大文字小文字/全角半角の区別あり） utf8mb4_general_ci: 大文字小文字の区別なし utf8mb4_unicode_ci: 大文字小文字/全角半角の区別なし CREATE DATABASE sample_db DEFAULT CHARACTER SET = utf8mb4 DEFAULT COLLATE = utf8mb4_bin; データベースの文字コードの変更 # ALTER DATABASE sample_db DEFAULT CHARACTER SET = utf8mb4; ユーザー # ユーザーの新規作成 # CREATE USER \u0026#39;sample_user\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;sample_password\u0026#39;; ユーザーのパスワードの設定 # ログイン中ユーザーのパスワードの設定 # MySQL 5.5 \u0026amp; 5.6\n-- ログイン中のユーザーを確認 SELECT CURRENT_USER(); -- パスワードを設定 SET PASSWORD = PASSWORD(\u0026#39;sample_password\u0026#39;); MySQL 5.7\n-- ログイン中のユーザーを確認 SELECT CURRENT_USER(); -- パスワードを設定 SET PASSWORD = \u0026#39;sample_password\u0026#39;; MySQL 6\nALTER USER USER() IDENTIFIED BY \u0026#39;password\u0026#39;; 特定のユーザーのパスワードの設定 # via Command Line\nmysqladmin -u sample_user -h sample_host_name password \u0026#34;sample_password\u0026#34; MySQL 5.5 \u0026amp; 5.6\nSET PASSWORD FOR \u0026#39;sample_user\u0026#39;@\u0026#39;sample_host_name\u0026#39; = PASSWORD(\u0026#39;sample_password\u0026#39;); MySQL 5.7\nSET PASSWORD FOR \u0026#39;sample_user\u0026#39;@\u0026#39;sample_host_name\u0026#39; = \u0026#39;sample_password\u0026#39;; MySQL 8\nALTER USER \u0026#39;sample_user\u0026#39;@\u0026#39;sample_host_name\u0026#39; IDENTIFIED BY \u0026#39;sample_password\u0026#39;; ユーザーの権限の設定 # データベース権限 # sample_user に sample_db の全テーブルの全ての権限を付与\nGRANT ALL ON sample_db.* TO \u0026#39;sample_user\u0026#39;@\u0026#39;localhost\u0026#39;; sample_user に sample_db の全テーブルの参照/新規登録の権限を付与\nGRANT SELECT, INSERT ON sample_db.* TO \u0026#39;sample_user\u0026#39;@\u0026#39;localhost\u0026#39;; テーブル権限 # sample_user に sample_db の sample_table の参照権限を付与\nGRANT SELECT ON sample_db.sample_table TO \u0026#39;sample_user\u0026#39;@\u0026#39;localhost\u0026#39;; sample_user の既存の権限を変更せずに 1時間あたりの発行可能クエリ数を制限 MAX_QUERIES_PER_HOUR count クエリ数 MAX_UPDATES_PER_HOUR count 更新件数 MAX_CONNECTIONS_PER_HOUR count コネクション数（同時接続の最大数を制限） (結果がクエリーキャッシュから得られたクエリーは、MAX_QUERIES_PER_HOUR 制限に対してカウントされません。) count が 0 (デフォルト) である場合、これは、このアカウントに対する制限が存在しないことを示します。 GRANT USAGE ON *.* TO \u0026#39;sample_user\u0026#39;@\u0026#39;localhost\u0026#39; WITH MAX_QUERIES_PER_HOUR 100; カラム権限 # カラム権限で付与される権限 INSERT, SELECT, UPDATE の後にカッコで囲まれた 1つ以上のカラムを指定\nGRANT SELECT (sample_column_1, sample_column_2), UPDATE (sample_column_1) ON sample_db.sample_table TO \u0026#39;sample_user\u0026#39;@\u0026#39;localhost\u0026#39;; 権限 # ユーザーごとの権限の一覧 # SELECT grantee AS user, is_grantable AS is_grantable, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.user_privileges GROUP BY grantee, is_grantable ORDER BY grantee; データベースごとの権限の一覧 # SELECT grantee AS user, table_schema AS db, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.schema_privileges GROUP BY grantee, table_schema ORDER BY grantee, table_schema; テーブルごとの権限の一覧 # SELECT grantee AS user, table_schema AS db, table_name AS `table`, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.table_privileges GROUP BY grantee, table_schema, table_name ORDER BY grantee, table_schema, table_name; カラムごとの権限の一覧 # SELECT grantee AS user, table_schema AS db, table_name AS `table`, column_name AS `column`, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.column_privileges GROUP BY grantee, table_schema, table_name, column_name ORDER BY grantee, table_schema, table_name, column_name; ユーザーごと・データベースごと・テーブルごと・カラムごとの権限の一覧 # SELECT * FROM ( SELECT grantee AS user, is_grantable AS is_grantable, \u0026#39;-\u0026#39; AS db, \u0026#39;-\u0026#39; AS `table`, \u0026#39;-\u0026#39; AS `column`, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.user_privileges GROUP BY grantee, is_grantable UNION ALL SELECT grantee AS user, is_grantable AS is_grantable, table_schema AS db, \u0026#39;-\u0026#39; AS `table`, \u0026#39;-\u0026#39; AS `column`, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.schema_privileges GROUP BY grantee, is_grantable, table_schema UNION ALL SELECT grantee AS user, is_grantable AS is_grantable, table_schema AS db, table_name AS `table`, \u0026#39;-\u0026#39; AS `column`, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.table_privileges GROUP BY grantee, is_grantable, table_schema, table_name UNION ALL SELECT grantee AS user, is_grantable AS is_grantable, table_schema AS db, table_name AS `table`, column_name AS `column`, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.column_privileges GROUP BY grantee, is_grantable, table_schema, table_name, column_name ) AS authority ORDER BY user, db, `table`, `column`; 日付・時刻 # MySQL Reference Manual - Date and Time Functions\n日時フォーマット # SELECT DATE_FORMAT(CURRENT_TIME(), \u0026#39;%Y-%m-%d %k:%i:%s\u0026#39;); -- 2020-01-04 13:30:10 現在時刻 # SELECT NOW(); -- 2020-01-05 13:30:10 現在時刻の時刻のみ # SELECT CURRENT_TIME(); -- 13:30:10 今日 # SELECT CURRENT_DATE(); -- 2020-01-05 昨日 # SELECT CURRENT_DATE() - INTERVAL 1 DAY; -- 2020-01-04 明日 # SELECT CURRENT_DATE() + INTERVAL 1 DAY; -- 2020-01-06 1週間前 # SELECT CURRENT_DATE() - INTERVAL 7 DAY; -- 2019-12-29 1週間後 # SELECT CURRENT_DATE() + INTERVAL 7 DAY; -- 2020-01-12 当月1日 # SELECT DATE_FORMAT(CURRENT_DATE(), \u0026#39;%Y-%m-01\u0026#39;); -- 2020-01-01 当月末日 # SELECT LAST_DAY(CURRENT_DATE()); -- 2020-01-31 当月1日〜当月末日 # SELECT * FROM sample_table WHERE sample_column \u0026gt;= DATE_FORMAT(CURRENT_DATE(), \u0026#39;%Y-%m-01\u0026#39;) AND sample_column \u0026lt;= LAST_DAY(CURRENT_DATE()); 先月1日 # SELECT DATE_FORMAT(DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH), \u0026#39;%Y-%m-01\u0026#39;); -- 2019-12-01 -- or SELECT DATE_FORMAT(DATE_ADD(CURRENT_DATE(), INTERVAL -1 MONTH), \u0026#39;%Y-%m-01\u0026#39;); -- 2019-12-01 先月末日 # SELECT LAST_DAY(DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)); -- 2019-12-31 -- or SELECT LAST_DAY(DATE_ADD(CURRENT_DATE(), INTERVAL -1 MONTH)); -- 2019-12-31 来月1日 # SELECT DATE_FORMAT(DATE_ADD(CURRENT_DATE(), INTERVAL 1 MONTH), \u0026#39;%Y-%m-01\u0026#39;); -- 2020-02-01 来月末日 # SELECT LAST_DAY(DATE_ADD(CURRENT_DATE(), INTERVAL 1 MONTH)); -- 2020-02-29 昨年 # SELECT DATE_FORMAT((NOW() - INTERVAL 1 YEAR), \u0026#39;%Y-%m-%d\u0026#39;); 来年 # SELECT DATE_FORMAT((NOW() + INTERVAL 1 YEAR), \u0026#39;%Y-%m-%d\u0026#39;); 3年前 # SELECT DATE_FORMAT((NOW() - INTERVAL 3 YEAR), \u0026#39;%Y-%m-%d\u0026#39;); 3年後 # SELECT DATE_FORMAT((NOW() + INTERVAL 3 YEAR), \u0026#39;%Y-%m-%d\u0026#39;); 日付の差分 # SELECT DATEDIFF(\u0026#39;2020-12-31 23:59:59\u0026#39;,\u0026#39;2020-12-30\u0026#39;); -- 1 SELECT DATEDIFF(\u0026#39;2020-11-30 23:59:59\u0026#39;,\u0026#39;2020-12-31\u0026#39;); -- -31 年のみ # SELECT YEAR(\u0026#39;2020-12-31\u0026#39;); -- 2020 月のみ # SELECT MONTH(\u0026#39;2020-12-31\u0026#39;); -- 12 -- or SELECT DAYOFMONTH(\u0026#39;2020-12-31\u0026#39;); -- 12 日のみ # SELECT DAY(\u0026#39;2020-12-31\u0026#39;); -- 31 -- or SELECT DAYOFMONTH(\u0026#39;2020-12-31\u0026#39;); -- 31 曜日 # 曜日インデックス (1 = Sunday、2 = Monday、…、7 = Saturday)\nSELECT DAYOFWEEK(\u0026#39;2007-02-03\u0026#39;); -- 7 曜日インデックス (0 = Monday、1 = Tuesday、…6 = Sunday)\nSELECT WEEKDAY(\u0026#39;2008-02-03 22:23:00\u0026#39;); -- 6 曜日（日本語） # SELECT CASE DATE_FORMAT(NOW(), \u0026#39;%w\u0026#39;) WHEN 0 THEN \u0026#39;日\u0026#39; WHEN 1 THEN \u0026#39;月\u0026#39; WHEN 2 THEN \u0026#39;火\u0026#39; WHEN 3 THEN \u0026#39;水\u0026#39; WHEN 4 THEN \u0026#39;木\u0026#39; WHEN 5 THEN \u0026#39;金\u0026#39; WHEN 6 THEN \u0026#39;土\u0026#39; END; 年内の歴週 # SELECT WEEKOFYEAR(\u0026#39;2008-02-20\u0026#39;); -- 8 年内の通日 # SELECT DAYOFYEAR(\u0026#39;2007-02-03\u0026#39;); -- 34 便利関数 # 値がNULLの場合の初期値を返却 IFNULL # SELECT IFNULL(name, \u0026#39;anonym\u0026#39;) AS name FROM sample_table; 最初のNULL以外の値を返却 COALESCE # NULL以外の値がない場合 NULLを返却\nSELECT COALESCE( phone_number_smart_private, phone_number_home, phone_number_office, NULL ) AS phone_number FROM sample_table; カンマ区切りで結合 GROUP_CONCAT # SELECT GROUP_CONCAT(id) AS id -- \u0026#39;1,2,3,4,5\u0026#39; FROM sample_table ORDER BY id; カンマ区切りの値を検索 FIND_IN_SET # INDEXが効かないため要注意 SELECT * FROM sample_table WHERE FIND_IN_SET(id, \u0026#39;1,2,3,4\u0026#39;); 指定した順番に並べ替え FIELD # SELECT * FROM sample_table WHERE id IN(1, 2, 3) ORDER BY FIELD(id, 3, 1, 2); 条件分岐 CASE # SELECT CASE WHEN active_flag = true THEN \u0026#39;ON\u0026#39; WHEN active_flag = false THEN \u0026#39;OFF\u0026#39; ELSE \u0026#39;\u0026#39; END FROM sample_table; SELECT id, name, score, CASE WHEN score \u0026gt;= 80 THEN \u0026#39;Excellent\u0026#39; WHEN 80 \u0026gt; score AND score \u0026gt;= 70 THEN \u0026#39;Good\u0026#39; WHEN 70 \u0026gt; score AND score \u0026gt;= 60 THEN \u0026#39;Average\u0026#39; WHEN 60 \u0026gt; score AND score \u0026gt;= 50 THEN \u0026#39;Below Average\u0026#39; WHEN 50 \u0026gt; score THEN \u0026#39;Poor\u0026#39; ELSE \u0026#39;\u0026#39; END AS \u0026#39;evaluation\u0026#39; FROM scores; 便利SQL # SELECT句の値を変数にセット # SELECT 100, \u0026#39;sample\u0026#39; INTO @HOGE, @FOO; SELECT @HOGE, @FOO; +-------+--------+ | @HOGE | @FOO | +-------+--------+ | 100 | sample | +-------+--------+ SELECT/INSERT (SELECT したデータを INSERT) # INSERT INTO sample_table_1 (sample_column_1, sample_column_2, sample_column_3) SELECT sample_column_1, sample_column_2, sample_column_3 FROM sample_table_2; 一部の値を固定値で登録（以下の例では sample_column_3 に 固定値 \u0026lsquo;hoge\u0026rsquo; を登録\nINSERT INTO sample_table_1 (sample_column_1, sample_column_2, sample_column_3) SELECT sample_column_1, sample_column_2, \u0026#39;hoge\u0026#39; AS sample_column_3 FROM sample_table_2; SELECT/UPDATE (SELECT したデータを UPDATE) # UPDATE sample_table_2 dest, ( SELECT first_name, last_name, birthday, email FROM sample_table_1 WHERE updated_at \u0026gt; \u0026#39;2021-01-01 00:00:00\u0026#39; ) src SET dest.fullname = CONCAT(src.first_name, \u0026#39; \u0026#39;, src.last_name), dest.birthday = src.birthday, dest.email = src.email WHERE dest.email = src.email ; 特定のカラムの値が重複しているレコードを抽出 HAVING/GROUP BY # SELECT sample_column, COUNT(*) AS count FROM sample_table GROUP BY sample_column HAVING count \u0026gt; 1 ORDER BY sample_column; 置換 # 文字列を置換して更新 # UPDATE sample_table SET sample_column = REPLACE(sample_column, \u0026#39;Search String\u0026#39;, \u0026#39;Replacement String\u0026#39;) WHERE sample_column LIKE \u0026#39;%Search String%\u0026#39;; 改行コード # Carriage Return (CR) # \\r CHAR(13) Line Feed (LF) # \\n CHAR(10) 改行コードを半角スペースに置換 # SELECT REPLACE(REPLACE(REPLACE(sample_column, \u0026#39;\\r\\n\u0026#39;, \u0026#39; \u0026#39;), \u0026#39;\\r\u0026#39;, \u0026#39; \u0026#39;), \u0026#39;\\n\u0026#39;, \u0026#39; \u0026#39;) FROM sample_table; SELECT REPLACE(REPLACE(REPLACE(sample_column, CHAR(13) + CHAR(10), \u0026#39; \u0026#39;), CHAR(13), \u0026#39; \u0026#39;), CHAR(10), \u0026#39; \u0026#39;) FROM sample_table; UPDATE sample_table SET sample_column = REPLACE(REPLACE(REPLACE(sample_column, \u0026#39;\\r\\n\u0026#39;, \u0026#39; \u0026#39;), \u0026#39;\\r\u0026#39;, \u0026#39; \u0026#39;), \u0026#39;\\n\u0026#39;,\u0026#39; \u0026#39;); UPDATE sample_table SET REPLACE(REPLACE(REPLACE(sample_column, CHAR(13) + CHAR(10), \u0026#39; \u0026#39;), CHAR(13), \u0026#39; \u0026#39;), CHAR(10), \u0026#39; \u0026#39;); VIEW # VIEW の概要 # VIEW（ビュー）とはテーブルから取得したいデータの条件を定義し、あたかも独立したテーブルのように扱うためのもの。 VIEWそのものはデータを持たず、元になったテーブルからデータを参照。 VIEWだけ閲覧できるよう権限を設定することも可能。 参照: ビューの作成 VIEWの作成 # CREATE VIEW view_name AS select_statement or\nCREATE VIEW view_name (sample_column_1, sample_column_2) AS select_statement e.g.\nCREATE VIEW sales_report AS SELECT DATE_FORMAT(receipt_date, \u0026#39;%Y%m\u0026#39;) AS month, id AS product_id, SUM(amount) AS total_number, SUM(amount * price) AS total_amount FROM orders ORDER BY month, product_id; SELECT * FROM sales_report; or\nCREATE VIEW sales_report (month, product_id, total_number, total_amount) AS SELECT DATE_FORMAT(receipt_date, \u0026#39;%Y%m\u0026#39;) AS sales_month, id, SUM(amount), SUM(amount * price) FROM orders ORDER BY sales_month, id; SELECT * FROM sales_report; VIEW の変更 # CREATE OR REPLACE VIEW sample_view AS select_statement; or\nALTER VIEW view_name AS select_statement or\nALTER VIEW view_name (sample_column_1, sample_column_2) AS select_statement VIEWのCREATE文の確認 # SHOW CREATE VIEW sample_view; VIEW を削除 # DROP VIEW sample_view; or\nDROP VIEW IF EXISTS sample_view; 削除前後の確認\nSHOW TABLES; VIEWの一括DROP文 # SELECT CONCAT(\u0026#39;DROP VIEW \u0026#39;, table_name, \u0026#39;;\u0026#39;) AS view_drop_sql FROM information_schema.tables WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) AND table_type = \u0026#39;VIEW\u0026#39; ORDER BY table_schema, table_name; VIEWの一覧を作成するCREATE文の一覧 # SELECT CONCAT(TABLE_SCHEMA, \u0026#39;.\u0026#39;, TABLE_NAME) AS target_view, CONCAT( \u0026#39;CREATE ALGORITHM=UNDEFINED DEFINER=`\u0026#39;, DEFINER, \u0026#39;` SQL SECURITY \u0026#39;, SECURITY_TYPE, \u0026#39; VIEW `\u0026#39;, TABLE_NAME, \u0026#39;` AS \u0026#39;, VIEW_DEFINITION, \u0026#39;;\u0026#39; ) AS create_view FROM information_schema.views; その他 # SQLの実行計画 # EXPLAIN SELECT * FROM sample_table WHERE sample_flag = 1; 一時的なテーブルの作成 # CREATE TEMPORARY TABLE new_table SELECT * FROM original_table データベースへのコネクション数 # threads へのアクセスには相互排他ロックは必要なく、サーバーパフォーマンスへの影響は最小です。INFORMATION_SCHEMA.PROCESSLIST と SHOW PROCESSLIST では相互排他ロックが必要になるため、パフォーマンスの低下につながります。 https://dev.mysql.com/doc/refman/5.6/ja/performance-schema-threads-table.html SELECT processlist_host, COUNT(*) AS connection_count FROM performance_schema.threads WHERE TYPE = \u0026#39;FOREGROUND\u0026#39; GROUP BY processlist_host ORDER BY processlist_host; プロセスを終了(KILL) # プロセスIDを確認\nSHOW PROCESSLIST; +----+-------------+----------------+-----------+---------+------+----------+------------------+ | Id | User | Host | db | Command | Time | State | Info | +----+-------------+----------------+-----------+---------+------+----------+------------------+ | 8 | sample_user | localhost:XXXX | sample_db | Sleep | 40 | | NULL | | 10 | sample_user | localhost:XXXX | sample_db | Query | 0 | starting | SHOW PROCESSLIST | +----+-------------+----------------+-----------+---------+------+----------+------------------+ 1 row in set (0.01 sec) MySQL のKILLコマンドでは1つのプロセスIDのみ指定可(複数IDの同時指定は不可)\nKILL 8 特定の時間を経過しているプロセスを確認 # 60秒以上経過しているプロセス(処理)を確認\nSELECT * FROM information_schema.processlist WHERE time \u0026gt; 59; 複数のプロセスを終了(KILL) # SELECT GROUP_CONCAT(id) AS id_list FROM information_schema.processlist WHERE time \u0026gt; 59; -- 10,11,12 mysqladmin コマンドの引数で kill (終了) を実行する場合は複数IDの同時指定可(カンマ区切り)\nmysqladminn kill 10,11,12 -h localhost -u sample_user テーブルのロック状態 # ストレージエンジンがInnoDBの場合\nSELECT * FROM information_schema.innodb_locks; トランザクション # BEGIN; UPDATE sample_table SET email = \u0026#39;sample1@email.com\u0026#39; WHERE id = 1; UPDATE sample_table SET email = \u0026#39;sample1@email.com\u0026#39; WHERE id = 2; -- 失敗した場合は ROLLBACK; COMMIT; or\nSTART TRANSACTION; UPDATE sample_table SET email = \u0026#39;sample1@email.com\u0026#39; WHERE id = 1; UPDATE sample_table SET email = \u0026#39;sample1@email.com\u0026#39; WHERE id = 2; -- 失敗した場合は ROLLBACK; COMMIT; AUTO_INCREMENT（自動採番） # AUTO_INCREMENT（自動採番）の値を確認 # SELECT table_schema as database_name, table_name, auto_increment FROM information_schema.tables ORDER BY table_schema, table_name; SHOW TABLE STATUS WHERE name = \u0026#39;sample_table\u0026#39;; SHOW TABLE STATUS LIKE \u0026#39;sample_table_prefix%\u0026#39;; AUTO_INCREMENT（自動採番）の値を変更 # ALTER TABLE sample_table AUTO_INCREMENT = 1000; 設定 # トランザクションのタイムアウト # SHOW GLOBAL VARIABLES LIKE \u0026#39;%lock_wait_time_out\u0026#39; +----------------------+--------+ | Variable_name | Value | +----------------------+--------+ | lock_wait_timeout_ms | 300000 | +----------------------+--------+ 1 row in set (0.01 sec) 暗号化 # MySQL Reference Manual - Encryption and Compression Functions\nSET block_encryption_mode = \u0026#39;aes-256-cbc\u0026#39;; SET @key_str = SHA2(\u0026#39;My secret passphrase\u0026#39;,512); SET @init_vector = RANDOM_BYTES(16); SET @crypt_str = AES_ENCRYPT(\u0026#39;text\u0026#39;,@key_str,@init_vector); SELECT AES_DECRYPT(@crypt_str,@key_str,@init_vector); +-----------------------------------------------+ | AES_DECRYPT(@crypt_str,@key_str,@init_vector) | +-----------------------------------------------+ | text | +-----------------------------------------------+ References # https://qiita.com/devopsCoordinator/items/9b70e506150888e190be https://qiita.com/CyberMergina/items/f889519e6be19c46f5f4 https://qiita.com/Tocyuki/items/cb613c51a0e9c6e4f23c https://qiita.com/marnie_ms4/items/576055abc355184c51a1 https://qiita.com/fururun02/items/148a1eee68a1fb978f06 https://qiita.com/dodonki1223/items/776a3520e45626773c60 https://dev.mysql.com/doc/refman/8.0/ja/select.html "},{"id":22,"href":"/postgresql/basic/","title":"PostgreSQL Basic","section":"PostgreSQL","content":" PostgreSQL Basic # psql command # Usage # psql [OPTION]... [DBNAME [USERNAME]] Access DB\n$ psql --host=sample_hostname --port=sample_portnumber --username=sampleuser sample_db or $ psql -h sample_hostname -p sample_portnumber -U sampleuser sample_db Run SQL file\n$ psql --file=/path/to/sample.sql or $ psql -f /path/to/sample.sql Check Version\n$ psql --version or $ psql -V Options # option option description -h --host=HOSTNAME database server host or socket directory (default: \u0026ldquo;local socket\u0026rdquo;) -p --port=PORT database server port (default: \u0026ldquo;5432\u0026rdquo;) -U --username=USERNAME database user name (default: \u0026ldquo;root\u0026rdquo;) -w --no-password never prompt for password -W --password force password prompt (should happen automatically) -c --command=COMMAND run only single command (SQL or internal) and exit -d --dbname=DBNAME database name to connect to (default: \u0026ldquo;root\u0026rdquo;) -f --file=FILENAME execute commands from file, then exit -l --list list available databases, then exit -v --set=, --variable=NAME=VALUE set psql variable NAME to VALUE\n(e.g., -v ON_ERROR_STOP=1)\n-V --version output version information, then exit -X --no-psqlrc do not read startup file (~/.psqlrc) -1 (\u0026ldquo;one\u0026rdquo;) --single-transaction execute as a single transaction (if non-interactive) -? --help[=options] show this help, then exit - --help=commands list backslash commands, then exit - --help=variables list special variables, then exit Commands using \\(backslash) # Command Description Remarks \\? Help - \\l Show DBs - \\c sample_db Switch DB - \\d, \\dt, \\d+, \\dt+ Show tables - \\d sample_tbl Describe table definition - \\d sample_tbl Show indexs - \\x Swich display mode \\x\nSELECT * FROM sample_tbl; \\i sample.sql Run SQL file - \\time on Measure SQL time - \\o sample.log Begin log output - \\o End log output - \\conninfo Check server info - \\q Quit PostgreSQL\u0026rsquo;s Info # Default Connection Info # Set values of connection info as an environment variable. Can also set the password on ~/.pgpass export PGDATABASE=sample_db export PGHOST=sample_host export PGPORT=XXXX export PGUSER=sampleuser export PGPASSWORD=samplepassword Table List # SELECT table_catalog, table_schema, table_name, table_type FROM information_schema.tables; Column List # SELECT col.table_name, col.ordinal_position, -- No. col.column_name, col.data_type, col.character_maximum_length, -- 文字数(文字列型) col.character_octet_length, -- バイト数(文字列型) col.numeric_precision, -- 桁数(数値型) col.numeric_scale, -- 小数部(数値型) col.datetime_precision, -- ミリ秒以下(日付型) col.interval_type, -- インターバルの単位(日付型) col.is_nullable, -- NULLを許可するか否か col.column_default -- 初期値 FROM information_schema.columns col WHERE col.table_name = \u0026#39;sample_table\u0026#39; -- 対象テーブル名を指定 ORDER BY col.table_name, col.ordinal_position Process List # SELECT * FROM pg_stat_activity; pg_dump command # Show info related CREATE TABLE, CREATE TRIGGER # $ pg_dump sample_db -U sampleuser -s -t sample_tbl Backup one DB # $ pg_dump -U sampleuser --format=plain --file=/path/to/sample.sql sample_db $ pg_dump -U sampleuser --format=plain sample_db \u0026gt; /path/to/sample.sql $ pg_dump -U sampleuser --format=tar --file=/path/to/sample.sql sample_db Restore # Can restore with psql command if the dump file is in plain text format. $ psql --file=/path/to/sample.sql pg_dumpall command # Backup all DBs # All dumps are in plain text format. Can NOT specify the format when using pg_dumpall. $ sudo -i -u sampleuser $ pg_dumpall --file all.sql or $ pg_dumpall \u0026gt; all.sql EXPLAIN (Execution Plan) # Add EXPLAIN before SQL EXPLAIN SELECT * FROM sample_tbl WHERE id = XXXXX; CREATE TABLE # Copy definitions \u0026amp; Create table # CREATE TABLE copy_tbl (LIKE org_tbl); Define id and timestamp # Use UUID as the primary key. Simple Version # CREATE TABLE sample_tbl ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP -- Update by program ); More Accurate Version # CREATE TABLE sample_tbl ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP ); CREATE TRIGGER refresh_users_updated_at_step1 BEFORE UPDATE ON users FOR EACH ROW EXECUTE PROCEDURE refresh_updated_at_step1(); CREATE TRIGGER refresh_users_updated_at_step2 BEFORE UPDATE OF updated_at ON users FOR EACH ROW EXECUTE PROCEDURE refresh_updated_at_step2(); CREATE TRIGGER refresh_users_updated_at_step3 BEFORE UPDATE ON users FOR EACH ROW EXECUTE PROCEDURE refresh_updated_at_step3(); CREATE FUNCTION refresh_updated_at_step1() RETURNS trigger AS $$ BEGIN IF NEW.updated_at = OLD.updated_at THEN NEW.updated_at := NULL; END IF; RETURN NEW; END; $$ LANGUAGE plpgsql; CREATE FUNCTION refresh_updated_at_step2() RETURNS trigger AS $$ BEGIN IF NEW.updated_at IS NULL THEN NEW.updated_at := OLD.updated_at; END IF; RETURN NEW; END; $$ LANGUAGE plpgsql; CREATE FUNCTION refresh_updated_at_step3() RETURNS trigger AS $$ BEGIN IF NEW.updated_at IS NULL THEN NEW.updated_at := CURRENT_TIMESTAMP; END IF; RETURN NEW; END; $$ LANGUAGE plpgsql; Timezone # Check current timezone # SHOW TIMEZONE; Check timezones that can be set # SELECT * FROM pg_timezone_names; Set new timezone # ALTER DATABASE exsampledb SET timezone TO \u0026#39;Asia/Tokyo\u0026#39;; Apply the change # SELECT pg_reload_conf(); Export # Export to CSV file # Use tab as a delimiter. DELIMITER ',' Enclose all fields in quote. FORCE QUOTE * Output field names as header. HEADER Change NULL to \u0026rsquo;\u0026rsquo; (empty string). NULL AS '' COPY sample_tbl FROM \u0026#39;/absolute/path/to/sample.tsv\u0026#39; WITH CSV DELIMITER \u0026#39;,\u0026#39; FORCE QUOTE * NULL AS \u0026#39;\u0026#39; HEADER; or\n$ psql sample_db -c \u0026#34;SELECT * FROM sample_tbl\u0026#34; -A -F, \u0026gt; sample.csv Export to TSV file # Use tab as a delimiter. DELIMITER E'\\t' Enclose all fields in quote. FORCE QUOTE * Output field names as header. HEADER Change NULL to \u0026rsquo;\u0026rsquo; (empty string). NULL AS '' COPY sample_tbl FROM \u0026#39;/absolute/path/to/sample.tsv\u0026#39; WITH CSV DELIMITER E\u0026#39;\\t\u0026#39; FORCE QUOTE * NULL AS \u0026#39;\u0026#39; HEADER; or\n$ psql sample_db -c \u0026#34;SELECT * FROM sample_tbl\u0026#34; -A -F $\u0026#39;\\t\u0026#39; \u0026gt; sample.tsv Import # Import from CSV file # COPY sample_tbl FROM \u0026#39;/absolute/path/to/sample.tsv\u0026#39; WITH CSV DELIMITER \u0026#39;,\u0026#39;; Import from TSV file # COPY sample_tbl FROM \u0026#39;/absolute/path/to/sample.tsv\u0026#39; WITHC CSV DELIMITER E\u0026#39;\\t\u0026#39;; Trouble Shooting # How to change a port number of PostgreSQL on macOS # Change the port number of PostgreSQL.\n(Change the version number 13 to your PostgreSQL version in the following command.)\nsudo vi Library/PostgreSQL/13/data/postgresql.conf port = 5432 # (change requires restart) ↓ port = 5433 # (change requires restart) Restart PostgreSQL.\n(Change the version number 13 to your PostgreSQL version in the following command.)\n$ sudo launchctl stop com.edb.launchd.postgresql-13 $ sudo launchctl start com.edb.launchd.postgresql-13 References # PostgreSQL Documentation PostgreSQL Documentation(Japanese) PostgreSQL データ型 PostgreSQL: Documentation: 14: 28.2. The Statistics Collector Postgres と MySQL における id, created_at, updated_at に関するベストプラクティス MySQLとPostgreSQLコマンド比較表 PostgreSQL - タイムゾーンをDBに設定する TODO # PostgreSQL Isolation について 【PostgreSQL】 jsonb型カラムをSQLで検索・集計したい "},{"id":23,"href":"/todo/certification/","title":"Certification","section":"Todo","content":" Certification # edX LinuxFoundationX Introduction to Kubernetes Introduction to Cloud Infrastructure Technologies Introduction to Linux Stanford ONLINE Computer Science 101 IPA IT Passport 基本情報処理技術者試験 応用応報処理技術者試験 情報処理安全確保支援士 日商簿記 日商簿記3級 日商簿記2級 Google Google IT Support Professional Certificate Google IT Automation Professional Certificate Google UX Design Professional Certificate Google Data Analytics Professional Certificate Google Project Management Professional Certificate GCP Cloud Digital Leader Associate Cloud Engineer Professional Cloud Architect Professional Cloud Developer Professional Cloud DevOps Engineer AWS AWS Certified Cloud Practitioner AWS Certified SysOps Administrator - Associate AWS Certified Developer - Associate AWS Certified Solutions Architect – Associate AWS Certified Solutions Architect - Professional AWS Certified DevOps Engineer - Professional Azure Azure Fundamentals：AZ-900 Azure Administrator Associate：AZ-104 Azure Developer Associate：AZ-204 Azure Solutions Architect Expert：AZ-303 and AZ-304 Azure DevOps Engineer Expert：（AZ-104 or AZ-204）and AZ-400 Kubernetes Certified Kubernetes Administrator (CKA) Certified Kubernetes Application Developer (CKAD) Certified Kubernetes Security Specialist (CKS) LPIC LPIC Level-1 LPIC Level-2 LPIC Level-3 CCNA CCNA University UoPeople, BSCS Georgia Tech, MSCS MIT Sloan Fellows, MBA Udemy # Python 現役シリコンバレーエンジニアが教えるPython 3 入門 + 応用 +アメリカのシリコンバレー流コードスタイル プログラミング初心者でも安心、Python/Django入門講座 【中級者向け】Django3でショッピングアプリ開発 - ECサイト構築で行うPython・WEBアプリケーション開発 Python でわかる オブジェクト指向 とはなにか？ Book # PostgreSQL SQL実践入門 ──高速でわかりやすいクエリの書き方 内部構造から学ぶPostgreSQL 設計・運用計画の鉄則 "},{"id":24,"href":"/cron/check-list/","title":"Cron Check List","section":"Cron","content":" Crontab # 変数の設定 # シェルの種類が記載されていること\ncrontab 実行時のシェルの種類の初期値は /bin/sh e.g. SHELL=/bin/bash エラー発生時のメール送信宛先 MAILTO=foo@bar.com が設定されていること コマンド実行時に必要な変数は key=value フォーマットで上部にまとめて設定されていること 各変数の使用用途と設定値のサンプルがコメントに記載されていること 日時の設定 # 分 時 日 月 曜日 のフォーマットで設定されていること 存在する日時/曜日が設定されていること 日 と 曜日 は同時に設定しないこと\n同時に設定されている場合 AND 条件ではなく OR 条件で実行されるため コマンドの設定 # 実行コマンド内の % が \\（バックスラッシュ）でエスケープされていること\nコマンド内にエスケープされていない ％ がある場合、％ が改行文字に置換されそれ以降のコマンドが標準入力として渡されるため ファイルを指定する場合は絶対パスを使用すること\ncrontab のコマンド実行時のカレントディレクトリは　ユーザー　のホームディレクトリとなるため /usr/bin、/bin 以外の箇所にあるコマンドを実行したい場合は絶対パスを使用すること crontab 実行時のPATH環境変数は /usr/bin:/bin しか指定されていないため ログが /dev/null に捨てられず、書き込み可能な箇所に出力されていること 実行ログを破棄してしまうと障害発生時の調査が難しくなるため Docker 関連の設定 # dockerコンテナを利用したコマンドを実行する際は、rootユーザー権限で実行しないこと dockerコンテナを利用したコマンドを実行する際は、実行対象のコンテナを特定すること "},{"id":25,"href":"/linux/command/","title":"Linux Command","section":"Linux","content":" Linux Command # 画面の操作 # ターミナル操作のショートカット # Mac Windows description control + a ctrl + a カーソルを行頭へ移動 control + e ctrl + e カーソルを行末へ移動 control + f ctrl + f カーソルを前進(右へ移動) control + b ctrl + b カーソルを後退(左へ移動) control + d ctrl + d カーソル上の1文字削除 control + h ctrl + h カーソル後方(左)の1文字削除 control + u ctrl + u カーソルから行頭まで削除 control + k ctrl + k カーソルから行末まで削除 control + w ctrl + w カーソル上の単語1つ分削除 control + y ctrl + y 最後に削除した文字を貼り付け control + p ctrl + p 1つ前のコマンド履歴を表示 control + n ctrl + n 1つ後のコマンド履歴を表示 control + s ctrl + s 画面をロック control + q ctrl + q 画面のロックを解除 control + c ctrl + c 実行中のコマンドを強制終了 control + l(エル) ctrl + l(エル) 画面をクリア tab tab コマンド,ディレクトリ,ファイルの候補を補完 history: コマンド入力履歴を操作 # history コマンドの主なオプション # option description 整数値 履歴の末尾から指定した行数分を表示 -c 履歴一覧から全ての項目を削除 -d 番号 指定した番号の履歴項目を削除 -a 履歴ファイルに現在のセッションの履歴を追加 -n 履歴ファイルからまだ読み込まれていない行を全て読み込み -r 履歴ファイルを読み込み、内容を履歴一覧に追加 -w 現在の履歴を履歴ファイルに上書き コマンド入力履歴を表示 # 履歴を末尾から10件分表示\n$ history 10 コマンドライン上で !番号 と入力することで指定したコマンドを実行\ne.g. 履歴の末尾から5件目のコマンドを実行する場合\n!5 履歴の件数が多い場合 head コマンドで冒頭のみ表示\n$ history | head コマンド入力履歴を削除 # 指定した番号の履歴を削除\ne.g. 5番の履歴を削除\n$ history -d 5 全ての履歴を削除\n$ history -c 現在のコマンド入力履歴を履歴ファイルに上書き # e.g. 現在の履歴を sample.txt に上書き\n$ history -w sample.txt 履歴ファイルを読み込み # e.g. sample.txt の内容を履歴として読み込み\n$ history -r sample.txt grep/find: 検索 # grep コマンドの使用方法 # grep 検索したい文字列 検索したいテキストファイル 任意のコマンドの実行結果に対して検索\nコマンド | grep 検索したい文字列 複数のパターンを指定\ngrep -e 検索したい文字列1 -e 検索したい文字列2 検索したいテキストファイル 指定したディレクトリ配下を再帰的に検索, 検索結果に行番号を表示\ngrep -rn -e \u0026#39;pattern\u0026#39; /dir/ grep コマンドの主なオプション # option option description -e 'パターン' --regexp='パターン' パターンを指定して検索 -f --file=ファイル ファイルに記載したパターン(1行1パターン)を読み込み検索に使用 -i --ignore-case アルファベットの大文字と小文字を区別せず検索 -w --word-regexp 単語全体でパターンと一致するものを検索 -x --line-regexp 行全体がパターンと一致するものを検索 -G --basic-regexp 基本正規表現(BRE)を検索に使用 -E --extended-regexp 拡張正規表現(ERE)を検索に使用 -P --perl-regexp Perl互換正規表現(PCRE)を検索に使用 -v --invert-match パターンに一致しない行を表示 -s --no-messages エラーメッセージを非表示 -q --quiet --silent 結果を非表示(主にシェルスクリプトなどで判定用に使用 -L --files-without-match 一致するものが含まれていないファイルのファイル名のみ表示 -l --files-with-matches 一致するものが含まれているファイルのファイル名のみ表示 -c --count 一致するものが含まれている回数のみ表示 -m 回数 --max-count=回数 パターンが指定した回数に達したら処理を終了 -o --only-matching 一致した箇所だけを表示(通常は行単位で表示) -n --line-number 行番号を併せて表示(「行番号付きで表示」を参照) -b --byte-offset パターンが何文字目にあるかを併せて表示 -H --with-filename ファイル名を併せて表示 -h --no-filename ファイル名を表示しない(複数ファイル指定時) --color=WHEN 見つかったパターンを目立たせる(WHEN部分にはalways、never、autoを指定) -B 行数 --before-context=行数 一致した行の前の行も表示(「前後の行も表示」を参照) -A 行数 --after-context=行数 一致した行の後の行も表示(「前後の行も表示」を参照) -C 行数,-行数 --context=行数 一致した行の前後の行も表示 -r --recursive ディレクトリを指定した場合はサブディレクトリ内のファイルも含め検索 タイムスタンプで検索 # 現在〜2日前(48時間前) # find ./ -mtime -2 2日前(48時間前〜72時間前) # find ./ -mtime 2 2日前(72時間前)〜過去 # find ./ -mtime +1 e.g) 特定のディレクトリ内の30日以前のCSV拡張子のファイルを削除\nfind ./ -type f -name \u0026#39;*.csv\u0026#39; -mtime +30 | xargs rm -f find コマンドの主なオプション # option description -mmin ファイルのデータの最終更新日時（分指定） -mtime ファイルのデータの最終更新日時（日指定） -amin ファイルのデータの最終アクセス日時（分指定） -atime ファイルのデータの最終アクセス日時（日指定） -cmin ファイルのデータとステータスの最終更新日時（分指定） -ctime ファイルのデータとステータスの最終更新日時（日指定） -daystart 00:00am 基準 ls: ディレクトリやファイルの一覧を表示 # タイムスタンプ降順で一覧表示(隠しファイル含む) # ls -alt タイムスタンプ昇順で一覧表示(隠しファイル含む) # ls -altr ls コマンドの主なオプション # option description -a 先頭 . の隠しファイルも表示 -A 先頭 . の隠しファイル, 現在のディレクトリ ., 親ディレクトリ .. も表示 -l(エル) 詳細情報を表示 -t タイムタンプ降順で表示 -tr タイムタンプ昇順で表示 tree: ディレクトリやファイルの構成を表示 # tree コマンド のインストール (macOS) # $ brew install tree tree コマンドのバージョンを表示 # $ tree --version 階層を指定 # e.g. カレントディレクトリ配下の3階層まで表示する場合\n$ tree -L 3 ファイル名のパターンを指定 # $ tree -P \u0026#39;*.js\u0026#39; 除外するファイル名のパターンを指定 # $ tree -I \u0026#39;*.log\u0026#39; ディレクトリのみを表示 # $ tree -d Github と同じように構成を表示 # $ tree --gitignore --dirsfirst tree コマンドの主なオプション # option option description -a ドット始まりのディレクトリを含めて表示 -d ディレクトリのみ表示 -l シンボリックをたどって表示 -f カレントディレクトリまたは指定したディレクトリからのパスをつけてファイルやディレクトリを表示 -L 整数 表示するディレクトリの階層(深さ), 1以上の整数を指定 -N 印字できない文字をそのまま出力(マルチバイトの文字化け防止) -P パターン パターンにマッチしたファイルのみ表示 -l パターン パターンにマッチしないファイルのみ表示 --prune 表示対象ファイルが存在しないディレクトリを除外して表示 --filelimit エントリ数 指定した数を超えるエントリを持つディレクトリの内部は非表示(\u0026ndash;filelimit 10 の場合, 表示内容が10イないのディレクトリの内部のみを表示) -o ファイル名 treeコマンドの結果を指定ファイルに出力 touch: タイムスタンプを変更/ファイルを作成 # ファイルのタイムスタンプを変更 # e.g) ファイルのタイムスタンプ(最終更新日)を「2021-01-01 01:25:30」に変更\ntouch --date=\u0026#34;2021-01-01 01:25:30\u0026#34; sample.txt or\ntouch -t 202101012530.30 sample.txt 空ファイルを作成 # touch sample.txt short option long option description -t \u0026lt;time\u0026gt; - [[CC]YY]MMDDhhmm[.ss] 形式で日時を指定 -d -date=日付文字列 文字列で日時を指定 -r \u0026ndash;reference=ファイル名 指定したファイルと同じ日時を指定 mkdir: ディレクトリを作成 # 多階層のディレクトリを作成 # mkdir -p /dir/subdir/{subsubdir-1,subsubdir-2,subsubdir-3} dir └── subdir ├── subsubdir-1 ├── subsubdir-2 └── subsubdir-3 作成したディレクトリに作業場所を移動 # mkdir -p /dir/subdir/subsubdir/ \u0026amp;\u0026amp; cd $_ rm: ディレクトリやファイルを削除 # 1ファイルを削除 # $ rm sample.txt 複数ファイルを削除 # $ rm sample-1.txt sample-2.txt sample-3.txt カレントディレクトリの全ファイルを確認しながら削除 # $ rm -i * rm コマンドの主なオプション # option option description -f --force 削除前の確認なし(指定したファイルが存在しない場合もエラー表示なし) -i --interactive 削除前に確認 -v --verbose 経過を表示 -d --directory unlink でディレクトリを削除 -r,-R --recursive ディレクトリを再帰的に削除(ファイルを含む) --preserve-root / の削除なし (/ を特別なものとして扱う, デフォルト) --no-preserve-root / の削除あり (/ を特別なものとして扱わない) rmdir: 空ディレクトリを削除 # $ rmdir dir 多階層の空ディレクトリを削除\n$ rmdir -p dir1/dir2/dir3 rmdir コマンドの主なオプション # option option description --ignore-fail-on-non-empty 空ディレクトリでない場合のエラーのみ無視(エラーメッセージの表示なし) -p --parents 必要に応じて親ディレクトリも削除 -v --verbose 経過を表示 cp: コピー # ※ 基本的にファイルもディレクトリも操作は同じ\nファイルをコピー # cp -ip original.txt copy.txt ディレクトリごとファイルをコピー # cp -ipr original-dir copy-dir ファイルをコピーする際にバックアップを作成 # cp -b --suffix=_$(date +%Y%m%d%H%M%S) original.txt copy.txt cp コマンドの主なオプション # option option description -v --verbose 実行内容を表示 -i --interactive コピー元とコピー先が同名の場合, 上書きする前に確認 -b --backup=方法 コピー元とコピー先が同名の場合, 上書きされるファイル(コピー先)のバックアップを作成｜ -S --suffix=接尾語 バックアップ作成時の接尾語を指定 -u --update コピー元のファイルがコピー先ファイルより新しいか新規ファイルの場合だけコピー -r --recursive コピー元にディレクトリを指定した場合 再帰的にコピー -p --preserve コピー元のパーミッションと所有者とタイムスタンプを保持（\u0026ndash;preserve=mode,ownership,timestampsと同じ） -s --symbolic-link シンボリック・リンクを作成 ネットワーク上のホスト間のSSHを利用したコピー # scp [option] [転送元ユーザー名@][転送元ホスト名:]転送元ファイルパス 転送先ユーザー名@転送先ホスト名:転送先パス scp コマンドの主なオプション # option description -r 転送元のディレクトリ全体を再帰的にコピー -v 転送の進行情報を表すメーターやデバッグ・メッセージを表示 -q 転送の進行情報を表すメーターを非表示 -C 通信を圧縮 -p 転送元の最終更新日時・最終アクセス日時・パーミッションを転送先に保持 -P ポート番号 転送先のポート番号を指定 -i 秘密鍵ファイル 秘密鍵ファイルを指定 mv: 移動または名称を変更 # ※ 基本的にファイルもディレクトリも操作は同じ\n1つのファイルを移動 # e.g) ファイル sample.txt を ディレクトリ ./dir/ に移動\nmv sample.txt ./dir/ 複数のファイルを移動 # e.g) ファイル sample1.txt と sample2.txt を ディレクトリ ./dir/ に移動\nmv sample1.txt sample2.txt ./dir/ ファイルの名称を変更(リネーム) # ファイル before.txt を after.txt に変更\nmv before.txt after.txt mv コマンドの主なオプション # option option description -v --verbose 実行内容を表示 -i --interactive 移動元と移動先が同名の場合, 上書きする前に確認 -b --backup=方法 移動元と移動先が同名の場合, 上書きされるファイル(移動先)のバックアップを作成｜ -S --suffix=接尾語 バックアップ作成時の接尾語を指定 -n --noclobber 移動元と移動先が同名の場合, 上書きせず停止 -u --update 移動元のファイルが移動先ファイルより新しいか新規ファイルの場合のみ上書き ln: ディレクトリやファイルのリンクを作成 # ハードリンクとシンボリックリンク # シンボリックリンクでファイルの「別名」なら、ハードリンクはファイルの「本名」。 ハードリンクの場合、元ファイルもリンクもどちらも「本名」。両者は同等。 ディレクトリのシンボリックリンクを作成 # ln -s ディレクトリ名 リンク名 ファイルのシンボリックリンクを作成 # ln -s ファイル名 リンク名 指定したディレクトリ内にシンボリックリンクを作成 # ln -s ファイル1 ファイル2・・・ ディレクトリ名 ディレクトリのハードリンクを作成 # ln ディレクトリ名 リンク名 ファイルのハードリンクを作成 # ln ファイル名 リンク名 ln コマンドの主なオプション # option option description -s --symbolic ハードリンクの代わりにシンボリックリンクを作成 -d,-F --directory ディレクトリのハードリンクを作成(スーパーユーザーのみ) -f --force リンクファイルと同名のファイルがある場合も強制的に上書き -i --interactive 上書きする場合に確認 -n --no-dereference リンク作成場所として指定したディレクトリがシンボリックリンクだった場合、参照先にリンクを作成するのではなく、シンボリックリンクそのものを置き換え(-fと組み合わせて使用) -L --logical 対象がシンボリックリンクの場合リンクを巡る -P --physical シンボリック自体のハードリンクを作成 -r --relative 相対パスのシンボリックリンクを作成 -T --no-target-directory リンク先を常に通常ファイルとして扱う -t ディレクトリ名 --target-directory=ディレクトリ名 指定したディレクトリにリンクを作成 -b --backup=方法 上書きされるバックアップを作成。numbered または t の場合は番号の添字。simple または never の場合はファイルの末尾に ~ または -S オプションか環境変数で指定した文字をつけるシンプルなバックアップ(-b と同じ)。existing または nil の場合はすでにあるファイルに従う(ない場合は simple と同じ) -S 接尾辞 --suffix=接尾辞 バックアップファイル作成時にファイル末尾に付与する文字を指定(未指定の場合は ~ または環境変数 SIMPLE_BACKUP_SUFFIX) -v --verbose 経過を表示 cat: ファイル内容を表示 # cat コマンドとは # ファイルを連結するためのコマンドだが、ファイルの内容を簡単に表示する際に使用されている。 cat = conCATenate (つなぐ, 連結する)\nファイルの内容を行番号付きで表示 # $ cat -n sample.txt 複数のファイルを連結して 1つのファイルに出力 # $ cat before1.txt before2.txt \u0026gt; after.txt cat コマンドの主なオプション # option option description -n --number 行番号を付与 -b --number-nonblank 行番号を付与(空白行以外) -s -squeeze-blank 連続した空行を1行として表示 -v --show-nonprinting タブ, 改行, 改ページ以外の非表示文字を表示 -t 非表示文字を表示(タブを ^|, 用紙送りを ^L として表示 -E --show-ends 行の最後に $ を表示 -A --show-all 全ての非表示文字を表示(-vET と同じ) -e タブを除く全ての非表示文字を表示(-vE と同じ) less: ファイル内容を表示 # ファイル内容を1画面に表示(編集なし) # less sample.txt 行番号も表示\nless -N sample.txt ファイル内容表示時のショートカット # less コマンド\ncommand description d 半画面前進(下へ移動) u 半画面後退(上へ移動) g 先頭行へ移動 G 最終行へ移動 v vi コマンドで編集 q 終了 / 前方(下方向)へ検索 (n 下方向, N 上方向) ? 後方(上方向)へ検索 (n 下方向, N 上方向) vim: ファイル内容を編集 # ファイルの作成と編集 vi sample.txt\n入力モードへの切り替え # command description i 現在のカーソル位置に入力 A 現在のカーソル位置の行末に入力 O 1つ上の行に文字を入力 o 1つ下の行に文字を入力 入力モードからコマンドモードへの切り替え # command description esc 入力モードからコマンドモードへ切り替え コマンドモードの操作 # command description x 1文字削除 dd 1行削除 d100d 100行削除 y 行コピー y100y 100行コピー p コピーした行の貼り付け G 最終行へ移動 100G 100行目へ移動 / 前方(下方向)へ検索 ? 後方(上方向)へ検索 :q! ファイルを保存せずに終了(閉じる) :wq ファイルを保存して終了(閉じる) :w ファイルを保存のみ(viは終了しない状態) vim/find/sed: 文字の置換 # ファイル内で置換 # :s command: \u0026lsquo;substitute\u0026rsquo; g option: \u0026lsquo;global\u0026rsquo; e.g. Change each \u0026lsquo;foo\u0026rsquo; to \u0026lsquo;bar\u0026rsquo; in the current line.\n:s/foo/bar/g e.g. Change each \u0026lsquo;foo\u0026rsquo; to \u0026lsquo;bar\u0026rsquo; in all lines.\n:%s/foo/bar/g e.g. Delete each \u0026lsquo;foo\u0026rsquo; in all lines.\n:%s/foo//g 再帰的に走査し対象ファイル内で一括置換 # e.g. 拡張子が .txt のファイル内の文字列 \u0026lsquo;foo\u0026rsquo; を \u0026lsquo;bar\u0026rsquo; に置換\nLC_ALL=C find . -type f -name \u0026#39;*.txt\u0026#39; -exec sed -i \u0026#39;\u0026#39; s/foo/bar/g {} + vim: 文字コードを操作 # 文字コードの値 # 文字コード コマンドで指定する値 remarks Shift_JIS cp932 or sjis cp932 には sjis に含まれていない文字（①, ②, Ⅰ, Ⅱ, ㍉, ㌍, 彅, 髙 etc.）を含む。 EUC-JP euc-jp - UTF-8 utf-8 - 文字コードを設定 # .vimrc 以下を記述し :wq で保存。\n:set encoding=utf-8 :set fileencodings=utf-8,cp932,sjis,euc-jp long short description encoding enc vim の内部で使用されるエンコーディングを指定。 fileencoding fenc 編集時のバッファファイルのエンコーディングを指定。encodingと異なる値が設定されていた場合、ファイルの読み書き時に文字コードを変換。fenc が空の場合、変換なし。 fileencodings fencs 既存ファイル編集時の変換予定の文字コードを指定。カンマ区切りで複数記述可。 vim 内部で使用される文字コードを表示 # :set encoding? or\n:se enc? ファイルの文字コードを表示 # :set fileencoding? or\n:se fenc? ファイルの文字コードの自動判別設定を表示 # :set fileencodings? or\n:se fencs? 指定の文字コードでファイルを開き直し # :edit ++encoding=コマンドで指定する文字コードの値 or\n:e ++enc=コマンドで指定する文字コードの値 ファイルの文字コードを変換 # 以下を実行後に :w で保存すること。\n:set fileencoding=コマンドで指定する文字コードの値 or\n:set fenc=コマンドで指定する文字コードの値 ファイルの文字コードを変換し保存 # :setlocal fileencoding=コマンドで指定する文字コードの値 or\n:setl fenc=コマンドで指定する文字コードの値 vim: 改行コードを操作 # 改行コードの設定 # .vimrc 以下を記述し :wq で保存。\n:set fileformats=unix,dos,mac 改行コードの値 # 改行コード コマンドで指定する値 remarks LF(Line Feed) \\n unix Unix, Linux, Mac(OS10以降), Android CR(Carriage Return) \\r mac 古いMac(OS9以前) CRLF(Carriage Return/Line Feed) \\r\\n dos Windows 改行コードを指定 # 以下を実行後に :w で保存すること。\n:set fileformat=コマンドで指定する改行コードの値 or\n:se ff=コマンドで指定する改行コードの値 改行コードを指定し保存 # :setlocal fileformat=コマンドで指定する改行コードの値 or\n:setl ff=コマンドで指定する改行コードの値 wc/grep: ファイルの行数・単語数を表示 # ファイルの行数 # ファイルの行数を表示 # wc -l sample.txt ファイルの単語数を表示 # wc -w sample.txt ファイルのバイト数を表示 # wc -c sample.txt ファイルの空行の行数を表示 # grep -c \u0026#39;^$\u0026#39; sample.txt 指定した文字と一致しない行数を表示 # grep -c -v \u0026#39;hoge\u0026#39; sample.txt 正規表現と一致する行数を表示 # e.g.) 半角数字10桁のみの行数\ngrep -c -E \u0026#39;^[0-9]{10}$\u0026#39; sample.txt uniq: ファイル内容の重複を確認 # 重複行は1行目のみを表示 # uniq sample.txt 重複する行のみ出力 # uniq -d sample.txt sort: 並べ替え # テキストファイルを行単位で並べ替えるコマンド\nsort コマンドの主なオプション # 並べ替え関連 # option option description -f --ignore-case 大文字／小文字を区別せずに並べ替え -V --version-sort 自然な（バージョン）数字順で並べ替え -n --numeric-sort 文字列を数値と見なして並べ替え -h --human-numeric-sort 人が読むことのできる形式の数値で並べ替え(e.g. 5K, 1.2G etc.) -g --general-numeric-sort 一般的な数値として並べ替え -M --month-sort 月名で並べ替え -d --dictionary-order データが空白と英数字のみ含まれていると仮定して並べ替え -b --ignore-leading-blanks 先頭の空白を無視して並べ替え -i --ignore-nonprinting 表示可能な文字だけを対象に並べ替え -R --random-sort キーのランダムハッシュ順に並べ替え --random-source=ファイル ランダムソースのファイルを設定 --sort=指定 並べ替えの方法を指定 (general-numeric、human-numeric、month、numeric、random、version) -r --reverse 逆順で並べ替え -k 指定 --key=指定 所と並べ替え種別を指定する (-k 5なら5列目、-k 5n なら5列目を数値として並べ替え。複数指定する場合は -k オプションを複数回指定) -t 文字 --field-separator=文字 フィールドの区切り文字を指定（デフォルトは空白文字） その他 # option option description -m --merge 並べ替えられたファイルをマージ (並べ替え自体は行わない) -c --check, --check=diagnose-first 並べ替えられているかどうかを確認 -C --check=quiet, --check=silent -c と同様だがメッセージは出力しない（スクリプト内の判定行などで使用） -u --unique 同一行は1つ目だけを出力（-c と併せて使用した場合、厳密に順序を確認） -z --zero-terminated 最後に NULL 文字を出力 -o ファイル名 --output=ファイル名 結果を出力するファイル名を指定（デフォルトは標準出力） --files0-from=F NULL文字で区切られたファイル名のリストを指定（--files0-from=- とした場合、ファイル名を標準入力から読み込み --debug 並べ替えに使用されている行の一部に注釈を付けて、不確かな使用方法について標準エラー出力に警告を表示 指定した列で並べ替え # 区切り文字を , として 5列目の項目で並べ替え\nsort -k 5 -t , sample.csv 区切り文字を , として 5列目の項目を数字として並べ替え\nsort -k 5n -t , sample.csv ファイル内容の並べ替え # 並べ替えた結果を表示 # sort sample.txt 並べ替え重複行は1行目のみを表示 # sort -u sample.txt sort --unique sample.txt 並べられているか確認 # sort -c sort --check zip/tar: 圧縮・解凍・暗号解除 # zip コマンドでの圧縮 # zip圧縮後に元ファイルを削除\nzip -rm after.zip before.file パスワード付き zip ファイルの作成\nzip -e -r after.zip before/ zip コマンドでの展開 # $ unzip sample.zip zip ファイルの暗号解除 # $ zipcloak -d sample.zip encrypted_data.zip の暗号を解除し decrypted_data.zip に保存\n$ zipcloak -d -O decrypted_data.zip encrypted_data.zip zipcloak コマンドの主なオプション # option option description -d --decrypt 暗号を解除 (間違ったパスワードを入力した場合、zip ファイルを元のまま上書き。 -O ZIPファイル名 --output-file ZIPファイル名 暗号を解除したZIPファイルの保存先を指定。 (元のZIPファイルはそのまま残る。) -b パス --temp-path 一時作業用のディレクトリを指定。 -q --quiet 動作中のメッセージを非表示。 tarコマンドでの圧縮 # tar コマンドでファイルのアーカイブを作成し gzip 形式に圧縮\n$ tar -czvf after.tar.gz before.txt カレントディレクトリの全ファイルをまとめたアーカイブを作成し gzip 形式に圧縮\n$ tar -czvf after.tar.gz * tar コマンドでの展開(解凍) # gzip 形式で圧縮されたアーカイブを tar コマンドで展開\n$ tar -xzvf sample.tar.gz tar コマンドの主なオプション # option option description -c --create 新しいアーカイブを作成 -r --append アーカイブの最後にファイルを追加 -A --catenate, --concatenate アーカイブに tarアーカイブを追加 -u --update アーカイブのファイルを更新 (アーカイブ内の同名ファイルより新しいものだけを追加) -d --diff, --compare アーカイブとファイルシステムを比較 --delete アーカイブから削除 -t --list アーカイブの内容の一覧を表示 -x --extract, --get アーカイブからファイルを抽出 tar コマンドの共通のオプション # option option description -z --gzip アーカイブを gzip 形式で圧縮。gzip 形式で圧縮されたアーカイブを展開。拡張子は .tar.gz または .tgz。 -j --bzip2 アーカイブを bzip2 形式で圧縮。bzip2 形式で圧縮されたアーカイブを展開。拡張子は .tar.bz2。 -Z --compress, --uncompress アーカイブを compress 形式で圧縮。compress 形式で圧縮されたアーカイブを展開。拡張子は .tar.Z。 -W --verify アーカイブを書き出した後に検証。 -v --verbose 処理したファイルを詳しく出力。 date: 日付・時刻を表示 # TOMORROW=`date \u0026#39;+%Y%m%d\u0026#39; --date \u0026#39;1 day\u0026#39;` YESTERDAY=`date \u0026#39;+%Y%m%d\u0026#39; --date \u0026#39;-1 day\u0026#39;` echo ${TOMORROW} echo ${YESTERDAY} date コマンドの主なオプション # format description %H 時 (00～23) %I 時 (01～12) %k 時 ( 0～23) %l 時 ( 1～12) %M 分 (00～59) %p AM あるいは PM のロケール(国や地域に合わせた文字列) %r 12時間形式の時刻 (HH:mm:ss [AP]M) %s 1970-01-01 00:00:00 UTC からの秒数 %S 秒 (00～61) %T 24時間形式の時刻 (HH:mm:ss) %a ロケールによる省略形の曜日の名前 (Sun～Sat) %A ロケールによる完全に表記した曜日の名前(Sunday～Saturday) %b ロケールによる省略形の月の名前 (Jan～Dec) %B ロケールによる完全に表記した月の名前(January～December) %c ロケールによる日付と時刻 (Sat Nov 04 12:02:33 EST 1989) %d 日(月内通算日数) (01～31) %D 日付 (MM/DD/YY) %j 年内通算日数 (001～366) %m 月 (01～12) %w 週のうちの曜日(0～6)で0が日曜日に対応 %x ロケールによる日付の表現 (MM/DD/YY) %y 西暦の下2けた (00～99) %Y 年 (1970～) タイムゾーンを表示 # $ date +%Z JST $ date +\u0026#34;%Z %z\u0026#34; JST +0900 df: ディスク容量を表示 # df コマンドとは # ディスクの空き領域(free スペース)のサイズを集計して表示 df コマンドの主なオプション # option option description -h --human-readable サイズに応じて人間が読みやすい単位に変換して表示 -H --si イズに応じて人間が読みやすい単位に変換して表示、ただし 1024単位ではなく 1000単位の値を使用 -Bサイズ --block-size=サイズ 指定したサイズの倍数で表示、サイズは数値または単位で指定 -k `\u0026ndash;block-size=1K``` と同じ -m `\u0026ndash;block-size=1M``` と同じ -P --portability POSIX出力形式（サイズではなくブロックで表示） -i --inodes ブロック使用量の代わりにiノード情報を確認 -T --print-type 各ファイルシステムの種類を合わせて表示 -t種類 --type=種類 対象とするフォーマットの種類を指定(e.g.「-txfs」でXFSフォーマットの場所のみ表示) -x種類 --exclude-type=種類 対象としないフォーマットの種類を指定 -a --all ダミーファイルシステムを含めて表示 -l --local ローカルファイルシステムのみを表示 --total 全体の合計も表示 --sync 使用量の情報を得る前にsyncを実行 --no-sync 使用量の情報を得る前にsyncの実行なし（デフォルト） ディスクの空き容量を表示 # df メガ(1024×1024バイト)単位で表示\ndf -BM メガ(1000×1000バイト)単位で表示\ndf -BMB フォーマットの種類も合わせて表示\ndf -T XFSでフォーマットされているパーティションの空き領域と合計を表示\ndf -txfs --total ディスクの空き容量を表示(場所を指定して集計) # カレントディレクトリを含むパーティションの空き領域を表示\ndf . /usr を含むパーティションの空き領域を表示\ndf /usr ディスクの空き容量を読みやすいサイズ表記で表示 # df -h 空き領域の合計もあわせて表示\ndf -h --total du: ディスク使用量を表示 # du コマンドとは # ディスク使用量を集計し表示 アクセス権限のないファイルやディレクトリは集計対象外 du コマンドの主なオプション # 集計 # option option description -S --separate-dirs サブディレクトリのサイズを含めずに集計 -s --summarize 指定したディレクトリの合計のみ表示(サブディレクトリの行は非表示) -d 深さ --max-depth=深さ 集計するディレクトリの深さを指定 -P --no-dereference シンボリックをたどらずに集計(デフォルト) -L \u0026ndash;dereference` 全てのシンボリックをたどって集計 -D, -H \u0026ndash;dereference-args コマンドラインで指定されたシンボリックのみたどって集計 -x --one-file-system 異なるファイルシステム(パーティーション)にあるディレクトリをスキップして集計 -l --count-links ハードリンクがある場合、その個数分のサイズを数える --exclude=パターン パターンと一致するファイルを除外して集計 -X ファイル --exclude-from=ファイル ファイルに含まれるパターンに一致するファイルを除外して集計 --files0-from=ファイル ファイルに指定されたリスト(NULL区切り)を対象に集計、- を指定した場合は標準入力から読み込み 表示 # option option description -h --human-readable サイズに応じて人間が読みやすい単位に変換して表示 -H --si サイズに応じて人間が読みやすい単位に変換して表示、ただし 1024単位ではなく 1000単位の値を使用 -B サイズ --block-size=サイズ 指定したサイズの倍数で表示、サイズは数値または単位で指定 -k --block-size=1K と同じ -m --block-size=1M と同じ --apparent-size ディスク使用量ではなく実際のサイズを表示 -b `\u0026ndash;bytes 実際のサイズをバイト単位で表示（ --apparent-size または --block-size=1 に相当） -c --total 全体の合計も表示 -0 --null 改行ではなく NULL で区切って表示 --time 集計対象となったファイルの最終更新時間を対象ごとに表示 --time=表示 表示の値に指定した atime access use ctime status の時間を表示 --time-style=スタイル 時間の表示スタイルとして full-iso long-iso iso +FORMAT を指定、+FORMAT は date コマンドのフォーマット指定と共通 特定ディレクトリ配下でディスク使用量が大きい順に表示 # du -hs /path/to/target/directory/* | sort -hr | head -10 カレントディレクトリ直下のファイルやディレクトリのディスク使用量とその合計を表示 # $ du -cs * 集計するディレクトリの深さを指定 # e.g. ルートディレクトリとその直下のディスク容量を1階層まで表示\n(他のパーティーションにあるファイルは対象外)\n-x 1つのファイルシステムのみを集計\n$ du -d1 -x / env/locale: 環境変数を表示 # env コマンドとは # 環境変数を指定してコマンドを実行\nenv 環境変数名=値 コマンド e.g.\n環境変数を一覧表示\n$ env 環境変数を指定しないで実行\n$ date Mon Jan 10 10:30:00 JST 2022 一時的に特定の環境変数を設定して(上書きして)実行\n$ env LANG=ja_JP.UTF-8 date 2022年 1月10日 月曜日 10時30分10秒 JST 一時的に全ての環境変数を未設定の状態で実行\n$ env -i date env コマンドの主なオプション # option option description -i, - --ignore-environment 一時的に「全ての環境変数が未設定の状態」でコマンドを実行 -u 環境変数名 --unset=環境変数名 一時的に「指定した環境変数が未設定の状態」でコマンドを実行 0 --null 改行せずに表示（出力行の末尾を改行文字ではなくNULL文字にする、一覧表示する際のみ指定可能） 指定可能なロケールを表示 # $ locale -a システム情報/バージョンを表示 # システム情報を表示 # uname -a カーネルのバージョン情報を表示 # cat /proc/version OSのバージョン情報を表示 # cat /etc/os-release OSのバージョン情報を表示(ディストリビューション別) # ※RHEL=Red Hat Enterprise Linux\ncommand RHEL※ CentOS Fedora Amazon Linux Oracle Linux Debian Ubuntu SUSE Linux cat /etc/system-release Yes Yes Yes Yes Yes cat /etc/redhat-release Yes Yes Yes Yes cat /etc/centos-release Yes cat /etc/fedora-release Yes cat /etc/oracle-release Yes cat /etc/debian_version Yes Yes cat /etc/lsb-release Yes cat /etc/SuSE-release Yes OSのバージョン情報確認コマンドを表示 # ls -l /etc/*release その他 # ログイン中のユーザーを表示 # LOGIN_USER=`who am i | awk -F \u0026#39; \u0026#39; \u0026#39;{print $1}\u0026#39;` echo $LOGIN_USER CSVの全行のカラム数の一致を確認 # e.g. カラム数が 10 と一致しない行の数を確認\ncat sample.csv | awk -F \u0026#39;,\u0026#39; \u0026#39;{print NF}\u0026#39; | grep -c -v 10 CSVの特定のカラムのみを抽出 # e.g. 10カラム目のみ抽出\ncut -d \u0026#39;,\u0026#39; -f 10 sample.csv \u0026gt; specific_column.csv References # Linux基本コマンドTips インフラエンジニアとしてよく使うコマンド集 インフラエンジニアじゃなくても押さえておきたいSSHの基礎知識 viの文字コードについて vimによる日本語文字コード自動判別と文字コード変換 grepでこういう時はどうする? Man page of GREP gzip ファイルを操作 【 env 】コマンド――環境変数を指定してコマンドを実行する 【 tree 】コマンド――ディレクトリをツリー状に表示する "},{"id":26,"href":"/php/command-line/","title":"PHP Command Line Option","section":"PHP","content":" PHP Command Line Option # option description -a --interactive 対話モードで実行 -h, -? --help,--usage コマンドラインオプションと1行の説明文を表示 -i --info phpinfo() をコールした結果を表示 -l --syntax-check 構文チェックを実行 -m --modules ロードされたZendモジュールの一覧を表示 -r --run コマンドラインのみで実行 -S --server ビルトインウェブサーバを開始 -s --syntax-highlight,--syntax-highlighting ハイライト表示されたソースを表示 -t --docroot ビルトインウェブサーバのドキュメントルートを指定 -v --version バージョン情報を表示 -w --strip コメントと空白文字を削除してソースを表示, -r との同時の使用は不可 References # https://qiita.com/akiko-pusu/items/93dc4cf63d23a1bb9bdb https://www.php.net/manual/ja/features.commandline.options.php "},{"id":27,"href":"/container/","title":"Container","section":"Home","content":" Container # Docker Docker Compose Docker Swarm "},{"id":28,"href":"/php/cron-expression/","title":"PHP Cron Expression","section":"PHP","content":" PHP Cron Expression # Install # composer self-update --2 composer require dragonmantank/cron-expression composer update Example # \u0026lt;?php require_once \u0026#39;vendor/autoload.php\u0026#39;; $schedule = \u0026#39;10 2 * * *\u0026#39;; $cron = new Cron\\CronExpression($schedule); $dates = $cron-\u0026gt;getMultipleRunDates(3); foreach ($dates as $date) { echo $date-\u0026gt;format(\u0026#39;Y-m-d H:i:s\u0026#39;) . PHP_EOL; } "},{"id":29,"href":"/container/docker/","title":"Docker","section":"Container","content":" Docker # Dockerfile # command description FROM ビルドするイメージのベースイメージ RUN イメージをビルドする際、コンテナで実行するコマンドを定義 COPY ホスト側からコンテナ側にファイルやディレクトリをコピー ADD COPY の機能に加え、アーカー部の自動展開やURLを指定してファイルやディレクトリをコンテナに追加。OSのベースイメージ作成時のような特殊なケースで活用 CMD コンテナがフォアグラウンドで実行するコマンドを定義 ENTRYPOINT コンテナを実行可能ファイルとして使用する際に定義する際に定義するコマンド。CMD と ENTRYPOINT は併用可能 ARG docker image build 時に利用する変数 ENV コンテナ内の環境変数を定義 EXPOSE コンテナが公開するポート VOLUME ホストや他のコンテナからマウントできるポイントを作成 LABEL イメージに追加するメタデータ STOPSIGNAL コンテナに送られて終了するシステムコール信号を設定 HEALTHCHECK コンテナ内でコマンドを実行し、その結果をヘルスチェック(死活監視)として利用 USER コンテナ実行時のコンテナユーザー。イメージビルド時、USER 定義後の RUN もそのユーザーで実行される WORKDIR コンテナ内の作業ディレクトリ ONBUILD コンテナ内で実行するコマンドを定義するが、定義したイメージでは実行されない。ONBUILD を定義したベースイメージを利用するイメージのビルド時に実行される Image # Dockerfile から Docker イメージをビルド # $ docker image build [options] (Dockerfileを配置したディレクトリのパス|URL) Docker Hub にホストされている Docker イメージを検索 # $ docker search [options] 検索キーワード Inspection # Get instance\u0026rsquo;s information # $ docker inspect \u0026lt;CONTAINER ID|NAME\u0026gt; Get an instance’s IP address # $ docker inspect --format=\u0026#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\u0026#39; \u0026lt;CONTAINER ID|NAME\u0026gt; Get an instance’s MAC address # $ docker inspect --format=\u0026#39;{{range .NetworkSettings.Networks}}{{.MacAddress}}{{end}}\u0026#39; \u0026lt;CONTAINER ID|NAME\u0026gt; Get an instance’s log path # $ docker inspect --format=\u0026#39;{{.LogPath}}\u0026#39; \u0026lt;CONTAINER ID|NAME\u0026gt; Get an instance’s image name # $ docker inspect --format=\u0026#39;{{.Container.Spec.Image}}\u0026#39; \u0026lt;CONTAINER ID|NAME\u0026gt; List all port bindings # $ docker inspect --format=\u0026#39;{{range $p, $conf := .NetworkSettings.Ports}} {{$p}} -\u0026gt; {{(index $conf 0).HostPort}} {{end}}\u0026#39; \u0026lt;CONTAINER ID|NAME\u0026gt; Find a specific port mapping # $ docker inspect --format=\u0026#39;{{(index (index .NetworkSettings.Ports \u0026#34;8787/tcp\u0026#34;) 0).HostPort}}\u0026#39; \u0026lt;CONTAINER ID|NAME\u0026gt; Get a subsection in JSON format # $ docker inspect --format=\u0026#39;{{json .Config}}\u0026#39; \u0026lt;CONTAINER ID|NAME\u0026gt; | jq Get environmental variables # $ docker inspect --format=\u0026#39;{{range .Config.Env}}{{println .}}{{end}}\u0026#39; \u0026lt;CONTAINER ID|NAME\u0026gt; Get mount volumes # $ docker inspect --format=\u0026#39;{{json .Mounts}}\u0026#39; \u0026lt;CONTAINER ID|NAME\u0026gt; | jq Network # https://docs.docker.com/network/\nnone ネットワーク接続なし host ホストのネットワークを直接利用 bridge ホスト上に別のネットワークを構築して利用 overlay Swarmサービスが互いに通信できるよう、複数の Docker デーモンを一緒に接続 Swarmサービスとスタンドアロンコンテナ、または\n異なるDockerデーモン上の2つのスタンドアロンコンテナの通信を容易化 List networks\n$ docker network ls Create a network\n$ docker network create \u0026lt;NETWORK NAME\u0026gt; Connect a container to a network\n$ docker network connect \u0026lt;CONTAINER ID|NAME\u0026gt; Disconnect a container from a network\n$ docker network disconnect \u0026lt;CONTAINER ID|NAME\u0026gt; Display detailed information on one or more networks\n$ docker network inspect \u0026lt;NETWORK NAME\u0026gt; Remove all unused networks\n$ docker network prune \u0026lt;NETWORK NAME\u0026gt; Remove one or more networks\n$ docker network rm \u0026lt;NETWORK NAME\u0026gt; Stop # Stop all containers # docker container ps -q | xargs docker container stop or\ndocker stop $(docker ps -q) Remove # Remove stopped containers, untagged images, unused volumes, unused networks # docker system prune option description -a 未使用のイメージを含め削除 -f 確認せず削除 docker system prune -af Remove stopped containers # docker container prune Remove all containers # docker container ps -aq | xargs docker container rm -f or\ndocker ps -aq | xargs docker rm -f or\ndocker rm -f $(docker ps -aq) Remove all images (after all containers were removed) # docker images -aq | xargs docker image rm -f or\ndocker images -aq | xargs docker rmi -f or\ndocker rmi -f $(docker images -aq) Remove untagged images # docker images -fq \u0026#34;dangling=true\u0026#34; | xargs docker image rm Remove unused volumes # docker volume prune Remove unused networks # docker network prune Log # How to check log # 最新の30件を確認\ndocker logs -f --tail=30 Other # How to mount a directory in host server # docker run -v [absolute path in host]:[absolute path in container] [image name]:[tag] [command] References # https://docs.docker.com/engine/reference/commandline/inspect/ https://qiita.com/gold-kou/items/44860fbda1a34a001fc1 Dockerfileのベストプラクティス "},{"id":30,"href":"/container/docker-compose/","title":"Docker Compose","section":"Container","content":" Docker Compose # Basic operation # Run containers # カレントディレクトリの docker-compose.yml に記載したコンテナ群を起動 初回起動時にコンテナ群をつなぐユーザー定義・ブリッジ・ネットワークも自動生成 フォアグラウンドモードで起動する場合(ターミナルにコンテナログを出力) $ docker-compose up バックグラウンドモードで起動する場合 $ docker-compose up -d Stop containers # フォアグラウンドモードで起動した場合 ターミナルで Ctrl+C 押下 バックグラウンドモードで起動した場合 $ docker-compose stop Rebuild an image # $ docker-compose build Remove containers and networks # $ docker-compose down Stop and remove all (containers, images, volumes, networks) 滅びの呪文 # docker-compose down --rmi all --volumes --remove-orphans "},{"id":31,"href":"/container/docker-swarm/","title":"Docker Swarm","section":"Container","content":" Docker Swarm # Swarm クラスタを初期化 # docker swarm init [options] Swarm クラスタに node もしくは manager を追加 # docker swarm join [options] managerホスト:ポート Swarm クラスタから node もしくは manager を離脱 # docker swarm leave [options] Swarm クラスタに Stack をデプロイ # docker stack deploy [options] Stack名 Swarm クラスタにデプロイされている Stack 一覧を表示 # docker stack (ls|list) [options] Stack 内で実行されているタスクを表示 # docker stack ps [options] Stack名 Swarm クラスタからStackを削除 # docker stack (rm|remove|down) [options] Stack名... Stack 内のService一覧を表示 # docker stack services [options] Stack名 "},{"id":32,"href":"/tool/excel/","title":"Excel","section":"Tool","content":" Excel # 便利 # 重複 # 重複する値のチェック\n=IF(COUNTIF($A$1:$B$10,$A2)\u0026gt;=2,\u0026#34;Duplicate\u0026#34;,\u0026#34;-\u0026#34;) 重複なしカウント(セルの範囲内に空白がある場合エラーあり)\n=SUMPRODUCT(1/COUNTIF($A$1:$B$10,$A$1:$B$10)) 重複なしカウント(セルの範囲内に空白がある場合もエラーなし)\n=SUMPRODUCT(($A$1:$B$10\u0026lt;\u0026gt;\u0026#34;\u0026#34;)/COUNTIF($A$1:$B$10,$A$1:$B$10\u0026amp;\u0026#34;\u0026#34;)) 表示中のセルの合計(非表示のセルを除く) # 109 は固定値\n=SUBTOTAL(109,$A$1:$B$10) 検索 # VLOOKUP(検索値,範囲,列位置,FALSE) # e.g.) A1 の値が sample シートの範囲(A1:A10) にある場合 B 列の値を出力\n=VLOOKUP(A1,sample!$A$1:$B$10,2,FALSE) 特定の値があるか判定 # =IF(COUNTIF(A1:B10,\u0026#34;aaa\u0026#34;)\u0026gt;0,\u0026#34;Yes\u0026#34;,\u0026#34;No\u0026#34;) 日付・時刻 # 曜日 # e.g.) A1 の日時を日本語の曜日の短縮形で表示。\n=TEXT(A1,\u0026#34;aaa\u0026#34;) 第2引数 description aaaa 日本語の曜日 aaa 日本語の曜日の短縮形 dddd 英語の曜日 ddd 英語の曜日の曜日の短縮形 時間の差分 # 時間(差分が24時間未満の場合のみ) # =TEXT(B1-A1,\u0026#34;hh:mm:ss\u0026#34;) 日数 # =DATEDIF(A1,B1,\u0026#34;d\u0026#34;) 週数 # =DATEDIF(A1,B1,\u0026#34;d\u0026#34;)/7 月数 # =DATEDIF(A1,B1,\u0026#34;m\u0026#34;) 年数 # 年齢計算 etc.\n=DATEDIF(A1,B1,\u0026#34;y\u0026#34;) n年後, nヶ月後, n日後 # うるう年にも自動で対応\ne.g. 3年6ヶ月後\n=DATE(YEAR(A1)+3, MONTH(A1)+6, DAY(A1)) ハイパーリンク # シートへのリンク # B1 に記載されたシート内の A1 へ移動\n=HYPERLINK(\u0026#34;#\u0026#34;\u0026amp;B1\u0026amp;\u0026#34;!A1\u0026#34;,B1) Webへのリンク # =HYPERLINK(\u0026#34;https://sample.com/\u0026#34;,\u0026#34;Sample\u0026#34;) シート # シート名 # =RIGHT(CELL(\u0026#34;filename\u0026#34;,A1),LEN(CELL(\u0026#34;filename\u0026#34;,A1))-FIND(\u0026#34;]\u0026#34;,CELL(\u0026#34;filename\u0026#34;,A1))) シート名の一覧 # 1) VBA を使用\nAlt+ F11 で VBE 画面を表示 Alt を押下したまま I → M の順に押下し標準モジュールを挿入 白画面に以下を貼り付け Sub test() Dim i As Long For i = 1 To Sheets.Count Range(\u0026#34;A\u0026#34; \u0026amp; i).Value = Worksheets(i).Name Next i End Sub Alt+ F11 で通常画面を表示 シート名の一覧を作成したいシートでAlt+ FBから マクロ を表示させ test を実行 2) 4.0マクロ関数を使用\n上部メニューの 挿入 \u0026gt; 名前 \u0026gt; 定義 から名前欄に任意の名前（仮に「シート一覧」）を記載 参照範囲欄に以下を記載し OK押下 =MID(GET.WORKBOOK(1),FIND(\u0026#34;]\u0026#34;,GET.WORKBOOK(1))+1,31)\u0026amp;T(NOW()) シート名を出力したいセルに以下を記載し下へコピー =IF(COLUMNS(シート一覧)\u0026lt;ROW(A1),\u0026#34;\u0026#34;,INDEX(シート一覧,ROW(A1))) 隣接したセルの値に加算 # そのセルの1つ上のセルの数字に 1 を加算 # =MAX(INDIRECT(ADDRESS(1,COLUMN())\u0026amp;\u0026#34;:\u0026#34;\u0026amp;ADDRESS(ROW()-1,COLUMN())))+1 そのセルの左隣のセルの数字に 1 を加算 # $A$1 の箇所に「基準になる左端のセル」を指定\n=MAX(INDIRECT(ADDRESS(ROW(),$A$1)\u0026amp;\u0026#34;:\u0026#34;\u0026amp;ADDRESS(ROW(),COLUMN()-1)))+1 その他 # 数値を漢数字に変換 # =NUMBERSTRING(A2,1) 桁数に満たない場合 任意の文字で埋める # e.g.) 10桁ゼロ詰め\nA1 の値が 1234 の場合, 1234aaaaaa と出力\n=A1\u0026amp;LEFT(REPT(\u0026#34;a\u0026#34;,\u0026#34;10\u0026#34;), 10-LEN(A1)) 参照 # Excel 空白を含むセル範囲から重複を除いたデータ数をカウントする方法 "},{"id":33,"href":"/mysql/explain/","title":"MySQL EXPLAIN","section":"MySQL","content":" MySQL EXPLAIN # 前提 # MySQL 5.7（エネルギー開発部で現在メインで使用しているMySQLバージョン） Clustrix は挙動が異なる可能性があるため対象外。 SQLチューニングの手順 # スロークエリ（重いクエリ）を抽出。 スロークエリ・ログに記録。 スロークエリを集計。 実行計画（MySQLが内部的に立てる実行手順）=「MySQLの意思表示」を確認。 EXPLAIN を、SELECT・DELETE・INSERT・REPLACE・UPDATE の先頭につけて実行。（MySQL5.6.3より前は SELECT のみ） チューニング。 SQLの改善。 INDEX（テーブルの索引）の追加。日本語では「インデックスを張（は）る」と言う場合が多い。 テーブル構成の見直し。 スロークエリーログ # 設定の項目 # 設定項目 設定内容 slow_query_log スロークエリーログを出力する際に必要となる設定。デフォルト値は0。 long_query_time スロークエリーログを出力するための閾値（しきいち）の設定。0秒~360024365の範囲で指定。小数点以下の値を指定することでμs単位まで指定が可能。0秒を指定することで発行されたSQLを全部保存することも可能。 log_queries_not_using_indexes インデックスが未使用なクエリに関して記録をする設定。 slow_query_log_file スロークエリーログが出力される先を指定。 設定の方法 # 設定値は、1 が ON、0 が OFF。 最後の slow_query_log_file のsetでエラーが出た場合は，別のディレクトリを指定するか，もしくは指定したファイルを適宜作って書き込み権限を与えること。 MySQLのコンソールから設定\nmysql\u0026gt; SET GLOBAL slow_query_log = 1; mysql\u0026gt; SET GLOBAL long_query_time = 5; mysql\u0026gt; SET GLOBAL log_queries_not_using_indexes = 1; mysql\u0026gt; SET GLOBAL slow_query_log_file = \u0026#39;/path/to/mysql/slow_query.log\u0026#39;; my.cnf から設定\n[mysqld] slow_query_log=1 long_query_time=5 log_queries_not_using_indexes=1 slow_query_log_file=/path/to/mysql/slow_query.log mysqld 再起動 (CentOS7の場合)\nsystemctl restart mysqld 設定の確認 # slow_query_log がOFFになっているとスロークエリの出力されないため要注意。 mysql\u0026gt; SHOW VARIABLES LIKE \u0026#39;slow%\u0026#39;; +---------------------+-------------------------------+ | Variable_name | Value | +---------------------+-------------------------------+ | slow_launch_time | 2 | | slow_query_log | ON | | slow_query_log_file | /path/to/mysql/slow_query.log | +---------------------+-------------------------------+ mysql\u0026gt; SHOW VARIABLES LIKE \u0026#39;long%\u0026#39;; +-----------------+-----------+ | Variable_name | Value | +-----------------+------------+ | long_query_time | 10.000000 | +-----------------+-----------+ 集計方法 # 集計の種類 # mysqldumpslow コマンドでソート MySQL Tuner 等のツールを使用　https://github.com/major/MySQLTuner-perl mysqldumpslow コマンドの使用方法 # 発生回数でソート mysqldumpslow -s c /path/to/mysql/slow_query.log 合計処理時間でソート mysqldumpslow -s t /path/to/mysql/slow_query.log mysqldumpslow コマンドのオプション # -a 匿名化されたくない場合は，-a オプションを利用することで生のデータを出力 -t 引数に指定した個数分の結果を返却 -s ソート オプションの引数 並べ替えができる項目 t Time l Lock r Rows c Count 実行計画 # http://nippondanji.blogspot.com/2009/03/mysqlexplain.html 実行計画とは # MySQLが内部的に立てる実行手順 = MySQLの意思表示。 確認の構文 # EXPLAIN を、SELECT・DELETE・INSERT・REPLACE・UPDATE の先頭につけて実行。 MySQL5.6.3より前は SELECT のみ使用可能なため、UPDATE・DELETE を SELECT に書き換えて使用。 EXPLAIN SELECT id, title FROM posts WHERE title LIKE \u0026#34;Sample%\u0026#34;; 確認のステップ # id select_type table フィールドを見て、どのテーブルがどの順序でアクセスされるのかを知る。\nこれらはクエリの構造を示すフィールドであると言える。\nサブクエリが含まれている場合には EXPLAIN の表示順とアクセスされる順序が異なる場合があるので気をつける必要がある。 type key ref rows フィールドを見て、各テーブルから行がどのようにフェッチされるのかを知る。\nどのテーブルへのアクセスが最も重いか（クエリの性能の足を引っ張っているのか）を、これらのフィールドから判断することができる。 Extra フィールドを見て、Optimizer（MySQLの最適化装置）がどのように判断して、各々のテーブルへのアクセスにおいて何を実行しているのかを知る。\nExtra フィールドは Optimizer（MySQLの最適化装置）の挙動を示すものであり、クエリの全体像を把握するのに役立つ。 項目の説明 # id\nSELECT ごとに振られる ID。 処理順でない場合があるため要注意。詳細は select_type の補足欄を参照。 select_type\nSELECT の種類。 SIMPLE, SUBQUERY, UNION 等。 ＜JOIN の場合＞\nクエリが JOIN だけから構成されている場合、SIMPLE と表示される。\n複雑な JOIN であっても COMPLEX とはならず SIMPLE となるため、誤解しないよう要注意。 EXPLAIN の出力順序がどのテーブルから処理するかを反映している。 ＜サブクエリの場合＞\nサブクエリが絡む場合、以下の5種類のいずれかが出力される。\nサブクエリの場合は実行順序に気をつける必要がある。\nDERIVED の場合、サブクエリ→外部クエリの順番でクエリが実行される。\nそれ以外の場合は外部クエリ→サブクエリの順番でクエリが実行される。\nただし SUBQUERY の場合はサブクエリが本当に実行されるのは最初の一回だけで、それ以降はキャッシュされた実行結果が利用される。\nDEPENDENT SUBQUERY および UNCACHEABLE SUBQUERY の場合はサブクエリが行の評価の度に実行されることになる。\nサブクエリの場合、外部クエリとサブクエリでは別々のidがつけられる。\nPRIMARY：外部クエリを示す。 SUBQUERY：相関関係のないサブクエリ。 DEPENDENT SUBQUERY：相関関係のあるサブクエリ。 UNCACHEABLE SUBQUERY：実行する度に結果が変わる可能性のあるサブクエリ。 DERIVED：FROM 句で用いられているサブクエリ。 ＜UNION の場合＞\nPRIMARY：UNION において最初にフェッチされるテーブル。 UNION：2番目以降にフェッチされるテーブル。 UNION RESULT：UNION の実行結果。 DEPENDENT UNION：DEPENDENT SUBQUERY が UNIONに なっている場合。 UNCACHEABLE UNION：UNCACHEABLE SUBQUERY が UNION になっている場合。\n\u0026lt;derived2\u0026gt;UNION は前から順番に処理されていくだけなので、テーブルが処理される順序という観点ではわかりやすい。 table\nアクセスするテーブル。 type\nテーブルへのアクセスの種類。 対象のテーブルに対してどのような方法でアクセスするかを示すもの。 ＜詳細＞\nconst：PRIMARY KEY または UNIQUE インデックスのルックアップによるアクセス。最速。 eq_ref：JOIN において PRIARY KEY または UNIQUE KEY が利用される時のアクセスタイプ。const と似ているが JOIN で用いられるところが違う。 ref：ユニーク（PRIMARY or UNIQUE）ではないインデックスを使って等価検索（WHERE key = value）を行った時に使われるアクセスタイプ。 range：インデックスを用いた範囲検索。 index：INDEX FULL SCAN（インデックス・フル・スキャン）。インデックス全体をスキャンする必要があるのでとても遅い。 ALL：TABLE FULL SCAN（テーブル・フル・スキャン）。インデックスがまったく利用されていないことを示す。OLTP系の処理では改善必須。\n\u0026lt;derived2\u0026gt;index または ALL の場合は、必ずクエリのチューニングをおこなうこと。 possible_keys\nインデックスの候補となるキーの一覧。 Optimizer（MySQLの最適化装置）が挙げたテーブルのアクセスに利用可能なインデックスの候補。 key\n実際に選択されたキー。 possible_keys に挙げられたインデックスの内容や統計情報を加味した上で、Optimizer（MySQLの最適化装置）によって選択されたインデックス。 key_len\n選択されたキーの長さ。 インデックスの走査は、キー長が短い方が高速である。インデックスをつけるカラムを選ぶ時にはそのことを念頭に置くこと。 ref\n比較するカラム。 検索条件で、keyと比較されている値やカラムの種類。 ＜詳細＞\n定数が指定されている場合は const と表示される。（WHERE foo = 1 のような場合） JOINが実行されている時には、結合する相手側のテーブルで検索条件として利用されているカラムが表示される。 rows\nスキャンする見積もり行数。 あくまでもテーブル全体の行数やインデックスの分散具合から導き出された大まかな見積もりなので、実際にフェッチされる正確な行数ではないので要注意。 JOINやサブクエリが関係する場合は「外部表の rows x 内部表の rows」がスキャンする行になる。\nhttp://nippondanji.blogspot.com/2009/03/mysqlexplain.html Extra\nOptimizer（MySQLの最適化装置）がどのような戦略を選択したか。\n「optimizer の独り言」 ＜詳細＞\nUsing where：頻繁に出力される追加情報である。WHERE 句に検索条件が指定されており、なおかつインデックスを見ただけではWHERE句の条件を全て適用することが出来ない場合に表示される。 Using index：クエリがインデックスだけを用いて解決できることを示す。Covering Index を利用している場合などに表示される。 Using filesort：ソートに必要な領域がメモリ上に乗り切らずに物理ファイルに書き出しソートを行う。 Using temporary：JOINの結果をソートしたり、DISTINCT による重複の排除を行う場合など、クエリの実行にテンポラリテーブルが必要なことを示す。 Using index for group-by：MIN MAX が GROUP BY 句と併用されているとき、クエリがインデックスだけを用いて解決できることを示す。 Range checked for each record (index map: N)：JOIN において range または index_merge が利用される場合に表示される。 Not exists：LEFT JOIN において、左側のテーブルからフェッチされた行にマッチする行が右側のテーブルに存在しない場合、右側のテーブルは NULL となるが、右側のテーブルがNOT NULLとして定義されたフィールドで JOIN されている場合にはマッチしない行を探せば良い：ということを示す。 Using filesort と Using temporaty が表示されたら、必ずチューニングすること。 Using filesort とは？ http://nippondanji.blogspot.com/2009/03/using-filesort.html クエリにORDER BYが含まれる場合、MySQLはある程度の大きさまでは全てメモリ内でクイックソートを処理する。 ある程度の大きさとはsort_buffer_sizeであり、これはセッションごとに変更可能である。 ソートに必要なメモリがsort_buffer_sizeより大きくなると、テンポラリファイル（テンポラリテーブルではない）が作成され、メモリとファイルを併用してクイックソートが実行される。 クエリの改善策 # レコード数を絞れる条件は早い段階で記述 # 負債は早く返さないと、あとでツケを払うことになる。 WHERE句の条件で対象レコード数が少なくなる条件を先に記述。 JOINの条件は結合前の絞り込み、WHEREは結合後の絞り込みのため、JOINに抽出条件を記述したほうが効率が良い。と以前教わった。 サブクエリを引数にとる場合、IN句よりもEXISTSを使用 # 例）授業Aと授業Bを受講している生徒\n改善前）\nSELECT * FROM class_a WHERE student_id IN(SELECT student_id FROM class_b); 改善後）\nSELECT * FROM class_a a WHERE EXISTS(SELECT * FROM class_b b WHERE a.student_id = b.student_id); EXISTSのほうが速いと期待できる理由 # 結合キー（この場合 student_id）にインデックスが張られている場合、class_b の実表は見に行かず、インデックスを参照するのみで済む。 EXISTSは1行でも条件に合致する行を見つけたら、そこで検索を打ち切るので、INのように全件検索の必要がない。NOT EXISTS の場合も同様。 中間テーブルを減らす # HAVING句を活用 # 改善前）無駄な中間テーブルを使用\nSELECT * FROM ( SELECT sale_date, MAX(quantity) AS max_quantity FROM sales_histories GROUP BY sale_date ) AS tmp WHERE max_quantity \u0026gt;= 10; 改善後）HAVING句を活用\nSELECT sale_date, MAX(quantity) AS max_quantity FROM sales_histories GROUP BY sale_date HAVING max_quantity \u0026gt;= 10; INで複数のキーを利用する場合は1箇所にまとめる # 改善前）\nSELECT id, state, city FROM addresses1 a1 WHERE a1.state IN (SELECT a2.state FROM address2 a2 WHERE a1.id = a2.id) AND a1.city IN(SELECT a2.city FROM address2 a2 WHERE a1.id = a2.id); 改善後）\nSELECT * FROM addresses1 a1 WHERE (id, state, city) IN (SELECT id, state, city FROM address2 a2); ソートを回避 # ソートが発生する代表的な演算 # GROUP BY ORDER BY DISTINCT 集約関数：SUM、COUNT、AVG、MAX、MIN etc 集合演算子：UNION、INTERSECT、EXCEPT etc ウィンドウ関数：RANK、ROW_NUMBER etc （MySQL8以降） DISTINCTをEXISTSで代用 # 結合に劣らず高速に動作\n改善前）\nSELECT DISTINCT(i.item_no) FROM items i INNER JOIN sales_histories s ON i.item_no = s.item_no; 改善後）\nSELECT item_no FROM items i WHERE EXISTS(SELECT s.id FROM sales_histories s WHERE i.item_no = s.item_no); WHERE句で書ける条件はHAVING句には書かない # 改善前）集約した後にHAVING句でフィルタリング\nSELECT sale_date, SUM(quantity) FROM sales_histories GROUP BY sale_date HAVING sale_date = \u0026#39;2020-01-01\u0026#39;; 改善後）集約する前にWHERE句でフィルタリング\nSELECT sale_date, SUM(quantity) FROM sales_histories WHERE sale_date = \u0026#39;2020-01-01\u0026#39; GROUP BY sale_date; HAVING句は、集約した後のビューに対する条件を設定するが、残念なことに集約後のビューは元テーブルのインデックスまでは引き継がないケースが多い。\nGROUPBY句とORDERBY句でインデックスを使用する # GROUP BY句やORDER BY句は、通常 並べ替えのためのソートをおこなう。 インデックスの存在する列をキーに指定すること。 極値関数（MAX/MIN）でインデックスを使用する\n例）item_no インデックスなし、item_id インデックス あり\n改善前）全件検索が必要\nSELECT MAX(item_no) FROM items; 改善後）インデックスのスキャンだけ済ませ実表への検索を回避\nSELECT MAX(item_id) FROM items; インデックス # インデックスの操作 # インデックスの確認\nSHOW INDEX FROM テーブル名; SHOW INDEX FROM sample_table; インデックスの追加\nALTER TABLE テーブル名 ADD INDEX インデックス名(カラム名); ALTER TABLE posts ADD INDEX index_posts_on_updated_at(updated_at); 複合インデックスの追加\nALTER TABLE posts ADD INDEX index_posts_on_created_at_updated_at(created_at, updated_at); インデックスを削除\nALTER TABLE テーブル名 DROP INDEX インデックス名; ALTER TABLE posts DROP INDEX index_posts_on_updated_at; インデックスを追加する際のポイント # カーディナリティの高いカラムを選択。 複合インデックスのカラム順に注意。指定順が重要。（country_id, city_id） 更新性能・キャッシュ効率が低下するため必要なものにだけ貼ること。 カーディナリティとは # インデックス内のユニークな値の多さを表した指標。 高い例：AUTO_INCREMENT, 住所, 更新日時 低い例：フラグ, 性別, カテゴリー, 都道府県 カーディナリティが低いと効果が少ない。絞り込めない可能性が高い。 また、インデックスを経由することによるオーバーヘッドが無視できない。 分布が偏っていれば効果が大きくなる可能性がある、条件によって効果が異なる。 インデックスが適用されないケース # Extra 欄が Using where の場合 かつ インデックスが使われていない場合、対象テーブルの行を1つ1つスキャンして探していることになる。 NULL述語を指定している場合\nWHERE indexed_column IS NULL IS NOT NULLの代用案\nWHERE indexed_column \u0026gt; 0 原理：最小値より小さい数を指定して不等号を使えば、indexed_column のすべての値が選択される。 NULLの行だけ indexed_column \u0026gt; NULL が unknown に評価され抽出の対象外となる。 このようなトリッキーな記述は読み手を混乱させる可能性があるため、どうしても必要な場合のみ使用すること。 左辺で関数を使用している場合\n例）文字列の処理\n改善前）左辺で関数を使用しているためインデックスが適用されないケース\n-- NG WHERE SUBSTRING(indexed_column, 1, 3) = \u0026#39;abc\u0026#39; 改善後）関数を使用せず別な方法で代用\n-- OK WHERE indexed_column LIKE \u0026#39;abc%\u0026#39; 例）暗号化/復号化\n改善前）左辺で関数を使用しているためインデックスが適用されないケース\n-- NG WHERE AES_DECRYPT(indexed_column, \u0026#39;Encryption Key\u0026#39;) = \u0026#39;foo@bar.com\u0026#39; 改善後）右辺で暗号化し完全一致するためインデックスが適用されるケース\n-- OK WHERE indexed_column = AES_ENCRYPT(\u0026#39;foo@bar.com\u0026#39;, \u0026#39;Encryption Key\u0026#39;) 演算処理を使用している場合\n改善前）左辺に演算処理が含まれておりインデックスが適用されないケース\n-- NG WHERE indexed_column * 1.1 \u0026gt; 100 改善策）インデックスを貼る場合「左辺は裸」が基本\n-- OK WHERE indexed_column \u0026gt; 100 / 1.1 否定形での条件指定している場合\n\u0026lt;\u0026gt;, !=, NOT IN\n-- NG WHERE indexed_column \u0026lt;\u0026gt; \u0026#39;abc\u0026#39; ORでの条件指定している場合\n改善前）\n-- NG WHERE indexed_column = \u0026#39;abc\u0026#39; OR indexed_column = \u0026#39;def\u0026#39; 改善後）\n-- OK WHERE indexed_column IN (\u0026#39;abc\u0026#39;, \u0026#39;def\u0026#39;) 中間一致・後方一致でのLIKE述語を使用している場合\n-- NG WHERE indexed_column LIKE \u0026#39;%abc%\u0026#39; Note: 前方一致の場合は インデックスが適用される\n複合インデックスが貼ってあるが、WHERE句の列の順番誤りの場合\n質問）(col_1, col_2, col_3) の順番で複合インデックスが貼られている場合\n以下の①〜④の中でインデックスが適用されるものはどれ？\n-- ① SELECT * FROM sample_table WHERE col_1 = 10 AND col_2 = 100 AND col_3 = 500; -- ② SELECT * FROM sample_table WHERE col_1 = 10 AND col_2 = 100; -- ③ SELECT * FROM sample_table WHERE　col_1 = 10 AND col_3 = 500; -- ④ SELECT * FROM sample_table WHERE　col_2 = 100 AND col_3 = 500; 答え ... ① OK\n② OK\n③ NG\n④ NG 暗黙の型変換している場合\nカラム col_1 が文字列型の場合、インデックスが適用ものはどれ？\n-- ① SELECT * FROM sample_table WHERE col_1 = 10; -- ② SELECT * FROM sample_table WHERE col_1 = \u0026#39;10\u0026#39;; -- ③ SELECT * FROM sample_table WHERE col_1 = CAST(10 AS CHAR); 答え ... ① NG\n② OK\n③ OK ※ CAST(10, AS CHAR(2)) によって文字列として扱われるため。 暗黙の型変換は、オーバーヘッドを発生させるだけでなく、インデックスまで使用不可になる。\nMySQLではエラーにならないが、PostgreSQLの場合はエラーになる。\n小さなテーブルの場合、または、テーブルの大半の行が対象の場合、インデックスを処理する方が遅くなるケース\n小さなテーブルまたは、レポートクエリーが行の大半またはすべてを処理する大きなテーブルに対するクエリーでは、インデックスはあまり重要ではありません。クエリーで行の大半にアクセスする必要がある場合は、順次読み取る方が、インデックスを処理するより高速です。クエリーですべての行が必要でない場合でも、順次読み取りは、ディスクシークを最小にします。\n引用：8.3.1 MySQL のインデックスの使用の仕組み\nその他 # INDEX FULL SCAN (全索引検索)とは # 複合インデックスのうち1つしか効いていない場合、ツリー構造の複合インデックスの組み合わせを すべてスキャンする状態のこと。 例）\n複合インデックス　(col_1, col_2) WHERE 句で処理する時点で col_2 が順番誤りのためインデックスの適用外。 その後処理される ORDER BY 句の col_1 のみインデックスが適用。 結果的に複合インデックスのすべてのスキャンが必要。 SELECT col_1, col_2, col_3 FROM sample_table WHERE col_2 = 10 ORDER BY col_1; 参照 # MySQL 公式ドキュメント 達人に学ぶSQL徹底指南書 第2版 SQL実践入門 MySQL勉強会 Yahoo MySQL勉強会 MySQLのEXPLAINを徹底開設 Using filesort スロークエリログ MySQL Tuner 津島博士のパフォーマンス講座　第21回 索引について（２） MySQLのIndexをはるコツ MySQLでAES_ENCRYPTとAES_DECRYPTでvarbinary型のINDEX動作 DBのインデックスと複合インデックス "},{"id":34,"href":"/git/","title":"Git","section":"Home","content":" Git # Git Basic Git Tool "},{"id":35,"href":"/glossary/","title":"Glossary","section":"Home","content":" 用語集 # 技術 # バッファ buffer 緩衝記憶装置 # IT分野では、コンピューターが処理しきれないデータを一時的に保持しておくための記憶領域を指し、「緩衝記憶領域」とも呼ばれる。コンピューター内部の入出力装置や制御装置などでは、装置ごとに処理速度の差があるため、装置間でデータをやりとりするとタイムラグが生じる。そこで、処理速度や転送速度の差を緩和させ、それぞれの処理速度に合わせたデータの保管や送信を行う必要があり、バッファはその役目を果たしている。 https://e-words.jp/w/%E3%83%90%E3%83%83%E3%83%95%E3%82%A1.html https://www.otsuka-shokai.co.jp/words/buffer.html 静的解析 # コードを実行せずにおこなう検証。 凝集度 # クラスやメソッドがそのクラスの責任に集中しているかを示す尺度。 凝集度が低いケース：メソッドが、クラスの責任範囲と関連性の低い様々な処理をおこなったり、関連性の低いデータを扱っている場合、修正が複数のクラスにまたがって影響する可能性が高まり、保守性が低下。 結合度 # クラスやメソッドを利用・保守しやすいよう、その内容が整理・分割できているかを示す尺度。 結合度が高いケース：利用する側のクラスやメソッドが、利用される側のクラスやメソッドの内容を把握（依存）している割合が高いほど、保守性やテスト容易性が低下。 ACID # Wikipedia ACID\n信頼性のあるトランザクションシステムの持つべき性質 不可分性(atomicity): トランザクションに含まれるタスクが全て実行されるか、あるいは全く実行されないことを保証する性質。 一貫性(consistency): トランザクション開始と終了時にあらかじめ与えられた整合性を満たすことを保証する性質を指す。すなわち、データベースのルール、つまり整合性条件を満たさない状態を起こすようなトランザクションは実行が中断される。日本語では整合性とも呼ばれる。 独立性(isolation): トランザクション中に行われる操作の過程が他の操作から隠蔽されることを指す。日本語では分離性、独立性または隔離性ともいう。 永続性(durability): トランザクション操作の完了通知をユーザーが受けた時点で、その操作は永続的となり、結果が失われないことを指す。持続性ともいう。 金融 # 口座振替：公共料金やクレジットカードなどのサービスへの支払い代金が、預金口座から自動で引き落とされる仕組みの決済サービス。 主体：金融機関（定期的かつ自動的） 具体例：水道光熱費, 携帯料金等 手数料：振替の都度、お金を受け取る側が払う 口座振込：自分の口座にある資金を、第三者の口座宛てに払い込むこと。 主体：消費者自ら 具体例：商品代金の支払い等 手数料：振込の都度、お金を送る側が払う 参考 # 口座振替と口座振込の違い https://www.robotpayment.co.jp/blog/furikae/3548/ 凝集度・結合度・循環的複雑度 https://qiita.com/oda-kazuki/items/a16b43dc624429de7db3 凝集度 https://ja.wikipedia.org/wiki/%E5%87%9D%E9%9B%86%E5%BA%A6 結合度 https://ja.wikipedia.org/wiki/%E7%B5%90%E5%90%88%E5%BA%A6 "},{"id":36,"href":"/go/","title":"Go","section":"Home","content":" Go # Go Check List Go Test Go TestScript Go Link "},{"id":37,"href":"/tool/hugo/","title":"Hugo","section":"Tool","content":" Hugo # What\u0026rsquo;s Hugo? # Hugo is a fast and flexible static site generator made of Golang.\nhttps://gohugo.io/about/ Preparation # Create a git repository using Github # Repositories \u0026gt; New Repository name: sample Click \u0026ldquo;Create repository\u0026rdquo; Install Hugo on macOS # $ brew install hugo Build a blog using Hugo # $ GITHUB_USERNAME=xxxx $ GIT_REPOSITORY=sample $ hugo new site ${GIT_REPOSITORY} $ cd ${GIT_REPOSITORY} $ echo \u0026#34;# ${GIT_REPOSITORY}\u0026#34; \u0026gt;\u0026gt; README.md Initialize git # $ git init If you want to change the configrations of git\n$ git config --local --list $ git config --local user.name xxxx $ git config --local user.email xxxx $ git add . $ git commit -m \u0026#34;Build a site using hugo\u0026#34; $ git branch -M main $ git remote add origin https://github.com/${GITHUB_USERNAME}/${GIT_REPOSITORY}.git $ git push -u origin main Add .gitignore # $ vi .gitignore Add a line break on the last line.\n.gitignore\npublic/ resources/_gen/ .DS_Store *.swp $ git add . $ git commit -m \u0026#34;Add .gitignore\u0026#34; Add Hugo\u0026rsquo;s theme # $ git submodule add https://github.com/alex-shpak/hugo-book themes/hugo-book $ git add . $ git commit -m \u0026#34;Add a theme as a submodule\u0026#34; Change config.toml # config.toml\nbaseURL = \u0026#34;/sample/\u0026#34; # Write your git repository as a directory languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;Sample\u0026#34; publishDir = \u0026#34;docs\u0026#34; theme = \u0026#34;hugo-book\u0026#34; # Add a line break on the last line. $ git add . $ git commit -m \u0026#34;Change config.toml\u0026#34; Add a page of hello world # contents/hello-world.md\n--- date: 2021-01-01 lastmod: [\u0026#34;lastmod\u0026#34;] title: \u0026#34;Hello world\u0026#34; tags: [\u0026#34;Foo\u0026#34;,\u0026#34;Bar\u0026#34;] --- # Hello world! $ git add . $ git commit -m \u0026#34;Add a page of hello world\u0026#34; Generate static contents # $ hugo Execute the following instead above one if you want to minify static contents\n$ hugo --minify $ git add . $ git commit -m \u0026#34;Generate static contents\u0026#34; Check on your local environment # $ hugo server --minify -p 3000 Access the following URL using a browser.\n$ echo http://localhost:3000/${GIT_REPOSITORY}/hello-world/ Push to Github # $ git push -u origin main Github Pages # Access the following URL using a browser.\n$ echo https://github.com/${GITHUB_USERNAME}/${GIT_REPOSITORY}/settings/pages Source: \u0026gt; Branch: main \u0026gt; /docs Click \u0026ldquo;Save\u0026rdquo; Access the following URL using a browser after a few minute.\n$ echo https://${GITHUB_USERNAME}.github.io/${GIT_REPOSITORY}/hello-world/ Left Menu # TODO: Bundle menu mode is deprecated and will be removed. config.toml\n[params] BookMenuBundle = \u0026#39;/menu\u0026#39; content/menu/index.md\n--- headless: true --- - **Sample** - [Hello world]({{\u0026lt; ref \u0026#34;hello-world\u0026#34; \u0026gt;}}) - Please write your link here as above. Breadcrumb # layouts/partials/docs/breadcrumb.html\n\u0026lt;ol class=\u0026#34;breadcrumb\u0026#34;\u0026gt; {{ template \u0026#34;breadcrumbnav\u0026#34; (dict \u0026#34;p1\u0026#34; . \u0026#34;p2\u0026#34; .) }} \u0026lt;/ol\u0026gt; {{ define \u0026#34;breadcrumbnav\u0026#34; }} {{ if .p1.Parent }} {{ template \u0026#34;breadcrumbnav\u0026#34; (dict \u0026#34;p1\u0026#34; .p1.Parent \u0026#34;p2\u0026#34; .p2 ) }} {{ else if not .p1.IsHome }} {{ template \u0026#34;breadcrumbnav\u0026#34; (dict \u0026#34;p1\u0026#34; .p1.Parent \u0026#34;p2\u0026#34; .p2 ) }} {{ end }} \u0026lt;li{{ if eq .p1 .p2 }} class=\u0026#34;active\u0026#34;{{ end }}\u0026gt; \u0026lt;a href=\u0026#34;{{ .p1.Permalink }}\u0026#34;\u0026gt;{{ .p1.LinkTitle }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} layouts/partials/docs/inject/content-before.html\n{{ partial \u0026#34;docs/breadcrumb\u0026#34; . }} assets/_custom.scss\n/* Breadcrumb */ .breadcrumb { padding: 8px 15px; margin-bottom: 20px; list-style: none; background-color: var(--gray-100); border-radius: 4px; ol { display: block; list-style-type: decimal; margin-block-start: 1em; margin-block-end: 1em; margin-inline-start: 0px; margin-inline-end: 0px; padding-inline-start: 40px; } li { display: inline-block; } li+li:before { padding: 0 5px; color: #ccc; content: \u0026#34;/\\00a0\u0026#34;; } a { color: var(--color-link); } } Multilingual Mode # Change config.toml # Add the following to config.toml\ndefaultContentLanguage = \u0026#34;en\u0026#34; defaultContentLanguageInSubdir = true [languages] [languages.en] languageName = \u0026#34;English\u0026#34; languageCode = \u0026#34;en\u0026#34; # contentDir = \u0026#34;content/en\u0026#34; weight = 1 #[languages.en.params] # key1 = value1 [languages.ja] languageName = \u0026#34;日本語\u0026#34; languageCode = \u0026#34;ja\u0026#34; # contentDir = \u0026#34;content/ja\u0026#34; weight = 2 #[languages.ja.params] # key1 = value1 Customize a select box of languages # layouts/partials/docs/languages.html\nOverwrite themes/hugo-book/layouts/partials/docs/languages.html.\n\u0026lt;!-- Merge home and current page translations --\u0026gt; {{ $bookTranslatedOnly := default false .Site.Params.BookTranslatedOnly }} {{ $translations := dict }} {{ if (eq $bookTranslatedOnly false ) }} {{ range .Site.Home.AllTranslations }} {{ $translations = merge $translations (dict .Language.Lang .) }} {{ end }} {{ end }} {{ range .Translations }} {{ $translations = merge $translations (dict .Language.Lang .) }} {{ end }} \u0026lt;div class=\u0026#34;book-languages\u0026#34; tabindex=\u0026#34;0\u0026#34; aria-haspopup=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li class=\u0026#34;flex align-center\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;{{ \u0026#34;svg/translate.svg\u0026#34; | relURL }}\u0026#34; class=\u0026#34;book-icon\u0026#34; alt=\u0026#34;Languages\u0026#34; /\u0026gt; {{ $.Site.Language.LanguageName }} \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul class=\u0026#34;book-languages-list\u0026#34;\u0026gt; {{ range .Site.Languages }}{{ with index $translations .Lang }} {{ if (ne $.Site.Language .Language) }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34; class=\u0026#34;flex align-center\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;{{ \u0026#34;svg/translate.svg\u0026#34; | relURL }}\u0026#34; class=\u0026#34;book-icon\u0026#34; alt=\u0026#34;Languages\u0026#34; /\u0026gt; {{ .Language.LanguageName }} \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }}{{ end }}{{ end }} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; layouts/partials/docs/search.html\nOverwrite themes/hugo-book/layouts/partials/docs/search.html\nto put a select box of languages above a search box.\n{{ partial \u0026#34;docs/languages\u0026#34; . }} {{ if default true .Site.Params.BookSearch }} \u0026lt;div class=\u0026#34;book-search\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;book-search-input\u0026#34; placeholder=\u0026#34;{{ i18n \u0026#34;Search\u0026#34; }}\u0026#34; aria-label=\u0026#34;{{ i18n \u0026#34;Search\u0026#34; }}\u0026#34; maxlength=\u0026#34;64\u0026#34; data-hotkeys=\u0026#34;s/\u0026#34; /\u0026gt; \u0026lt;div class=\u0026#34;book-search-spinner hidden\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;ul id=\u0026#34;book-search-results\u0026#34;\u0026gt;\u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; {{ end }} assets/_custom.scss\n/* Multilingual Mode */ .book-languages { .book-languages-list { bottom: 74%; } .book-languages-list a { padding: .3rem 1rem; } } .book-menu-content { .book-languages { img { height: 1em; width: 1em; margin-inline-end: .5rem; } .book-languages-list { padding: 0; bottom: 68%; } .book-languages-list a { padding: 0 1rem; } } } Tags of a page # layouts/partials/docs/tags.html\n\u0026lt;h2\u0026gt;Tags\u0026lt;/h2\u0026gt; {{ with .Params.tags }} \u0026lt;ul class=\u0026#34;tags\u0026#34;\u0026gt; {{- range . -}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ \u0026#34;/tags/\u0026#34; | relLangURL }}{{ . | urlize }}\u0026#34;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; {{- end -}} \u0026lt;/ul\u0026gt; {{ end }} layouts/partials/docs/inject/toc-before.html\nOverwrite themes/hugo-book/layouts/partials/docs/inject/toc-before.html\n{{ partial \u0026#34;docs/tags\u0026#34; . }} layouts/partials/docs/toc.html\nOverwrite themes/hugo-book/layouts/partials/docs/toc.html\n{{ partial \u0026#34;docs/inject/toc-before\u0026#34; . }} \u0026lt;h2\u0026gt;Table of Contents\u0026lt;/h2\u0026gt; {{ .TableOfContents }} {{ partial \u0026#34;docs/inject/toc-after\u0026#34; . }} assets/_custom.scss\n/* Table of Contents */ .book-toc-content { ul.tags { padding-inline-start: 0; li { line-height: 2; list-style: none; } } } Syntax Highlighting # https://gohugo.io/content-management/syntax-highlighting/\ne.g) If you write the following in sample.md file of your article. ```go {linenos=table,hl_lines=[\u0026#34;4-5\u0026#34;,9],linenostart=1} package main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func main() { fmt.Println(\u0026#34;The time is\u0026#34;, time.Now()) } ```\nYou can see the following syntax highlighting on the web page.\n1 2 3 4 5 6 7 8 9 10 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func main() { fmt.Println(\u0026#34;The time is\u0026#34;, time.Now()) } Mermaid Diagram # https://mermaid-js.github.io/mermaid/#/\ne.g) If you write the following in sample.md file of your article\n{{\u0026lt;mermaid\u0026gt;}} graph LR A[Square Rect] -- Text --\u0026gt; B((Circle)) A --\u0026gt; C(Round Rect) B --\u0026gt; D{Rhombus} C --\u0026gt; D {{\u0026lt;/mermaid\u0026gt;}} You can see the following diagram on the web page. graph LR A[Square Rect] -- Text --\u003e B((Circle)) A --\u003e C(Round Rect) B --\u003e D{Rhombus} C --\u003e D Google Analytics # config/_default/config.toml\nbaseURL = \u0026#34;\u0026#34; # Omission googleAnalytics = \u0026#34;\u0026#34; # Set empty. config/production/config.toml\nSet your Google Analytics ID conf.toml of production environment only.\nbaseURL = \u0026#34;https://sample.com/\u0026#34; # Omission googleAnalytics = \u0026#34;G-XXXXXXXXXX\u0026#34; # Set your Google Analytics ID. layouts/partials/analytics.html\n{{ if not .Site.IsServer }} {{ with .Site.GoogleAnalytics }} \u0026lt;!-- Global site tag (gtag.js) - Google Analytics --\u0026gt; \u0026lt;script async src=\u0026#34;https://www.googletagmanager.com/gtag/js?id={{ . }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag(\u0026#39;js\u0026#39;, new Date()); gtag(\u0026#39;config\u0026#39;, \u0026#39;{{ . }}\u0026#39;); \u0026lt;/script\u0026gt; {{ end }} {{ end }} layouts/baseof.html or layouts/partials/head.html etc.\nWrite the following in \u0026lt;head\u0026gt; of HTML.\n{{ partial \u0026#34;analytics\u0026#34; . }} Enable a line break in a table cell when using markdown # Add the following to config/_default/config.toml.\n[markup] defaultMarkdownHandler = \u0026#34;goldmark\u0026#34; [markup.goldmark] [markup.goldmark.renderer] unsafe = true Can use \u0026lt;br\u0026gt; as a line break in your article.\n|Language|Sentence| |---|---| |English|Hello,\u0026lt;br\u0026gt;world| References # https://gohugo.io/about/ https://gohugo.io/content-management/multilingual/ https://gohugo.io/content-management/syntax-highlighting/ https://mermaid-js.github.io/mermaid/#/ "},{"id":38,"href":"/mac/iterm2/","title":"iTerm2","section":"Mac","content":" iTerm2 # What\u0026rsquo;s iTerm2 # iTerm2 is a terminal emulator for macOS\nhttps://iterm2.com/ Shortcuts # command description command + N New Window command + T New Tab command + return Maximize Window command + (◀ or ▶) Move Tab shift + command + D Split Horizontally with Current Profile command + D Split Vertically with Current Profile command + F Find option + command + F Replace shift + command + F Find in Files shift + command + H Replace in Files How to increase scrollback lines # iTerm2 \u0026gt; Preferences \u0026gt; Profiles Select a profile from Profile Name Click Terminal tab Change Scrollback lines: or check Unlimited scrollback How to input to multiple consoles at the same time # Shell \u0026gt; Broadcast Input \u0026gt; Broadcast input to All Panes in Current Tab How to output console log automatically # $ mkdir -p /Users/`whoami`/iTerm2/ iTerm2 \u0026gt; Preferences \u0026gt; Profiles Select a profile from Profile Name Click Session tab Check Automatically log session input to files in: Check log plain text Input the directory path How to change the background color of iTerm2 for each environment # Add color schemes to iTerm2 by referring to the following URL.\nhttps://github.com/mbadolato/iTerm2-Color-Schemes/blob/master/README.md iTerm2 \u0026gt; Preferences \u0026gt; Profiles \u0026gt; General tab Click + Name MyDefault Click Colors tab Select from Color Presets... If you change the color schema using shell script # echo -ne \u0026#34;\\033]1337;SetProfile=MyDefault\\a\u0026#34; "},{"id":39,"href":"/javascript/","title":"JavaScript","section":"Home","content":" JavaScript # Node.js "},{"id":40,"href":"/linux/","title":"Linux","section":"Home","content":" Linux # Command Ubuntu "},{"id":41,"href":"/tool/mailcatcher/","title":"MailCatcher","section":"Tool","content":" MailCatcher # Simple SMTP server made of Ruby. You can check emails of web app on your local environment. Docker container of MailCatcher # docker-compose.yml\nmailcatcher: image: schickling/mailcatcher:latest ports: - 1080:1080 docker-compose up -d http://localhost:1080\n.env config of Laravel container # .env.local\nMAIL_DRIVER=smtp MAIL_HOST=mailcatcher MAIL_PORT=1025 MAIL_USERNAME=null MAIL_PASSWORD=null MAIL_ENCRYPTION=null # Optional configuration MAIL_FROM_ADDRESS=mailcatcher@example.com MAIL_FROM_NAME=\u0026#34;${APP_NAME}\u0026#34; SMTP config of Laravel container # /etc/ssmtp/ssmtp.conf\nroot=postmaster mailhub=mailcatcher:1025 rewriteDomain=foo-bar-baz.com References # Github Mail Catcher ローカルの開発環境にSMTPを整備する Laravelローカル環境構築 メール送信の設定＋MailCatcher "},{"id":42,"href":"/cron/main/","title":"Cron","section":"Cron","content":" Cron # 日時・時刻・インターバルの指定 # 記述方法 # 時，日，月，曜日，実行コマンド 記号による指定 # 記号 内容 * 全範囲指定(ワイルドカード) - 範囲指定 / インターバル指定 , 区切り指定 曜日の指定 # 略語または数字での指定が可能 略語 数字 sun 0 mon 1 tue 2 wed 3 thu 4 fri 5 sat 6 月の指定 # 略語または数字での指定が可能 略語 数字 jan 1 feb 2 mar 3 apr 4 may 5 jun 6 jul 7 aug 8 sep 9 oct 10 nov 11 dec 12 注意事項 # 実行ディレクトリ # cron ジョブ実行時のカレントディレクトリ = ユーザーのホームディレクトリ 実行コマンドの指定は「絶対パスを指定」または「実行ディレクトリにcdで移動」すること 環境変数 # cron ジョブ実行時は最低限の環境変数のみセットされた状態、パスが通っていないケースがあるため注意 shell内での指定と異なり、右辺の環境変数が展開されないため注意 # NG PATH=/usr/local/bin:$PATH # OK PATH=/usr/local/bin:/usr/bin:/bin 毎分指定 # 日次のバッチを誤って毎分実行しないよう注意 # NG * 5 * * * /path/to/backup.sh # OK 5 5 * * * /path/to/backup.sh 1分おきインターバルのベタープラクティス */1 * * * /path/to/monitor.sh % のエスケープ # crontab の指定において % は改行を意味する特殊文字 % を指定したい場合は \\% のように \\ バックスラッシュでエスケープすること 曜日と日付の同時指定 # 曜日と日付が同時に指定された場合、片方の条件を満たした場合に実行されるため注意 (OR条件) # 13日の金曜日に実行されるのではなく、13日または金曜日に実行されてしまうため注意 0 0 13 * 5 /path/to/jewison.sh 0分ちょうどの指定 # 毎時0分に設定すると他の cronジョブと時間が重なってしまうケースが多いため避けたほうがベター パーサー # PHP Cron Expression Parser "},{"id":43,"href":"/shellscript/memo/","title":"Shellscript Memo","section":"Shellscript","content":" Shellscript # Double quotes # Use double quotes when you want to apply line breaks # #! /bin/bash LINES=`cat \u0026lt;\u0026lt;EOF apple banana lemon EOF ` echo ${LINES} # apple banana lemon echo \u0026#34;${LINES}\u0026#34; # apple # banana # lemon Don not use double quotes when using for clause # #! /bin/bash LINES=`cat \u0026lt;\u0026lt;EOF apple banana lemon EOF ` COUNT=0 for i in ${LINES} do echo ${COUNT}\u0026#39;:\u0026#39;${i} COUNT=$(( COUNT + 1 )) done # 0:apple # 1:banana # 2:lemon COUNT=0 for i in \u0026#34;${LINES}\u0026#34; do echo ${COUNT}\u0026#39;:\u0026#39;${i} COUNT=$(( COUNT + 1 )) done # 0:apple banana lemon References # 複数行の文字列をShell変数に格納して、forで回した時の挙動 "},{"id":44,"href":"/mysql/","title":"MySQL","section":"Home","content":" MySQL # MySQL Basic MySQL Explain "},{"id":45,"href":"/javascript/nodejs/","title":"Node.js","section":"JavaScript","content":" Node.js # Install nodebrew (using Homebrew) # nodebrew is the package manager for Node.js. You can install multiple versions of Node.js and switch between them etc. $ brew install nodebrew $ which nodebrew /usr/local/bin/nodebrew $ nodebrew -v nodebrew 1.1.0 $ nodebrew setup ... Install Node.js # Check installable versions # $ nodebrew ls-remote Install # $ nodebrew install-binary latest Check current version # $ nodebrew ls v16.10.0 current: none Apply specific version # $ nodebrew use v16.10.0 use v16.10.0 Check current version again # $ nodebrew ls v16.10.0 current: v16.10.0 Create an environment path # $ echo \u0026#39;export PATH=$HOME/.nodebrew/current/bin:$PATH\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile $ source ~/.bash_profile Check if we use node # $ node -v v16.10.0 "},{"id":46,"href":"/php/","title":"PHP","section":"Home","content":" PHP # PHPUnit PHP Upgrade PhpMetrics PHP Command Line "},{"id":47,"href":"/php/phpmetrics/","title":"PhpMetrics","section":"PHP","content":" PhpMetrics # PhpMetrics とは # PHPプログラムの静的解析ツール 結果レポートをHTMLで出力 期待する効果 可読性・メンテナンス性・再利用性・テスト容易性の向上 バグ混入率の低下 解析時の評価指標 # 複雑度(循環的複雑度、経路複雑度) オブジェク指向(凝集度、結合度、抽象化) コード量 etc. インストール # $ composer require phpmetrics/phpmetrics --dev 使用方法 # $ php ./vendor/bin/phpmetrics --report-html=myreport.html /path/to/your/sources/ 参考 # https://phpmetrics.org/ https://github.com/phpmetrics/PhpMetrics "},{"id":48,"href":"/php/phpunit/","title":"PHPUnit","section":"PHP","content":" PHPUnit # 事前準備 # インストール # composer.json\n\u0026#34;require-dev\u0026#34;: { \u0026#34;fzaninotto/faker\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;mikey179/vfsstream\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;mockery/mockery\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;phpunit/phpunit\u0026#34;: \u0026#34;*\u0026#34; }, $ composer install バージョンの確認 # $ ./vendor/bin/phpunit --version 基本 # \u0026lt;?php use Aaa\\ClassA; use Bbb\\ClassB; use Eee\\ExceptionA; use Mockery; use PHPUnit\\Framework\\TestCase; /** * @coversDefaultClass Aaa\\ClassA */ class ClassATest extends TestCase { // Omitted /** * This method is called before class.　TestCaseクラス実行前の処理。 * * @return void */ public static function setUpBeforeClass(): void { parent::setUpBeforeClass(); // static 変数を使用（static メソッドのため） self::$hoge = \u0026#39;some value\u0026#39;; } /** * This method is called before each test.　各テストのメソッドが実行される前の処理。 * * @return void */ protected function setUp(): void { parent::setUp(); // インスタンス変数 $this-\u0026gt;classA = new ClassA(); } /** * This method is called after each test. 各テストのメソッドが実行された後の処理。 * * @return void */ protected function tearDown(): void { parent::tearDown(); } /** * Test ClassA::method1 * * @covers ::method1 カバレッジを算出する際に使用。テスト対象のクラス名（名前空間を含む）とメソッド名を記載。 * @return void */ public function testMethod1ExpectedValue(): void // メソッド名の命名規則：lowerCamelCase test[TargetMethodName][Description|ExpectedValue] { $classA = new ClassA(); $actualValue = $classA-\u0026gt;method1(); $this-\u0026gt;assertEquals($expectedValue, $actualValue); // 引数は期待値、実際の値の順番 } } アノテーション # デフォルトのテスト対象クラスをテスト・クラスのアノテーションで指定 # メソッドのアノテーションでクラス名の記述を省略しクラス名のタイポを未然に防止 @coversDefaultClass https://phpunit.readthedocs.io/en/latest/annotations.html#coversdefaultclass\n\u0026lt;?php use PHPUnit\\Framework\\TestCase; /** * @coversDefaultClass \\Foo\\CoveredClass */ class CoversDefaultClassTest extends TestCase { /** * @covers ::publicMethod */ public function testSomething() { $o = new Foo\\CoveredClass; $o-\u0026gt;publicMethod(); } } 未実装のテストをスキップする # use Aaa\\ClassA; // Omitted /** * Skip unimplemented tests * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $this-\u0026gt;markTestIncomplete(\u0026#39;This test has not been implemented yet.\u0026#39;); } アサーションがないテストをリスキーと見なさない # /** * Do not consider a test without an assertion as risky * * @covers Aaa\\ClassA::method1ClassA * @doesNotPerformAssertions * @return void */ public function testSampleMethod(): void { // Omitted } PHP Code Sniffer で警告が発生するのを 以下のアノテーションで回避 # コールバック関数で使用する引数が未使用扱いとなり PHP Code Sniffer で警告が発生するのを 以下のアノテーションで回避\nprotected function getSample() : callable { // PHP Code Sniffer で警告が発生するのを 以下のアノテーションで回避 // @codingStandardsIgnoreStart return function ($sample) { // Omitted } // @codingStandardsIgnoreEnd } 例外 # 例外が発生することをテスト # PHPUnit 8+ # use Aaa\\ClassA; use Eee\\ExceptionA // Omitted /** * Test that ExceptionA occurs * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $this-\u0026gt;expectException(ExceptionA::class);　// クラス名（名前空間を含む）の文字列を使用する場合は クラス名::class を使用 $classA = new ClassA(); $classA-\u0026gt;method1ClassA(); } PHPUnit 7 # use Aaa\\ClassA; use Eee\\ExceptionA // Omitted /** * Test that Exception occurs * * @covers Aaa\\ClassA::method1ClassA * @expectedException Eee\\ExceptionA * @return void */ public function testSampleMethod(): void { $classA = new ClassA(); $classA-\u0026gt;method1ClassA(); } 例外が発生しないことをテスト # use Aaa\\ClassA; use Eee\\ExceptionA // Omitted /** * Test that no ExceptionA occurs * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $classA = new ClassA(); try { $classA-\u0026gt;method1ClassA(); } catch (ExceptionA $e) { $this-\u0026gt;fail(); } $this-\u0026gt;assertTrue(true); } public メソッド,プロパティ # publicメソッドのモックを作ってテスト # use Aaa\\ClassA; use Bbb\\ClassB; use Eee\\ExceptionA use Mockery; // Omitted /** * Test using a mock of public method * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $mockClassB = Mockery::mock(ClassB::class); // 引数は with() で指定、返り値は andReturn() で指定 $mockClassB-\u0026gt;shouldReceive(\u0026#39;method1ClassB\u0026#39;)-\u0026gt;with(\u0026#39;argument value 1\u0026#39;, \u0026#39;argument value 2\u0026#39;)-\u0026gt;andReturn(\u0026#39;some value\u0026#39;); $classA = new ClassA($mockClassB); $classA-\u0026gt;method1ClassA(); } publicプロパティのモックを作ってテスト # use Aaa\\ClassA; use Bbb\\ClassB; use Mockery; // Omitted /** * Test using a mock of public property * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $mockClassB = Mockery::mock(ClassB::class); $mockClassB-\u0026gt;property1ClassB = \u0026#39;some value\u0026#39;; $classA = new ClassA($mockClassB); $classA-\u0026gt;method1ClassA(); } public staticメソッドのモックを作ってテスト # @runInSeparateProcess そのテストを個別の PHP プロセスで実行するように指示する\nuse Aaa\\ClassA; use Bbb\\ClassB; use Mockery; // Omitted /** * Test using a mock of public static method * * @covers Aaa\\ClassA::method1ClassA * @runInSeparateProcess * @preserveGlobalState disabled * @return void */ public function testSampleMethod(): void { $mockClassB = Mockery::mock(\u0026#39;alias:\u0026#39; . ClassB::class); $mockClassB-\u0026gt;shouldReceive(\u0026#39;method1ClassB\u0026#39;)-\u0026gt;andReturn(\u0026#39;some value\u0026#39;); $classA = new ClassA(); $classA-\u0026gt;method1ClassA(); } publicメソッドのモックを作ってテスト（クラス名がハードコーディングされている場合） # use Aaa\\ClassA; use Bbb\\ClassB; use Mockery; // Omitted /** * Test using a mock of public method if a class name is hard coded * * @covers Aaa\\ClassA::method1ClassA * @runInSeparateProcess * @preserveGlobalState disabled * @return void */ public function testSampleMethod(): void { $mockClassB = Mockery::mock(\u0026#39;overload:\u0026#39; . ClassB::class); $mockClassB-\u0026gt;shouldReceive(\u0026#39;method1ClassB\u0026#39;)-\u0026gt;andReturn(\u0026#39;some value\u0026#39;); $classA = new ClassA(); $classA-\u0026gt;method1ClassA(); } 自クラスのpublicメソッドのモックを作ってテスト # use Aaa\\ClassA; use Mockery; // Omitted /** * Test using a mock of public method of the class itself * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $partialMockClassA = Mockery::mock(ClassA::class)-\u0026gt;makePartial(); $partialMockClassA-\u0026gt;shouldReceive(\u0026#39;method2ClassA\u0026#39;)-\u0026gt;andReturn(\u0026#39;some value\u0026#39;); $partialMockClassA-\u0026gt;method1ClassA(); } 依存クラスのコンストラクタ呼び出しをモックしてテスト # namespace Aaa; use Bbb\\ClassB; // Omitted class ClassA { public function method1ClassA() { $classB = $this-\u0026gt;newClassB(); // Omitted } /** * Wrap the instance generation process because the mock of the constructor cannot be created * コンストラクタのモックは作れないのでインスタンス生成処理をラップする */ public function newClassB(): ClassB { return new ClassB(); } } use Aaa\\ClassA; use Bbb\\ClassB; use Mockery; // Omitted /** * Mock constructor call of a dependent class and test * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $mockClassB = Mockery::mock(ClassB::class); $partialMockClassA = Mockery::mock(ClassA::class)-\u0026gt;makePartial(); $partialMockClassA-\u0026gt;shouldReceive(\u0026#39;newClassB\u0026#39;)-\u0026gt;andReturn($mockClassB); $partialMockClassA-\u0026gt;method1ClassA(); } チェインしたpublicメソッドのモックを作ってテスト # チェーンしたメソッドが引数をとる場合は1つずつ Mockery でモック化する必要あり\nuse Aaa\\ClassA; use Bbb\\ClassB; use Mockery; // Omitted /** * Test using a mock of chained public method * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $mockClassB = Mockery::mock(ClassB::class); $mockClassB-\u0026gt;shouldReceive(\u0026#39;method1ClassB-\u0026gt;method2ClassB\u0026#39;)-\u0026gt;andReturn(\u0026#39;some value\u0026#39;); $classA = new ClassA($mockClassB); $classA-\u0026gt;method1ClassA(); } [Laravel] ファサードのpublicメソッドのモックを作ってテスト # use Aaa\\ClassA; use Fff\\FacadeA; use Mockery; // Omitted /** * Test using a mock of a public method of Laravel Facade * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { FacadeA::shouldReceive(\u0026#39;method1FacadeA\u0026#39;)-\u0026gt;andReturn(\u0026#39;some value\u0026#39;); $classA = new ClassA(); $classA-\u0026gt;method1ClassA(); } [Laravel] Eloquentのpublicメソッドのモックを作ってテスト # use Aaa\\ClassA; use Eee\\EloquentA; use Mockery; // Omitted /** * Test using a mock of a public method of Laravel Eloquent * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $mockEloquentA = Mockery::mock(EloquentA::class); $mockEloquentA-\u0026gt;shouldReceive(\u0026#39;method1EloquentA\u0026#39;)-\u0026gt;andReturn(\u0026#39;some value\u0026#39;); $classA = new ClassA($mockEloquentA); $classA-\u0026gt;method1ClassA(); } [Laravel] Eloquentのpublicプロパティのモックを作ってテスト # use Aaa\\ClassA; use Eee\\EloquentA; use Mockery; // Omitted /** * Test using a mock of a public property of Laravel Eloquent * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $mockEloquentA = Mockery::mock(EloquentA::class)-\u0026gt;makePartial(); $mockEloquentA-\u0026gt;property1EloquentA = \u0026#39;some value\u0026#39;; $classA = new ClassA($mockEloquentA); $classA-\u0026gt;method1ClassA(); } private/protected # private/protectedメソッドをテスト # use Aaa\\ClassA; use ReflectionMethod; // Omitted /** * Test private/protected methods * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $classA = new ClassA(); $reflectionMethod1ClassA = new ReflectionMethod($classA, \u0026#39;method1ClassA\u0026#39;); $reflectionMethod1ClassA-\u0026gt;setAccessible(true); $reflectionMethod1ClassA-\u0026gt;invoke($classA); } private/protectedプロパティの値を書き換えてテスト # use Aaa\\ClassA; use ReflectionClass; // Omitted /** * Rewrite private/protected property value and test * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $classA = new ClassA(); $reflectionClassA = new ReflectionClass($classA); $reflectionProperty1ClassA = $reflectionClassA-\u0026gt;getProperty(\u0026#39;property1ClassA\u0026#39;); $reflectionProperty1ClassA-\u0026gt;setAccessible(true); $reflectionProperty1ClassA-\u0026gt;setValue($classA, \u0026#39;some value\u0026#39;); $classA-\u0026gt;method1ClassA(); } private/protectedプロパティの値をテスト # use Aaa\\ClassA; use ReflectionClass; // Omitted /** * Test private/protected property value * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $classA = new ClassA(); $classA-\u0026gt;method1ClassA(); $reflectionClassA = new ReflectionClass($classA); $reflectionProperty1ClassA = $reflectionClassA-\u0026gt;getProperty(\u0026#39;property1ClassA\u0026#39;); $reflectionProperty1ClassA-\u0026gt;setAccessible(true); $valueReflectionProperty1ClassA = $reflectionProperty1ClassA-\u0026gt;getValue($classA); $this-\u0026gt;assertEquals(\u0026#39;some value\u0026#39;, $valueReflectionProperty1ClassA); } ファイル # 仮想ファイルを使ってファイルの読み書きをテスト # use Aaa\\ClassA; use org\\bovigo\\vfs\\vfsStream; // Omitted /** * Test reading and writing a file using a virtual file * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $root = vfsStream::setup(\u0026#39;root\u0026#39;); vfsStream::newFile(\u0026#39;file\u0026#39;)-\u0026gt;at($root)-\u0026gt;setContent(\u0026#39;some contents\u0026#39;); $path = vfsStream::url(\u0026#39;root/file\u0026#39;); $classA = new ClassA($path); $classA-\u0026gt;method1ClassA(); } private や public のメソッドやプロパティを扱う便利クラス # \u0026lt;?php namespace Foo\\Bar\\Tests; use PHPUnit\\Framework\\TestCase; use ReflectionClass; use ReflectionMethod; /** * Base class for unit tests */ class BaseTestCase extends TestCase { /* Run a private or protected function with params. * * @param object $instance * @param string $name * @param array $params * @return mixed */ protected function runNonPublicMethod(object $instance, string $name, array $params = []): mixed { $method = $this-\u0026gt;enableNonPublicMethod($instance, $name); return $method-\u0026gt;invokeArgs($instance, $params); } /* Enable a private or protected function * * @param object $instance * @param string $name * @return ReflectionMethod $method */ protected function enableNonPublicMethod(object $instance, string $name): ReflectionMethod { $reflection = new ReflectionClass($instance); $method = $reflection-\u0026gt;getMethod($name); $method-\u0026gt;setAccessible(true); return $method; } /* Get a private or protected property * * @param object $instance * @param string $name * @return mixed */ protected function getNonPublicProperty(object $instance, string $name): mixed { $property = $this-\u0026gt;enableNonPublicProperty($instance, $name); return $property-\u0026gt;getValue($instance); } /* Set a private or protected property * * @param object $instance * @param string $name * @param mixed $value * @return mixed */ protected function setNonPublicProperty(object $instance, string $name, $value): void { $property = $this-\u0026gt;enableNonPublicProperty($instance, $name); $property-\u0026gt;setValue($instance, $value); } /* Enable a private or protected property * * @param object $instance * @param string $name * @return object */ protected function enableNonPublicProperty(object $instance, string $name): ReflectionProperty { $reflectionClass = new ReflectionClass($instance); $property = $reflectionClass-\u0026gt;getProperty($name); $property-\u0026gt;setAccessible(true); return $property; } } その他 # 無名クラスを使ってトレイトをテスト # トレイトとは\nhttps://www.php.net/manual/ja/language.oop5.traits.php\nPHPのような単一継承言語でコードを再利用するための仕組みの一つ。\nトレイトは単にいくつかの機能をまとめるためだけのもの。\nトレイト自身のインスタンスを作成することはできない。\nuse Aaa\\ClassA; use Ttt\\TraitA; // Omitted /** * Test a trait using an anonymous class * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $classUsingTrait = new class($property) { use TraitA; public function __construct($property) { $this-\u0026gt;method1TraitA($property); } }; $classUsingTrait-\u0026gt;method2TraitA(); } References # PHPUnit のイディオム https://qiita.com/ngmy/items/08af9f74f6308ef6281c PHPUnit のアノテーション https://phpunit.readthedocs.io/ja/latest/annotations.html Mockery のクラス指定 https://qiita.com/prex-uchida/items/7563f7f33153da463802 Mockery https://qiita.com/ttn_tt/items/a35638ab12d4dc2ea488 Mockery（モック化用ライブラリ） https://github.com/mockery/mockery vfsStream（ファイル操作用ライブラリ） https://github.com/bovigo/vfsStream Trait https://www.php.net/manual/ja/language.oop5.traits.php "},{"id":49,"href":"/postgresql/","title":"PostgreSQL","section":"Home","content":" PostgreSQL # PostgreSQL Basic "},{"id":50,"href":"/python/","title":"Python","section":"Home","content":" Python # Python Basic Python OCR "},{"id":51,"href":"/mac/setting/","title":"Mac Setting","section":"Mac","content":" Mac Setting # Safari # Empty Caches # Safari \u0026gt; Preferences\nAdvanced Check Show Develop menu in menu bar Develop \u0026gt; Empty caches\nProxy Settings # Switch On\nSafari \u0026gt; Preferences\nAdvanced\nChange Settings... Select Proxies tab\nCheck Web Proxy (HTTP) and enter proxy domain : proxy port Check Secure Web Proxy (HTTP) and enter proxy domain : proxy port Click OK Click Apply\nRestart Safari\n(It will take some time for the change to take effect)\nBox Drive # How to display Box Drive context menu System Preferences \u0026gt; Extensions Checl Box \u0026gt; Finder Extensions Siri # How to disable Siri # https://pc-karuma.net/mac-touch-bar-delete-siri-button/\nPreview # https://support.apple.com/en-us/guide/preview/prvw15636/mac\nHow to use two Mac apps side by side in Split View # https://support.apple.com/en-us/HT204948\nPort # How to find a process on a specific port.\n$ sudo lsof -i:\u0026lt;Port Number\u0026gt; e.g.\n$ sudo lsof -i:5432 How to kill the process running on the specific port.\n$ kill -9 \u0026lt;PID\u0026gt; "},{"id":52,"href":"/shellscript/","title":"Shellscript","section":"Home","content":" Shellscript # Shellscript Memo "},{"id":53,"href":"/git/tool/","title":"Git Tool","section":"Git","content":" Git Tool # git-secrets # git-secrets scans a git repository, finds credential information and prevents them from being committed. References # https://github.com/awslabs/git-secrets https://blog.katsubemakito.net/git/git-secrets Install # macOS\n$ brew install git-secrets $ git clone https://github.com/awslabs/git-secrets.git $ cd git-secrets $ make install Basic usage # Set git-secrets to a git repository\n$ git init $ git secrets --install Check commit history\n$ git secrets --scan-history For AWS\n$ git secrets --register-aws git-split-diffs # Display the results of the git diff command side by side like Github. References # https://genzouw.com/entry/2021/05/24/104932/2640/ Precondition # npm or yarn Install # If you use npm\n$ npm install -g git-split-diffs or, if you use yarn\n$ yarn global add git-split-diffs Add configuration of git-split-diffs to .gitconfig # $ git config --global core.pager \u0026#34;git-split-diffs --color | less -RFX\u0026#34; Check # $ git log -p $ git diff \u0026lt;branch A\u0026gt; \u0026lt;branch B\u0026gt; Additional info # If you want to use light theme\n$ git config --global split-diffs.theme-name light If you want to use dark theme\n$ git config --global split-diffs.theme-name dark Adjust the minimum display width if you want to display the difference side by side even if the terminal display is narrow.\n$ git config --global split-diffs.min-line-width 40 "},{"id":54,"href":"/tool/","title":"Tool","section":"Home","content":" Tool # Hugo Jenkins VS Code Excel MailCatcher "},{"id":55,"href":"/linux/ubuntu/","title":"Ubuntu","section":"Linux","content":" Ubuntu # apt-get # command description apt-get install \u0026lt;package\u0026gt; 指定パッケージのインストールと更新 apt-get update パッケージ・リストを更新 apt-get upgrade インストール済パッケージを更新 apt-get dist-upgrade 追加で必要なパッケージをインストール、不要パッケージを削除、ディストリビューションのバージョンを更新(セキュリティパッチをあてる場合などにも使用) apt-get remove \u0026lt;package\u0026gt; 指定パッケージを削除 apt-get autoremove 未使用パッケージを削除 (設定ファイルは削除しない) apt-get purge \u0026lt;package\u0026gt; 未使用パッケージを削除 (設定ファイルも削除する) apt-get clean パッケージをインストールした際のアーカイブ・ファイル(*.tar.gzなど)を削除 apt-get autoclean 未使用パッケージのアーカイブ・ファイルを削除 apt-cache # command description apt-cache search \u0026lt;query\u0026gt; パッケージを検索 (パッケージ名と説明が \u0026lt;query\u0026gt; の対象) apt-cache policy \u0026lt;query\u0026gt; パッケージを検索 (インストール可能なバージョンの表示) apt-cache madison \u0026lt;query\u0026gt; パッケージを検索 (インストール可能なバージョンの一覧) dpkg # command description dpkg -l \u0026lt;package\u0026gt; インストール済パッケージの一覧を表示、\u0026lt;package\u0026gt; を省略した場合 全パッケージを表示 dpkg -L \u0026lt;package\u0026gt; インストール時のファイルの一覧を表示 References # Ubuntu apt-get まとめ "},{"id":56,"href":"/tool/vscode/","title":"VS Code","section":"Tool","content":" VS Code (Visual Studio Code) # 設定 # 設定を開く # Macの場合：Code \u0026gt; Preferences... \u0026gt; Settings ファイルを常に新しいタブで開く方法 # workbench.editor.enablePreview　を検索しチェックを解除 プロジェクトを常に新しいウィンドウで開く方法 # window.openFoldersInNewWindow を検索し on を選択 code command # How to enable code command # Use shortcut ⇧ ⌘ p (shift + command + p) Select Shell Command: Install command from PATH High use commands # Description Command Start VS Code code Open a directory with VS Code code . Open a file with VS Code code foo.txt Compare 2 files with VS Code code -d foo.txt bar.txt Display help code -h ショートカット # 開く・閉じる # 内容 Mac Windows 設定を開く command + , ctrl + , コマンドパレットを開く command + shift + p ctrl + shift + p 新しいウィンドウを開く command + shift + n ctrl + shift + n ファイル名を指定して開く command + p ctrl + p アクティブなファイルを閉じる command + w ctrl + w 全てのファイル閉じる command + k w ctrl + k w 拡大・縮小 # 内容 Mac Windows 拡大(ズームイン) command + = ctrl + = 縮小(ズームアウト) command + - ctrl + - 全画面表示 command + control + - F11 コピー・切り取り・削除 # 内容 Mac Windows 行末尾のスペースを削除 command + k x ctrl + k x 行のインデントを追加 command + ] ctrl + ] 行のインデントを削除 command + [ ctrl + [ 行のコピー(未選択時) command + c ctrl + c 行の切り取り(未選択時) command + x ctrl + x ファイルの相対パスをコピー shift + option + command + c - ファイルの絶対パスをコピー option + command + c - コメント化/コメント解除 option + shift + a ctrl + / 選択 # 内容 Mac Windows 矩形選択 shift + option + マウス・ドラッグ shift + alt + マウス・ドラッグ 検索 # 内容 Mac Windows プロジェクト全体を検索 command + shift + f ctrl + shift + f 移動 # 内容 Mac Windows カーソル行を下に移動 option + ↓ alt + ↓ カーソル行を下に移動 option + ↑ alt + ↑ ファイル履歴を表示し移動 control + tab ctrl + tab サイドバーにフォーカスを移動 command + 0 ctrl + 0 指定行に移動 control + g ctrl + g 最後に編集した箇所に移動 command + k q ctrl + k q 対応するカッコに移動 command + shift + \\ ctrl + shift + ¥ 前に移動(戻る) option + ← alt + ← 次に移動(進む) option + → alt + → 参考 # https://qiita.com/TakahiRoyte/items/cdab6fca64da386a690b "},{"id":57,"href":"/todo/work/","title":"Work","section":"Todo","content":" Condition # Full remote work Flextime or Super flex system Second job (expanding experience) Tool # Curved screen display 34inch Mac Book Pro IntelliJ Elevating desk (FlexiSpot etc) Gaming chair Tech stack # Go, Python/Django, Dart/Flutter, Kotlin/Spring Boot BigQuery, MySQL, PostgreSQL, Redis Typescript, React Docker, Kubernetes, istio, envoy Grafana, Prometheus, Elasticsearch, Fluentd, Kibana GCP, AWS, Azure CircleCI, GitHub Actions, Terraform "}]