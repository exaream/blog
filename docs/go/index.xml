<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Tech</title><link>https://exaream.dev/go/</link><description>Recent content in Go on Tech</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>exaream</copyright><lastBuildDate>Wed, 01 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://exaream.dev/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Check List</title><link>https://exaream.dev/go/check-list/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://exaream.dev/go/check-list/</guid><description>Go Check Sheet # 設計 # パッケージ管理 # Go Modules (go.mod) Workspace mode https://zenn.dev/kimuson13/articles/go-workspace-mode-impressions 設計 # 分割 パッケージを適切に分割 ファイルを適切に分割 命名 大文字なしの1単語 UpperCamelCase, snake_cake, chain-case は NG 具体性のない命名は NG e.g. common や util などは NG fileutil のように具体性がある命名は許容範囲 標準/準標準パッケージと同じ名前は避けること 気持ちの良い命名は良い設計ができた証拠 冗長な命名は設計がうまくいっていない証拠 適切に型定義すること 多くの引数を引き回さないこと 何でもかんでも構造体にしないこと e.g. go/token.Pos int ソースコード上の場所を表す型　大小を演算子で比較できる token.FileSet は構造体　構造体ではメソッド化が必要になるため面倒 型同士がお互いを知りすぎていると密結合になるため注意 過度の抽象化をおこなわないこと メソッドの数が多すぎるインターフェイス テストの事情を背負いすぎているインターフェイス internal ディレクトリ 公開したくない機能を隠蔽 internal 以下は内部パッケージ internal ディレクトリ以下のパッケージのみ参照可 internal 以下でエクスポートしても外のパッケージから参照不可 大規模データの入力を考慮 処理できる範囲を仕様として明確化 大きすぎる入力はエラーとして処理 (大規模データの入力を想定せずに落ちるのはNG) メモリが溢れないこと 処理に時間がかかりすぎないこと 再帰呼び出ししすぎてスタックオーバーフローをおこさないこと テスト可用性 パッケージ変数は極力使用しないこと t.</description></item><item><title>Go Link</title><link>https://exaream.dev/go/link/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.dev/go/link/</guid><description>Go Link # Video # Go Conference # 2022 Spring Track A 2022 Spring Track B 2021 Autumn Track A 2021 Autumn Track B 2021 Spring Track A 2021 Spring Track B Article # Go Github Go Spec Go Release Go Download Go の命名規則 Goのロギングライブラリ 2021年冬 私がGoのソースコードを読むときのTips Goの標準ライブラリのコードリーディングのすすめ インタフェースの実装パターン Goのinterfaceをデータ構造から理解する Go First Step The Go Playground A Tour of Go Effective Go Packages Project Layout (Directory Structure) Error handling and Go Context go-safeweb SQL Injection, XSS, XSRF etc.</description></item><item><title>Go Test</title><link>https://exaream.dev/go/test/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.dev/go/test/</guid><description>Go Test # Unit Test # Run # Run all unit tests # $ go test ./... Show detailed information
$ go test ./... -v Disable test cache
$ go test ./... -count=1 Run a method of a unit test # $ go test ./mypkg/ -run TestSample Coverage # Output coverage to a terminal
$ go test -cover ./... Output the coverage profile to a file and view it in a browser</description></item></channel></rss>