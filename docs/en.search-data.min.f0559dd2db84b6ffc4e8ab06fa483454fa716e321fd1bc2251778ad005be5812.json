[{"id":0,"href":"/tech-blog/python/basic/","title":"Python Basic","section":"Python","content":"Basic #  Argument #  sys.argv #  sample.py\nimport sys args = sys.argv print(args) print(args[1]) print(args[2]) Run\n$ python simple.py aaa 123 [\u0026#39;sample.py\u0026#39;, \u0026#39;aaa\u0026#39;, \u0026#39;123\u0026#39;] aaa argparse #  Simple sample #  sample.py\nimport argparse description = \u0026#39;A description of this program.\u0026#39; parser = argparse.ArgumentParser(description=description) parser.add_argument(\u0026#39;foo\u0026#39;, type=str, help=\u0026#39;First argument.\u0026#39;) parser.add_argument(\u0026#39;bar\u0026#39;, type=int, help=\u0026#39;Second argument.\u0026#39;) args = parser.parse_args() print(args) print(args.foo) print(args.bar) Run\n$ python sample.py aaa 123 Namespace(foo=\u0026#39;aaa\u0026#39;, bar=123) aaa 123 Check help using -h or ---help\n$ python sample.py --help usage: sample.py [-h] foo bar A description of this program. positional arguments: foo First argument. bar Second argument. optional arguments: -h, --help show this help message and exit Advanced sample #  sample.py\nimport argparse description = \u0026#39;A description of this program.\u0026#39; parser = argparse.ArgumentParser(description=description) help = \u0026#39;A required named argument.\u0026#39; parser.add_argument(\u0026#39;--named_arg1\u0026#39;, type=str, required=True, help=help) help = \u0026#39;An optional named argument.\u0026#39; parser.add_argument(\u0026#39;--named_arg2\u0026#39;, type=int, help=help) help = \u0026#39;True is specified automatically if you set this.\u0026#39; parser.add_argument(\u0026#39;--flag1\u0026#39;, action=\u0026#39;store_true\u0026#39;, help=help) help = \u0026#39;False is specified automatically if you set this.\u0026#39; parser.add_argument(\u0026#39;--flag2\u0026#39;, action=\u0026#39;store_false\u0026#39;, help=help) args = parser.parse_args() print(args) print(args.named_arg1) print(args.named_arg2) print(args.flag1) print(args.flag2) Run\n$ python sample.py --named_arg1 aaa --named_arg2 123 --flag1 --flag2 Namespace(named_arg1=\u0026#39;aaa\u0026#39;, named_arg2=123, flag1=True, flag2=False) aaa 123 True False References #   https://docs.python.org/ja/3.9/library/argparse.html https://qiita.com/kzkadc/items/e4fc7bc9c003de1eb6d0 https://www.delftstack.com/ja/howto/python/python-get-filename-without-extension-from-path/ https://note.nkmk.me/python-os-basename-dirname-split-splitext/  "},{"id":1,"href":"/tech-blog/python/ocr/","title":"Python OCR","section":"Python","content":"Python OCR #  Overview #  How to get text from an image using Tesseract which is an OCR (Optical Character Recognition) engine and Python.\nPrecondition #  Version #   macOS: Big Sur 11.4 Docker: 20.10.5, build 55c4c88 docker-compose: 1.29.0, build 07737305  Simple sample #  Version #   Debian GNU/Linux: 10 (buster) Python: 3.9.6 pyocr: 0.8 opencv-python: 4.5.3.56  Directory structure #  python-ocr/ ├── README.md ├── img │ ├── .gitkeep │ └── sample.jpg ├── setup │ ├── Dockerfile │ └── docker-compose.yml └── simple.py Source #   https://github.com/exaream/python-ocr  Dockerfile\nFROMpython:latestRUN apt-get updateRUN apt-get -y install \\  tesseract-ocr* \\  libgl1-mesa-dev \\  vimRUN apt-get cleanRUN pip install --upgrade pipRUN pip install \\  pillow \\  pyocr \\  # cv2 opencv-python \\  opencv-contrib-pythonWORKDIR/opt/ENTRYPOINT [\u0026#34;/usr/bin/tail\u0026#34;, \u0026#34;-f\u0026#34;, \u0026#34;/dev/null\u0026#34;]docker-compose.yml\nversion: \u0026#39;3\u0026#39; services: python-ocr: build: context: ../ dockerfile: setup/Dockerfile container_name: python-ocr volumes: - ../:/opt simple.py\nimport os import pyocr import sys from PIL import Image if len(sys.argv) != 2: print(\u0026#34;Please input an image file name in the first argument.\u0026#34;) exit() img_dir = os.path.dirname(__file__) + \u0026#39;/img/\u0026#39; img_file_name = os.path.basename(sys.argv[1]) img_path = img_dir + img_file_name img_obj = Image.open(img_path) builder = pyocr.builders.TextBuilder(tesseract_layout = 6) ocr_engine = pyocr.get_available_tools()[0] langs = ocr_engine.get_available_languages() text = ocr_engine.image_to_string(img_obj, lang=\u0026#39;jpn\u0026#39;, builder=builder) print(langs) print(text) Preparation #  pytyon-ocr directory on your host machine\ndocker-compose -f setup/docker-compose.yml up -d --build docker exec -it python-ocr bash Run #  docker container\ncd /opt/ python simple.py sample.jpg Advanced sample #   grayscale threshold processing. named argument  Version #   Same as \u0026ldquo;simple sample\u0026rdquo; above.  Directory structure #  python-ocr/ ├── README.md ├── img │ ├── .gitkeep │ └── sample.jpg ├── library │ ├── base.py │ ├── cv.py │ └── ocr.py ├── main.py ├── setup │ ├── Dockerfile │ └── docker-compose.yml └── simple.py Source #   https://github.com/exaream/python-ocr  base.py\nimport os from typing import NoReturn class Base: arg_parser = None img_dir = \u0026#39;\u0026#39; def __init__(self) -\u0026gt; NoReturn: self.set_img_dir() def get_file_name(self, file_path: str) -\u0026gt; str: return os.path.basename(file_path) # Get file name without extension. def get_file_stem(self, file_path: str) -\u0026gt; str: file_name = self.get_file_name(file_path) return os.path.splitext(file_name)[0] def is_file(self, file_path: str) -\u0026gt; bool: return os.path.isfile(file_path) def set_img_dir(self, img_dir: str = \u0026#39;\u0026#39;) -\u0026gt; NoReturn: if img_dir != \u0026#39;\u0026#39;: self.img_dir = img_dir else: dir = os.path.dirname(os.path.abspath(__file__)) + \u0026#39;/../img/\u0026#39; self.img_dir = os.path.abspath(dir) def get_img_dir(self) -\u0026gt; str: return self.img_dir cv.py\nimport cv2 # OpenCV (Open Source Computer Vision Library) from typing import NoReturn class ComputerVision: def get_obj(self, img_path: str) -\u0026gt; cv2: return cv2.imread(img_path) def get_grayscale_obj(self, obj: cv2) -\u0026gt; cv2: return cv2.cvtColor(obj, cv2.COLOR_BGR2GRAY) # Thresholding # Convert colors other than black (if a RBG value is greater than a threshold) to white RGB(255,255,255). def get_threshold_obj(self, obj: cv2, threshold: int = 170) -\u0026gt; cv2: return cv2.threshold(obj, threshold, 255, cv2.THRESH_BINARY)[1] def write_obj_to_img(self, obj: cv2, img_path: str) -\u0026gt; NoReturn: cv2.imwrite(img_path, obj) ocr.py\nimport pyocr from PIL import Image from pyocr.builders import TextBuilder from typing import NoReturn class OpticalCharacterRecognition: ocr_engine = None def __init__(self) -\u0026gt; NoReturn: self.__set_ocr_engine() def get_img_obj(self, img_path: str) -\u0026gt; Image: return Image.open(img_path) def get_available_languages(self) -\u0026gt; list: return self.ocr_engine.get_available_languages() def get_text_by_img_obj(self, img_obj: Image, builder: TextBuilder, lang: str = \u0026#39;eng\u0026#39;) -\u0026gt; str: return self.ocr_engine.image_to_string(img_obj, lang=lang, builder=builder) def get_builder(self, tesseract_layout: int = 3) -\u0026gt; TextBuilder: return TextBuilder(tesseract_layout=tesseract_layout) def __set_ocr_engine(self) -\u0026gt; NoReturn: self.ocr_engine = pyocr.get_available_tools()[0] main.py\nimport argparse from library import base, cv, ocr # Initialize classes. sample_base = base.Base() sample_cv = cv.ComputerVision() sample_ocr = ocr.OpticalCharacterRecognition() langs = sample_ocr.get_available_languages() # Get arguments. arg_parser = argparse.ArgumentParser() arg_parser.add_argument(\u0026#39;--img\u0026#39;, type=str, required=True) args = arg_parser.parse_args() # Set image paths. img_file_name = sample_base.get_file_name(args.img) img_file_stem = sample_base.get_file_stem(args.img) img_dir = sample_base.get_img_dir() + \u0026#39;/\u0026#39; img_org_path = img_dir + img_file_name img_gray_path = img_dir + img_file_stem + \u0026#39;-gray.png\u0026#39; img_threshold_path = img_dir + img_file_stem + \u0026#39;-threshold.png\u0026#39; if sample_base.is_file(img_org_path) == False: print(\u0026#34;The file doesn\u0026#39;t exist: \u0026#34; + img_org_path) exit() # Get CV (Computer Vision Library) object. cv_obj = sample_cv.get_obj(img_org_path) # Apply grayscale to the image. cv_obj = sample_cv.get_grayscale_obj(cv_obj) sample_cv.write_obj_to_img(cv_obj, img_gray_path) # Apply Threshold processing to the image. cv_obj = sample_cv.get_threshold_obj(cv_obj) sample_cv.write_obj_to_img(cv_obj, img_threshold_path) # Get text by the processed image. img_obj = sample_ocr.get_img_obj(img_threshold_path) builder = sample_ocr.get_builder() text = sample_ocr.get_text_by_img_obj(img_obj, builder=builder, lang=\u0026#39;jpn\u0026#39;) print(langs) print(text) Run #  Run below if the docker container is stopped.\npytyon-ocr directory on your host machine\ndocker-compose -f setup/docker-compose.yml up -d docker exec -it python-ocr bash docker container\ncd /opt/ python main.py --img sample.jp References #   dockerhub python pyocr Tesseract tesseract-ocr  "},{"id":2,"href":"/tech-blog/infrastructure/docker/","title":"Docker","section":"Infrastructure","content":"Docker #  Stop #  Stop all containers #  docker container ps -q | xargs docker container stop or\ndocker stop $(docker ps -q) Remove #  Stop and remove all (containers, images, volumes, networks) 滅びの呪文 #  docker-compose down --rmi all --volumes --remove-orphans Remove stopped containers, untagged images, unused volumes, unused networks #  docker system prune    option description     -a 未使用のイメージを含め削除   -f 確認せず削除    docker system prune -af Remove stopped containers #  docker container prune Remove all containers #  docker container ps -aq | xargs docker container rm -f or\ndocker ps -aq | xargs docker rm -f or\ndocker rm -f $(docker ps -aq) Remove all images (after all containers were removed) #  docker images -aq | xargs docker image rm -f or\ndocker images -aq | xargs docker rmi -f or\ndocker rmi -f $(docker images -aq) Remove untagged images #  docker images -fq \u0026#34;dangling=true\u0026#34; | xargs docker image rm Remove unused volumes #  docker volume prune Remove unused networks #  docker network prune Log #  How to check log #  最新の30件を確認\ndocker logs -f --tail=30 Other #  How to mount a directory in host server #  docker run -v [absolute path in host]:[absolute path in container] [image name]:[tag] [command] References #   https://qiita.com/gold-kou/items/44860fbda1a34a001fc1  "},{"id":3,"href":"/tech-blog/tool/excel/","title":"Excel","section":"Tool","content":"Excel #  検索 #  VLOOKUP(検索値,範囲,列位置,FALSE) #  e.g.) A1 の値が sample シートの範囲(A1:A10) にある場合 B 列の値を出力\n=VLOOKUP(A1,sample!$A$1:$B$10,2,FALSE) 特定の値があるか判定 #  =IF(COUNTIF(A1:B10,\u0026#34;aaa\u0026#34;)\u0026gt;0,\u0026#34;Yes\u0026#34;,\u0026#34;No\u0026#34;) 日付・時刻 #  曜日 #  e.g.) A1 の日時を日本語の曜日の短縮形で表示。\n=TEXT(A1,\u0026#34;aaa\u0026#34;)    第2引数 description     aaaa 日本語の曜日   aaa 日本語の曜日の短縮形   dddd 英語の曜日   ddd 英語の曜日の曜日の短縮形    時間の差分 #  時間(差分が24時間未満の場合のみ) #  =TEXT(B1-A1,\u0026#34;hh:mm:ss\u0026#34;) 日数 #  =DATEDIF(A1,B1,\u0026#34;d\u0026#34;) 週数 #  =DATEDIF(A1,B1,\u0026#34;d\u0026#34;)/7 月数 #  =DATEDIF(A1,B1,\u0026#34;m\u0026#34;) 年数 #  =DATEDIF(A1,B1,\u0026#34;y\u0026#34;) ハイパーリンク #  シートへのリンク #  B1 に記載されたシート内の A1 へ移動\n=HYPERLINK(\u0026#34;#\u0026#34;\u0026amp;B1\u0026amp;\u0026#34;!A1\u0026#34;,B1) Webへのリンク #  =HYPERLINK(\u0026#34;https://sample.com/\u0026#34;,\u0026#34;Sample\u0026#34;) シート #  シート名 #  =RIGHT(CELL(\u0026#34;filename\u0026#34;,A1),LEN(CELL(\u0026#34;filename\u0026#34;,A1))-FIND(\u0026#34;]\u0026#34;,CELL(\u0026#34;filename\u0026#34;,A1))) シート名の一覧 #  1) VBA を使用\n Alt+ F11 で VBE 画面を表示 Alt を押下したまま I → M の順に押下し標準モジュールを挿入 白画面に以下を貼り付け  Sub test() Dim i As Long For i = 1 To Sheets.Count Range(\u0026#34;A\u0026#34; \u0026amp; i).Value = Worksheets(i).Name Next i End Sub Alt+ F11 で通常画面を表示 シート名の一覧を作成したいシートでAlt+ FBから マクロ を表示させ test を実行  2) 4.0マクロ関数を使用\n上部メニューの 挿入 \u0026gt; 名前 \u0026gt; 定義 から名前欄に任意の名前（仮に「シート一覧」）を記載 参照範囲欄に以下を記載し OK押下  =MID(GET.WORKBOOK(1),FIND(\u0026#34;]\u0026#34;,GET.WORKBOOK(1))+1,31)\u0026amp;T(NOW()) シート名を出力したいセルに以下を記載し下へコピー  =IF(COLUMNS(シート一覧)\u0026lt;ROW(A1),\u0026#34;\u0026#34;,INDEX(シート一覧,ROW(A1))) 隣接したセルの値に加算 #  そのセルの1つ上のセルの数字に 1 を加算 #  =MAX(INDIRECT(ADDRESS(1,COLUMN())\u0026amp;\u0026#34;:\u0026#34;\u0026amp;ADDRESS(ROW()-1,COLUMN())))+1 そのセルの左隣のセルの数字に 1 を加算 #  $A$1 の箇所に「基準になる左端のセル」を指定\n=MAX(INDIRECT(ADDRESS(ROW(),$A$1)\u0026amp;\u0026#34;:\u0026#34;\u0026amp;ADDRESS(ROW(),COLUMN()-1)))+1 その他 #  数値を漢数字に変換 #  =NUMBERSTRING(A2,1) 桁数に満たない場合 任意の文字で埋める #  e.g.) 10桁ゼロ詰め\nA1 の値が 1234 の場合, 1234aaaaaa と出力\n=A1\u0026amp;LEFT(REPT(\u0026#34;a\u0026#34;,\u0026#34;10\u0026#34;), 10-LEN(A1)) "},{"id":4,"href":"/tech-blog/vcs/git/","title":"Git","section":"Vcs","content":"Git #  References #   https://qiita.com/gold-kou/items/7f6a3b46e2781b0dd4a0 https://qiita.com/jesus_isao/items/63557eba36819faa4ad9 https://backlog.com/ja/git-tutorial/reference/ https://qiita.com/harukasan/items/9149542584385e8dea75 https://qiita.com/kawasaki_dev/items/41afaafe477b877b5b73  実用的なコマンド #  指定したフォーマットでコミット・ログを表示 #  $ git log --graph --date=iso --pretty=format:\u0026#34;[%ad] %h %an : %s\u0026#34; 特定の注釈を含むコミットを検索 #  $ git log --oneline --grep \u0026#34;\u0026lt;pattern\u0026gt;\u0026#34; コミット間の変更ファイル一覧を表示 #  $ git diff --stat \u0026lt;Commit A\u0026gt; \u0026lt;Commit B\u0026gt; ファイル名のみ表示する場合\n$ git diff --stat --name-only \u0026lt;Commit A\u0026gt; \u0026lt;Commit B\u0026gt; タグの一覧を表示 #  $ git tag -n Git 設定 #  バージョンを確認 #  $ git --version 設定の一覧を表示 #  設定適用範囲\n system: システム全体に適用 global: ユーザー単位で適用（ユーザーのホームディレクトリ直下の設定ファイルを参照） local: Gitリポジトリ単位で適用（.git ディレクトリ直下の設定ファイルを参照）  $ git config --system --list $ git config --global --list $ git config --local --list 適用範囲を指定しない場合 --local と同様に Gitリポジトリ内の設定を表示\n$ git config --list Gitリポジトリの管理するディレクトリ外で以下を実行した場合 エラーが発生\n$ git config --local --list fatal: --local can only be used inside a git repository --list オプションの短縮版\n$ git config --system -l $ git config --global -l $ git config --local -l 設定ファイルを直接編集 #  $ git config --system --edit $ git config --global --edit $ git config --local --edit --edit オプションの短縮版\n$ git config --system -e $ git config --global -e $ git config --local -e どの設定ファイルに記載された設定が適用されているか確認 #  $ git config --show-origin user.name $ git config --show-origin user.email $ git config --show-origin core.autocrlf ユーザー名/メールアドレスを設定 #   \u0026ndash;global オプションを付けないと、該当のリポジトリのみ有効な設定になる  $ git config --global user.name \u0026lt;username\u0026gt; $ git config --global user.email \u0026lt;mailaddress\u0026gt; 出力をカラーリングするよう設定 #  $ git config --global color.ui auto コマンドにエイリアスを設定 #  $ git config --global alias.\u0026lt;aliasname\u0026gt; \u0026lt;commandname\u0026gt; 不要なファイルを管理対象外 #   .gitignore に記載されたファイル名は、Gitの管理対象外 .gitignore ファイル自体をコミットしておくこと  $ echo \u0026lt;file name\u0026gt; \u0026gt;\u0026gt; .gitignore 空ディレクトリを管理対象 #   Gitでは空ディレクトリは管理対象外 空ディレクトリを管理対象にする場合、任意のファイルを配置 慣例的に .gitkeep というファイルを使用  $ cd \u0026lt;directory name\u0026gt; $ touch .gitkeep プロキシサーバを経由してhttp接続 #  $ git config --global http.proxy \u0026lt;プロキシサーバのアドレス\u0026gt;:\u0026lt;プロキシサーバのポート番号\u0026gt;  .gitconfig ファイルの http の項目に次の設定を直接追加することもできる  [http]proxy = \u0026lt;プロキシサーバのアドレス\u0026gt;:\u0026lt;プロキシサーバのポート番号\u0026gt;ユーザ認証の必要なプロキシサーバを経由してhttp接続 #  $ git config --global http.proxy http://\u0026lt;ユーザ名\u0026gt;:\u0026lt;パスワード\u0026gt;@\u0026lt;プロキシサーバのアドレス\u0026gt;:\u0026lt;プロキシサーバのポート番号\u0026gt;  .gitconfig ファイルの http の項目に次の設定を直接追加することもできる  [http]proxy = http://\u0026lt;ユーザ名\u0026gt;:\u0026lt;パスワード\u0026gt;@\u0026lt;プロキシサーバのアドレス\u0026gt;:\u0026lt;プロキシサーバのポート番号\u0026gt;基本操作 #  リポジトリを作成 #  $ git init ファイルやディレクトリをインデックスに登録 #  $ git add . $ git add *.txt インデックスに追加されたファイルをコミット #  $ git commit 変更されたファイルの一覧を表示 #  $ git status 変更されたファイルの差分を表示 #  $ git diff コミットログを表示 #  $ git log コミットログを表示 #  git log コマンドで参照したコミットやHEADを指定\n$ git show \u0026lt;commit\u0026gt; ファイルやディレクトリ名の変更や移動 #  $ git mv \u0026lt;old file name\u0026gt; \u0026lt;new file name\u0026gt; 管理対象ではないファイルを削除 #   -n ： 削除されるファイルを確認 -f ： 実際にファイルを削除 -x ： .gitignore に指定されたファイルも削除  $ git clean 手元で変更したインデックスに登録されていないファイルを元に戻す #  $ git checkout -- \u0026lt;file\u0026gt; インデックスに登録したファイルの取り消し #  $ git reset HEAD -- \u0026lt;file\u0026gt; 以前にコミットしたことのあるファイルだけをすべてインデックスに登録 #  $ git add -u コミットログ操作 #  コミットログを表示 #  $ git log 各コミットログを1行で表示\n$ git log --oneline git log のオプション #     オプション 内容     -n 件数を指定して表示   \u0026ndash;relative-date 相対フォーマット (“3 days ago” など) で日付を表示   \u0026ndash;oneline 1行で表示   \u0026ndash;pretty フォーマットを指定して表示. オプションは oneline, short, full, fuller, fomat(独自指定)   \u0026ndash;graph ブランチやマージの履歴をアスキーグラフで表示    git log --pretty のフォーマット #     置換文字列 内容     %H コミットのハッシュ   %h コミットのハッシュ (短縮版)   %T ツリーのハッシュ   %t ツリーのハッシュ (短縮版)   %P 親のハッシュ   %p 親のハッシュ (短縮版)   %an Author の名前   %ae Author のメールアドレス   %ad Author の日付 (-date= オプションに従った形式)   %ar Author の相対日付   %cn Committer の名前   %ce Committer のメールアドレス   %cd Committer の日付   %cr Committer の相対日付   %s 件名    git log の日付フォーマット #     フォーマット 内容     relative 相対時間 (3 days ago)   local ローカルタイムゾーン   iso ISO 8601 フォーマット   rfc RFC 2822 フォーマット   short YYYY-MM-DD   raw %s %z   default 標準    直前のコミットの内容を修正 #  現在のブランチの先頭のコミットに上書き 入力画面が表示されるのでコミットログを確認して保存\n$ git commit --amend 入力画面が表示されず即上書き保存\ngit commit --amend --no-edit 直前のコミットのコメントだけを修正 #  インデックスにファイルを登録していない状態で再コミット\n入力画面が表示されるのでコメントを修正して保存\n$ git commit --amend 過去のコミットの内容を修正 #   指定したコミットより後のコミットを指定すると、コミットの一覧が表示される その中から修正したいコミットを見つけてその行の pick の文字を edit に変更して保存・終了する  $ git rebase -i \u0026lt;commit\u0026gt; 修正したいファイルを編集、保存した後に --amend オプションを指定してコミット  $ git commit --amend --continue オプションを指定し rebase を実行  $ git rebase --continue 過去のコミットのコメントを修正 #   指定したコミットより後のコミットを指定すると、コミットの一覧が表示される その中から修正したいコミットを見つけてその行の pick の文字を edit に変更して保存・終了する  $ git rebase -i \u0026lt;commit\u0026gt; 修正したいファイルを編集、保存した後に --amend オプションを指定してコミット コメントの入力画面が表示されるので、コメントを修正  $ git commit --amend --continue オプションを指定し rebase を実行  $ git rebase --continue rebase を途中で中止 #  $ git rebase --abort HEADの移動履歴を表示 #  過去に HEAD が指していたコミットの一覧を表示(削除したコミットや rebase 等によってまとめられたコミットなども表示)\n$ git reflog ブランチの先頭の移動履歴 #  過去にそのブランチの先頭が指していたコミットの一覧\n$ git reflog \u0026lt;branch name\u0026gt; 直前のコミットを取り消し #  $ git reset --hard HEAD~ rebase を取り消し #   HEADの移動履歴から rebase 直前のコミットを確認  $ git reflog 見つけたハッシュ値を \u0026lt;commit\u0026gt; で指定して reset を実行  $ git reset --hard \u0026lt;commit\u0026gt; 直前の reset を取り消し #  reset 前のコミットは ORIG_HEAD という名前で参照できるので、これを指定して reset を実行\n$ git reset --hard ORIG_HEAD ブランチを間違えてしまったコミットを移動 #  \u0026lt;commit\u0026gt; で指定したコミットを現在のブランチにコピー\n$ git cherry-pick \u0026#34;\u0026lt;commit\u0026gt;\u0026#34; 特定のコメントを含むコミットを検索 #  \u0026lt;pattern\u0026gt; で指定した文字がコミットログに含まれるコミット\n$ git log --grep \u0026#34;\u0026lt;pattern\u0026gt;\u0026#34; ブランチ操作 #  ローカル・ブランチの一覧を表示 #  $ git branch リモート・ブランチも含めた一覧を表示 #  $ git -a branch ブランチを作成 #  $ git branch \u0026lt;branch name\u0026gt; ブランチ名を変更 #  $ git branch -m \u0026lt;old branch\u0026gt; \u0026lt;new branch\u0026gt; ブランチを削除 #  $ git branch -d \u0026lt;branch name\u0026gt; HEAD にマージされていないコミットがあるブランチを強制的に削除\n$ git branch -D -d \u0026lt;branch name\u0026gt; ブランチを切り替え #  $ git checkout \u0026lt;branch\u0026gt; ブランチの作成と切り替えを一度に実行\n$ git checkout -b \u0026lt;branch\u0026gt; ブランチをマージ #  $ git merge \u0026lt;branch\u0026gt; fast-forwardなマージであってもマージコミットを作成\nブランチが存在したという情報を残したいときに有用\n$ git merge --no-ff \u0026lt;branch\u0026gt; リモート操作 #  既存のリモートリポジトリを複製 #  $ git clone \u0026lt;url\u0026gt; リモートリポジトリを追加 #  $ git remote add \u0026lt;name\u0026gt; \u0026lt;url\u0026gt; リモートリポジトリの一覧を表示 #  $ git remote リモートリポジトリのブランチからローカルリポジトリのブランチを作成 #  $ git checkout \u0026lt;branch\u0026gt; リモートリポジトリにブランチを作成 / ブランチに変更内容を反映 #   repository や refspec は省略可 repository には remote add コマンドで追加したリポジトリ名以外にURLを直接指定可 repository を省略した場合, 追跡しているリモートリポジトリを指定 refspec はブランチ名などを指定可 refspec を省略した場合, デフォルトではすべてのブランチが対象  $ git push \u0026lt;repository\u0026gt; \u0026lt;refspec\u0026gt; リモートリポジトリのブランチの変更内容を確認 #   リモートリポジトリでの変更内容を確認したいがローカルリポジトリには反映させたくない場合に fetchを実行 repository や refspec は省略可 repository には remote add コマンドで追加したリポジトリ名以外にURLを直接指定可 repository を省略した場合, 追跡しているリモートリポジトリを指定 refspec はブランチ名などを指定可 refspec を省略した場合, デフォルトではすべてのブランチが対象  $ git fetch \u0026lt;repository\u0026gt; \u0026lt;refspec\u0026gt; リモートリポジトリのブランチの変更内容をローカルリポジトリのブランチに反映 #   pull = fetch + merge repository や refspec は省略可 repository には remote add コマンドで追加したリポジトリ名以外にURLを直接指定可 repository を省略した場合, 追跡しているリモートリポジトリを指定 refspec はブランチ名などを指定可 refspec を省略した場合, デフォルトではすべてのブランチが対象  $ git pull \u0026lt;repository\u0026gt; \u0026lt;refspec\u0026gt; リモートリポジトリのブランチを削除 #  $ git push --delete \u0026lt;repository\u0026gt; \u0026lt;branch name\u0026gt; リモートリポジトリにタグを作成 #  $ git push \u0026lt;repository\u0026gt; \u0026lt;tag name\u0026gt; リモートリポジトリのタグを削除 #  $ git push --delete \u0026lt;repository\u0026gt; \u0026lt;tag name\u0026gt; 登録済みのリモートリポジトリのアドレスを変更 #  指定した名前で登録されているリモートリポジトリのアドレスを のアドレスに変更\n$ git remote set-url \u0026lt;name\u0026gt; \u0026lt;newurl\u0026gt; 登録済みのリモートリポジトリの名前を変更 #  $ git remote rename \u0026lt;old\u0026gt; \u0026lt;new\u0026gt; サブモジュール(submodule)操作 #  サブモジュールの設定 #  .gitmodules というファイルを作成して以下の内容を記述\n[submodule \u0026#34;\u0026lt;submodule name\u0026gt;\u0026#34;] path = \u0026lt;directory name\u0026gt; url = \u0026lt;url\u0026gt; e.g.)\n[submodule \u0026#34;themes/hugo-book\u0026#34;] path = themes/hugo-book url = https://github.com/alex-shpak/hugo-book サブモジュールを含めて既存のリモートリポジトリを複製 #  $ git clone --recursive \u0026lt;url\u0026gt; サブモジュールを後から複製 #  git submodule update --init --recursive タグ操作 #  ローカルのタグの一覧を表示 #  タグ名のみ\n$ git tag タグ名と注釈\n -n 表示する注釈の行数  $ git tag -n1 リモートのタグの一覧を表示 #  リモート・リポジトリ origin のタグの一覧を取得\n$ git ls-remote --tags origin リモートのタグを取得 fetch #  $ git fetch --all --tags タグ付け (タグを作成) #  現在のコミットにタグ付け #  注釈なし\n$ git tag \u0026lt;tag name\u0026gt; 注釈付き\n$ git tag -m \u0026#34;\u0026lt;tag message\u0026gt;\u0026#34; \u0026lt;tag name\u0026gt; $ git tag --message \u0026#34;\u0026lt;tag message\u0026gt;\u0026#34; \u0026lt;tag name\u0026gt; 注釈付き (viが起動)\n$ git tag -a \u0026lt;tag name\u0026gt; $ git tag --annotate \u0026lt;tag name\u0026gt; 後からコミットにタグ付け #  指定したコミット, 注釈付き\n$ git tag -m \u0026#34;\u0026lt;tag message\u0026gt;\u0026#34; \u0026lt;tag name\u0026gt; \u0026lt;commit\u0026gt; $ git tag --message \u0026#34;\u0026lt;tag message\u0026gt;\u0026#34; \u0026lt;tag name\u0026gt; \u0026lt;commit\u0026gt; 指定したコミット, 注釈付き (viが起動)\n$ git tag -a \u0026lt;tag name\u0026gt; -m \u0026lt;tag message\u0026gt; \u0026lt;commit\u0026gt; $ git tag --annotate \u0026lt;tag name\u0026gt; --message \u0026lt;tag message\u0026gt; \u0026lt;commit\u0026gt; タグを削除 #  まだプッシュしていないタグは削除可\n$ git tag -d \u0026lt;tag name\u0026gt; $ git tag --delete \u0026lt;tag name\u0026gt; タグを共有 #  リモート・リポジトリ origin にプッシュ\n$ git push origin \u0026lt;tag name\u0026gt; すべてのタグをリモート・リポジトリ origin にプッシュ\n$ git push origin --tags タグをチェックアウト #  $ git checkout \u0026lt;tag name\u0026gt; タグをチェックアウトすると同時にブランチを作成\n$ git checkout \u0026lt;tag name\u0026gt; -b \u0026lt;branch name\u0026gt; その他 #  特定のディレクトリやファイルのみチェックアウト #  mkdir work \u0026amp;\u0026amp; cd $_ git init . git sparse-checkout init --cone git sparse-checkout set \u0026lt;target path of directory or file\u0026gt; git sparse-checkout list git remote add origin \u0026lt;remote url\u0026gt; git pull origin \u0026lt;branch name\u0026gt; ls -al \u0026lt;target path of directory or file\u0026gt; HEAD~ と HEAD^ の違い #   ^ (キャレット): n番目の親 ~ (チルダ): 最初の親のみに続くn世代前の祖先  https://git-scm.com/docs/git-rev-parse#_specifying_revisions\nG H I J \\ / \\ / D E F \\ | / \\ \\ | / | \\|/ | B C \\ / \\ / A A = = A^0 B = A^ = A^1 = A~1 C = = A^2 D = A^^ = A^1^1 = A~2 E = B^2 = A^^2 F = B^3 = A^^3 G = A^^^ = A^1^1^1 = A~3 H = D^2 = B^^2 = A^^^2 = A~2^2 I = F^ = B^3^ = A^^3^ J = F^2 = B^3^2 = A^^3^2 "},{"id":5,"href":"/tech-blog/glossary/","title":"Glossary","section":"Tech Blog","content":"用語集 #  静的解析 #   コードを実行せずにおこなう検証。  凝集度 #   クラスやメソッドがそのクラスの責任に集中しているかを示す尺度。 凝集度が低いケース：メソッドが、クラスの責任範囲と関連性の低い様々な処理をおこなったり、関連性の低いデータを扱っている場合、修正が複数のクラスにまたがって影響する可能性が高まり、保守性が低下。  結合度 #   クラスやメソッドを利用・保守しやすいよう、その内容が整理・分割できているかを示す尺度。 結合度が高いケース：利用する側のクラスやメソッドが、利用される側のクラスやメソッドの内容を把握（依存）している割合が高いほど、保守性やテスト容易性が低下。  参考 #   凝集度・結合度・循環的複雑度 https://qiita.com/oda-kazuki/items/a16b43dc624429de7db3 凝集度 https://ja.wikipedia.org/wiki/%E5%87%9D%E9%9B%86%E5%BA%A6 結合度 https://ja.wikipedia.org/wiki/%E7%B5%90%E5%90%88%E5%BA%A6  "},{"id":6,"href":"/tech-blog/tool/hugo/","title":"Hugo","section":"Tool","content":"Hugo #  What\u0026rsquo;s Hugo? #   Hugo is a fast and flexible static site generator made of Golang.\nhttps://gohugo.io/about/  Preparation #  Create a git repository using Github #   Repositories \u0026gt; New Repository name: sample Click \u0026ldquo;Create repository\u0026rdquo;  Install Hugo on macOS #  $ brew install hugo Build a blog using Hugo #  $ GITHUB_USERNAME=xxxx $ GIT_REPOSITORY=sample $ hugo new site ${GIT_REPOSITORY} $ cd ${GIT_REPOSITORY} $ echo \u0026#34;# ${GIT_REPOSITORY}\u0026#34; \u0026gt;\u0026gt; README.md Initialize git #  $ git init If you want to change the configrations of git\n$ git config --local --list $ git config --local user.name xxxx $ git config --local user.email xxxx $ git add . $ git commit -m \u0026#34;Build a site using hugo\u0026#34; $ git branch -M main $ git remote add origin https://github.com/${GITHUB_USERNAME}/${GIT_REPOSITORY}.git $ git push -u origin main Add .gitignore #  $ vi .gitignore Add a line break on the last line.\n.gitignore\npublic/ resources/_gen/ .DS_Store *.swp $ git add . $ git commit -m \u0026#34;Add .gitignore\u0026#34; Add Hugo\u0026rsquo;s theme #  $ git submodule add https://github.com/alex-shpak/hugo-book themes/hugo-book $ git add . $ git commit -m \u0026#34;Add a theme as a submodule\u0026#34; Change config.toml #  config.toml\nbaseURL = \u0026#34;/sample/\u0026#34; # Write your git repository as a directory languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;Sample\u0026#34; publishDir = \u0026#34;docs\u0026#34; theme = \u0026#34;hugo-book\u0026#34; # Add a line break on the last line.  $ git add . $ git commit -m \u0026#34;Change config.toml\u0026#34; Add a page of hello world #  contents/hello-world.md\n--- date: 2021-01-01 lastmod: [\u0026#34;lastmod\u0026#34;] title: \u0026#34;Hello world\u0026#34; tags: [\u0026#34;Foo\u0026#34;,\u0026#34;Bar\u0026#34;] --- # Hello world! $ git add . $ git commit -m \u0026#34;Add a page of hello world\u0026#34; Generate static contents #  $ hugo Execute the following instead above one if you want to minify static contents\n$ hugo --minify $ git add . $ git commit -m \u0026#34;Generate static contents\u0026#34; Check on your local environment #  $ hugo server --minify -p 3000 Access the following URL using a browser.\n$ echo http://localhost:3000/${GIT_REPOSITORY}/hello-world/ Push to Github #  $ git push -u origin main Github Pages #  Access the following URL using a browser.\n$ echo https://github.com/${GITHUB_USERNAME}/${GIT_REPOSITORY}/settings/pages  Source: \u0026gt; Branch: main \u0026gt; /docs Click \u0026ldquo;Save\u0026rdquo;  Access the following URL using a browser after a few minute.\n$ echo https://${GITHUB_USERNAME}.github.io/${GIT_REPOSITORY}/hello-world/ Left Menu #  TODO: Bundle menu mode is deprecated and will be removed.  config.toml\n[params] BookMenuBundle = \u0026#39;/menu\u0026#39; content/menu/index.md\n--- headless: true --- - **Sample** - [Hello world]({{\u0026lt; ref \u0026#34;hello-world\u0026#34; \u0026gt;}})  - Please write your link here as above. Breadcrumb #  layouts/partials/docs/breadcrumb.html\n\u0026lt;ol class=\u0026#34;breadcrumb\u0026#34;\u0026gt; {{ template \u0026#34;breadcrumbnav\u0026#34; (dict \u0026#34;p1\u0026#34; . \u0026#34;p2\u0026#34; .) }} \u0026lt;/ol\u0026gt; {{ define \u0026#34;breadcrumbnav\u0026#34; }} {{ if .p1.Parent }} {{ template \u0026#34;breadcrumbnav\u0026#34; (dict \u0026#34;p1\u0026#34; .p1.Parent \u0026#34;p2\u0026#34; .p2 ) }} {{ else if not .p1.IsHome }} {{ template \u0026#34;breadcrumbnav\u0026#34; (dict \u0026#34;p1\u0026#34; .p1.Site.Home \u0026#34;p2\u0026#34; .p2 ) }} {{ end }} \u0026lt;li{{ if eq .p1 .p2 }} class=\u0026#34;active\u0026#34;{{ end }}\u0026gt; \u0026lt;a href=\u0026#34;{{ .p1.Permalink }}\u0026#34;\u0026gt;{{ .p1.Title }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} layouts/partials/docs/inject/content-before.html\n{{ partial \u0026#34;docs/breadcrumb\u0026#34; . }} assets/_custom.scss\n/* Breadcrumb */ .breadcrumb { padding: 8px 15px; margin-bottom: 20px; list-style: none; background-color: var(--gray-100); border-radius: 4px; ol { display: block; list-style-type: decimal; margin-block-start: 1em; margin-block-end: 1em; margin-inline-start: 0px; margin-inline-end: 0px; padding-inline-start: 40px; } li { display: inline-block; } li+li:before { padding: 0 5px; color: #ccc; content: \u0026#34;/\\00a0\u0026#34;; } a { color: var(--color-link); } } Multilingual Mode #  Change config.toml #  Add the following to config.toml\ndefaultContentLanguage = \u0026#34;en\u0026#34; defaultContentLanguageInSubdir = true [languages] [languages.en] languageName = \u0026#34;English\u0026#34; languageCode = \u0026#34;en\u0026#34; # contentDir = \u0026#34;content/en\u0026#34; weight = 1 #[languages.en.params] # key1 = value1 [languages.ja] languageName = \u0026#34;日本語\u0026#34; languageCode = \u0026#34;ja\u0026#34; # contentDir = \u0026#34;content/ja\u0026#34; weight = 2 #[languages.ja.params] # key1 = value1 Customize a select box of languages #  layouts/partials/docs/languages.html\nOverwrite themes/hugo-book/layouts/partials/docs/languages.html.\n\u0026lt;!-- Merge home and current page translations --\u0026gt; {{ $bookTranslatedOnly := default false .Site.Params.BookTranslatedOnly }} {{ $translations := dict }} {{ if (eq $bookTranslatedOnly false ) }} {{ range .Site.Home.AllTranslations }} {{ $translations = merge $translations (dict .Language.Lang .) }} {{ end }} {{ end }} {{ range .Translations }} {{ $translations = merge $translations (dict .Language.Lang .) }} {{ end }} \u0026lt;div class=\u0026#34;book-languages\u0026#34; tabindex=\u0026#34;0\u0026#34; aria-haspopup=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li class=\u0026#34;flex align-center\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;{{ \u0026#34;svg/translate.svg\u0026#34; | relURL }}\u0026#34; class=\u0026#34;book-icon\u0026#34; alt=\u0026#34;Languages\u0026#34; /\u0026gt; {{ $.Site.Language.LanguageName }} \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul class=\u0026#34;book-languages-list\u0026#34;\u0026gt; {{ range .Site.Languages }}{{ with index $translations .Lang }} {{ if (ne $.Site.Language .Language) }} \u0026lt;li\u0026gt;  \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34; class=\u0026#34;flex align-center\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;{{ \u0026#34;svg/translate.svg\u0026#34; | relURL }}\u0026#34; class=\u0026#34;book-icon\u0026#34; alt=\u0026#34;Languages\u0026#34; /\u0026gt; {{ .Language.LanguageName }} \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }}{{ end }}{{ end }}  \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; layouts/partials/docs/search.html\nOverwrite themes/hugo-book/layouts/partials/docs/search.html\nto put a select box of languages above a search box.\n{{ partial \u0026#34;docs/languages\u0026#34; . }}  {{ if default true .Site.Params.BookSearch }} \u0026lt;div class=\u0026#34;book-search\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;book-search-input\u0026#34; placeholder=\u0026#34;{{ i18n \u0026#34;Search\u0026#34; }}\u0026#34; aria-label=\u0026#34;{{ i18n \u0026#34;Search\u0026#34; }}\u0026#34; maxlength=\u0026#34;64\u0026#34; data-hotkeys=\u0026#34;s/\u0026#34; /\u0026gt; \u0026lt;div class=\u0026#34;book-search-spinner hidden\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;ul id=\u0026#34;book-search-results\u0026#34;\u0026gt;\u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; {{ end }} assets/_custom.scss\n/* Multilingual Mode */ .book-languages { .book-languages-list { bottom: 74%; } .book-languages-list a { padding: .3rem 1rem; } } .book-menu-content { .book-languages { img { height: 1em; width: 1em; margin-inline-end: .5rem; } .book-languages-list { padding: 0; bottom: 68%; } .book-languages-list a { padding: 0 1rem; } } } Tags of a page #  layouts/partials/docs/tags.html\n\u0026lt;h2\u0026gt;Tags\u0026lt;/h2\u0026gt; {{ with .Params.tags }} \u0026lt;ul class=\u0026#34;tags\u0026#34;\u0026gt; {{- range . -}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ \u0026#34;/tags/\u0026#34; | relLangURL }}{{ . | urlize }}\u0026#34;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; {{- end -}} \u0026lt;/ul\u0026gt; {{ end }} layouts/partials/docs/inject/toc-before.html\nOverwrite themes/hugo-book/layouts/partials/docs/inject/toc-before.html\n{{ partial \u0026#34;docs/tags\u0026#34; . }} layouts/partials/docs/toc.html\nOverwrite themes/hugo-book/layouts/partials/docs/toc.html\n{{ partial \u0026#34;docs/inject/toc-before\u0026#34; . }} \u0026lt;h2\u0026gt;Table of Contents\u0026lt;/h2\u0026gt; {{ .TableOfContents }} {{ partial \u0026#34;docs/inject/toc-after\u0026#34; . }} assets/_custom.scss\n/* Table of Contents */ .book-toc-content { ul.tags { padding-inline-start: 0; li { line-height: 2; list-style: none; } } } Syntax Highlighting #  https://gohugo.io/content-management/syntax-highlighting/\ne.g) If you write the following in sample.md file of your article. ```go {linenos=table,hl_lines=[\u0026#34;4-5\u0026#34;,9],linenostart=1} package main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func main() { fmt.Println(\u0026#34;The time is\u0026#34;, time.Now()) } ```\nYou can see the following syntax highlighting on the web page.\n1 2 3 4 5 6 7 8 9 10  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func main() { fmt.Println(\u0026#34;The time is\u0026#34;, time.Now()) }   Mermaid Diagram #  https://mermaid-js.github.io/mermaid/#/\ne.g) If you write the following in sample.md file of your article\n{{\u0026lt;mermaid\u0026gt;}} graph LR A[Square Rect] -- Text --\u0026gt; B((Circle)) A --\u0026gt; C(Round Rect) B --\u0026gt; D{Rhombus} C --\u0026gt; D {{\u0026lt;/mermaid\u0026gt;}} You can see the following diagram on the web page.  mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) graph LR A[Square Rect] -- Text -- B((Circle)) A -- C(Round Rect) B -- D{Rhombus} C -- D References #   https://gohugo.io/about/ https://gohugo.io/content-management/multilingual/ https://gohugo.io/content-management/syntax-highlighting/ https://mermaid-js.github.io/mermaid/#/  "},{"id":7,"href":"/tech-blog/infrastructure/linux/","title":"Linux","section":"Infrastructure","content":"Linux Command #  画面操作 #  ターミナル操作のショートカット #     Mac Windows description     control + a ctrl + a カーソルを行頭へ移動   control + e ctrl + e カーソルを行末へ移動   control + f ctrl + f カーソルを前進(右へ移動)   control + b ctrl + b カーソルを後退(左へ移動)   control + d ctrl + d カーソル上の1文字削除   control + h ctrl + h カーソル後方(左)の1文字削除   control + u ctrl + u カーソルから行頭まで削除   control + k ctrl + k カーソルから行末まで削除   control + w ctrl + w カーソル上の単語1つ分削除   control + y ctrl + y 最後に削除した文字を貼り付け   control + p ctrl + p 1つ前のコマンド履歴を表示   control + n ctrl + n 1つ後のコマンド履歴を表示   control + s ctrl + s 画面をロック   control + q ctrl + q 画面のロックを解除   control + c ctrl + c 実行中のコマンドを強制終了   control + l(エル) ctrl + l(エル) 画面をクリア   tab tab コマンド,ディレクトリ,ファイルの候補を補完    文字コード #  文字コードの値 #     文字コード コマンドで指定する値 remarks     Shift_JIS cp932 or sjis cp932 には sjis に含まれていない文字（①, ②, Ⅰ, Ⅱ, ㍉, ㌍, 彅, 髙 etc.）を含む。   EUC-JP euc-jp -   UTF-8 utf-8 -    文字コードを設定 #  .vimrc 以下を記述し :wq で保存。\n:set encoding=utf-8 :set fileencodings=utf-8,cp932,sjis,euc-jp    long short description     encoding enc vim の内部で使用されるエンコーディングを指定。   fileencoding fenc 編集時のバッファファイルのエンコーディングを指定。encodingと異なる値が設定されていた場合、ファイルの読み書き時に文字コードを変換。fenc が空の場合、変換なし。   fileencodings fencs 既存ファイル編集時の変換予定の文字コードを指定。カンマ区切りで複数記述可。    vim 内部で使用される文字コードを確認 #  :set encoding? or\n:se enc? ファイルの文字コードを確認 #  :set fileencoding? or\n:se fenc? ファイルの文字コードの自動判別設定を確認 #  :set fileencodings? or\n:se fencs? 指定の文字コードでファイルを開き直し #  :edit ++encoding=コマンドで指定する文字コードの値 or\n:e ++enc=コマンドで指定する文字コードの値 ファイルの文字コードを変換 #  以下を実行後に :w で保存すること。\n:set fileencoding=コマンドで指定する文字コードの値 or\n:set fenc=コマンドで指定する文字コードの値 ファイルの文字コードを変換し保存 #  :setlocal fileencoding=コマンドで指定する文字コードの値 or\n:setl fenc=コマンドで指定する文字コードの値 改行コード #  改行コードの設定 #  .vimrc 以下を記述し :wq で保存。\n:set fileformats=unix,dos,mac 改行コードの値 #     改行コード コマンドで指定する値 remarks     LF(Line Feed) \\n unix Unix, Linux, Mac(OS10以降), Android   CR(Carriage Return) \\r mac 古いMac(OS9以前)   CRLF(Carriage Return/Line Feed) \\r\\n dos Windows    改行コードを指定 #  以下を実行後に :w で保存すること。\n:set fileformat=コマンドで指定する改行コードの値 or\n:se ff=コマンドで指定する改行コードの値 改行コードを指定し保存 #  :setlocal fileformat=コマンドで指定する改行コードの値 or\n:setl ff=コマンドで指定する改行コードの値 ディスク容量 #  ディスク容量を確認 #  df -h --total 特定ディレクトリ配下の容量を確認 #  e.g) 容量が大きい順に30件表示\ndu -sh /path/to/target/directory/* | sort -hr | head -30 日付・時刻 #  TOMORROW=`date \u0026#39;+%Y%m%d\u0026#39; --date \u0026#39;1 day\u0026#39;` YESTERDAY=`date \u0026#39;+%Y%m%d\u0026#39; --date \u0026#39;-1 day\u0026#39;` echo ${TOMORROW} echo ${YESTERDAY} date コマンドのオプション #     format description     %H 時 (00～23)   %I 時 (01～12)   %k 時 ( 0～23)   %l 時 ( 1～12)   %M 分 (00～59)   %p AM あるいは PM のロケール(国や地域に合わせた文字列)   %r 12時間形式の時刻 (HH:mm:ss [AP]M)   %s 1970-01-01 00:00:00 UTC からの秒数   %S 秒 (00～61)   %T 24時間形式の時刻 (HH:mm:ss)   %a ロケールによる省略形の曜日の名前 (Sun～Sat)   %A ロケールによる完全に表記した曜日の名前(Sunday～Saturday)   %b ロケールによる省略形の月の名前 (Jan～Dec)   %B ロケールによる完全に表記した月の名前(January～December)   %c ロケールによる日付と時刻 (Sat Nov 04 12:02:33 EST 1989)   %d 日(月内通算日数) (01～31)   %D 日付 (MM/DD/YY)   %j 年内通算日数 (001～366)   %m 月 (01～12)   %w 週のうちの曜日(0～6)で0が日曜日に対応   %x ロケールによる日付の表現 (MM/DD/YY)   %y 西暦の下2けた (00～99)   %Y 年 (1970～)    検索 #  grep コマンドの使用方法 #  grep 検索したい文字列 検索したいテキストファイル 任意のコマンドの実行結果に対して検索\nコマンド | grep 検索したい文字列 複数のパターンを指定\ngrep -e 検索したい文字列1 -e 検索したい文字列2 検索したいテキストファイル 指定したディレクトリ配下を再帰的に検索, 検索結果に行番号を表示\ngrep -rn -e \u0026#39;pattern\u0026#39; /target/dir/ grep コマンドのオプション #     option option description     -e 'パターン' --regexp='パターン' パターンを指定して検索   -f --file=ファイル ファイルに記載したパターン(1行1パターン)を読み込み検索に使用   -i --ignore-case アルファベットの大文字と小文字を区別せず検索   -w --word-regexp 単語全体でパターンと一致するものを検索   -x --line-regexp 行全体がパターンと一致するものを検索   -G --basic-regexp 基本正規表現(BRE)を検索に使用   -E --extended-regexp 拡張正規表現(ERE)を検索に使用   -P --perl-regexp Perl互換正規表現(PCRE)を検索に使用   -v --invert-match パターンに一致しない行を表示   -s --no-messages エラーメッセージを非表示   -q --quiet --silent 結果を非表示(主にシェルスクリプトなどで判定用に使用   -L --files-without-match 一致するものが含まれていないファイルのファイル名のみ表示   -l --files-with-matches 一致するものが含まれているファイルのファイル名のみ表示   -c --count 一致するものが含まれている回数のみ表示   -m 回数 --max-count=回数 パターンが指定した回数に達したら処理を終了   -o --only-matching 一致した箇所だけを表示(通常は行単位で表示)   -n --line-number 行番号を併せて表示(「行番号付きで表示」を参照)   -b --byte-offset パターンが何文字目にあるかを併せて表示   -H --with-filename ファイル名を併せて表示   -h --no-filename ファイル名を表示しない(複数ファイル指定時)    --color=WHEN 見つかったパターンを目立たせる(WHEN部分にはalways、never、autoを指定)   -B 行数 --before-context=行数 一致した行の前の行も表示(「前後の行も表示」を参照)   -A 行数 --after-context=行数 一致した行の後の行も表示(「前後の行も表示」を参照)   -C 行数,-行数 --context=行数 一致した行の前後の行も表示   -r --recursive ディレクトリを指定した場合はサブディレクトリ内のファイルも含め検索    タイムスタンプでの検索 #  現在〜2日前(48時間前) #  find ./ -mtime -2 2日前(48時間前〜72時間前) #  find ./ -mtime 2 2日前(72時間前)〜過去 #  find ./ -mtime +1 e.g) 特定のディレクトリ内の30日以前のCSV拡張子のファイルを削除\nfind ./ -type f -name \u0026#39;*.csv\u0026#39; -mtime +30 | xargs rm -f find コマンドのオプション #     option description     -mmin ファイルのデータの最終更新日時（分指定）   -mtime ファイルのデータの最終更新日時（日指定）   -amin ファイルのデータの最終アクセス日時（分指定）   -atime ファイルのデータの最終アクセス日時（日指定）   -cmin ファイルのデータとステータスの最終更新日時（分指定）   -ctime ファイルのデータとステータスの最終更新日時（日指定）   -daystart 00:00am 基準    一覧表示 #  タイムスタンプ降順で一覧表示(隠しファイル含む) #  ls -alt タイムスタンプ昇順で一覧表示(隠しファイル含む) #  ls -altr ls コマンドのオプション #     option description     -a 先頭 . の隠しファイルも表示   -A 先頭 . の隠しファイル, 現在のディレクトリ ., 親ディレクトリ .. も表示   -l(エル) 詳細情報を表示   -t タイムタンプ降順で表示   -tr タイムタンプ昇順で表示    移動・名称変更 #  ※ 基本的にファイルもディレクトリも操作は同じ\n1つのファイルを移動 #  e.g) ファイル sample.txt を ディレクトリ ./dir/ に移動\nmv sample.txt ./dir/ 複数のファイルを移動 #  e.g) ファイル sample1.txt と sample2.txt を ディレクトリ ./dir/ に移動\nmv sample1.txt sample2.txt ./dir/ ファイルの名称を変更(リネーム) #  ファイル before.txt を after.txt に変更\nmv before.txt after.txt mv コマンドのオプション #     option option description     -v --verbose 実行内容を表示   -i --interactive 移動元と移動先が同名の場合, 上書きする前に確認   -b --backup=方法 移動元と移動先が同名の場合, 上書きされるファイル(移動先)のバックアップを作成｜   -S --suffix=接尾語 バックアップ作成時の接尾語を指定   -n --noclobber 移動元と移動先が同名の場合, 上書きせず停止   -u --update 移動元のファイルが移動先ファイルより新しいか新規ファイルの場合のみ上書き    コピー #  ※ 基本的にファイルもディレクトリも操作は同じ\nファイルをコピー #  cp -ip original.txt copy.txt ディレクトリごとファイルをコピー #  cp -ipr original-dir copy-dir ファイルをコピーする際にバックアップを作成 #  cp -b --suffix=_$(date +%Y%m%d%H%M%S) original.txt copy.txt cp コマンドのオプション #     option option description     -v --verbose 実行内容を表示   -i --interactive コピー元とコピー先が同名の場合, 上書きする前に確認   -b --backup=方法 コピー元とコピー先が同名の場合, 上書きされるファイル(コピー先)のバックアップを作成｜   -S --suffix=接尾語 バックアップ作成時の接尾語を指定   -u --update コピー元のファイルがコピー先ファイルより新しいか新規ファイルの場合だけコピー   -r --recursive コピー元にディレクトリを指定した場合 再帰的にコピー   -p --preserve コピー元のパーミッションと所有者とタイムスタンプを保持（\u0026ndash;preserve=mode,ownership,timestampsと同じ）   -s --symbolic-link シンボリック・リンクを作成    ネットワーク上のホスト間のSSHを利用したコピー #  scp [option] [転送元ユーザー名@][転送元ホスト名:]転送元ファイルパス 転送先ユーザ名@転送先ホスト名:転送先パス scp コマンドのオプション #     option description     -r 転送元のディレクトリ全体を再帰的にコピー   -v 転送の進行情報を表すメーターやデバッグ・メッセージを表示   -q 転送の進行情報を表すメーターを非表示   -C 通信を圧縮   -p 転送元の最終更新日時・最終アクセス日時・パーミッションを転送先に保持   -P ポート番号 転送先のポート番号を指定   -i 秘密鍵ファイル 秘密鍵ファイルを指定    ディレクトリの作成 #  多階層のディレクトリを作成 #  mkdir -p /dir/subdir/{subsubdir-1,subsubdir-2,subsubdir-3} dir └── subdir ├── subsubdir-1 ├── subsubdir-2 └── subsubdir-3 作成したディレクトリに作業場所を移動 #  mkdir -p /dir/subdir/subsubdir/ \u0026amp;\u0026amp; cd $_ ファイルの作成 #  空ファイルを作成 #  touch sample.txt ファイルのタイムスタンプを変更 #  e.g) ファイルのタイムスタンプ(最終更新日)を「2021-01-01 01:25:30」に変更\ntouch --date=\u0026#34;2021-01-01 01:25:30\u0026#34; sample.txt or\ntouch -t 202101012530.30 sample.txt    short option long option description     -t \u0026lt;time\u0026gt; - [[CC]YY]MMDDhhmm[.ss] 形式で日時を指定   -d -date=日付文字列 文字列で日時を指定   -r \u0026ndash;reference=ファイル名 指定したファイルと同じ日時を指定    ファイル操作 #  ファイルの行数 #  ファイルの行数を出力 #  wc -l sample.txt ファイルの空行の行数を出力 #  grep -c \u0026#39;^$\u0026#39; sample.txt 指定した文字と一致しない行数を出力 #  grep -c -v \u0026#39;hoge\u0026#39; sample.txt ファイル内容の並べ替え #  並べ替えた結果を出力 #  sort sample.txt 並べ替え重複行は1行目のみを出力 #  sort -u sample.txt sort --unique sample.txt 並べられているか確認 #  sort -c sort --check ファイル内容の重複 #  重複行は1行目のみを出力 #  uniq sample.txt 重複する行のみ出力 #  uniq -d sample.txt ファイル内容の正規表現での確認 #  正規表現と一致する行数を確認 #  e.g.) 半角数字10桁のみの行数\ngrep -c -E \u0026#39;^[0-9]{10}$\u0026#39; sample.txt 圧縮 #  zip圧縮後に元ファイルを削除\nzip -rm after.zip before.file CSV #  CSVファイルの各行のカラム数が指定した数(以下の例では 10)と一致しない行数を確認 #  cat sample.csv | awk -F \u0026#39;,\u0026#39; \u0026#39;{print NF}\u0026#39; | grep -c -v 10 CSVファイルの特定のカラム(以下の例では10カラム目)のみを抽出 #  cut -d \u0026#39;,\u0026#39; -f 10 sample.csv \u0026gt; specific_column.csv システム情報/バージョン #  システム情報を確認 #  uname -a カーネルのバージョン情報を確認 #  cat /proc/version OSのバージョン情報を確認 #  cat /etc/os-release OSのバージョン情報を確認(ディストリビューション別) #  ※RHEL=Red Hat Enterprise Linux\n   command RHEL※ CentOS Fedora Amazon Linux Oracle Linux Debian Ubuntu SUSE Linux     cat /etc/system-release Yes Yes Yes Yes Yes      cat /etc/redhat-release Yes Yes Yes  Yes      cat /etc/centos-release  Yes         cat /etc/fedora-release   Yes        cat /etc/oracle-release     Yes      cat /etc/debian_version      Yes Yes    cat /etc/lsb-release       Yes    cat /etc/SuSE-release        Yes    OSのバージョン情報確認コマンドを確認 #  ls -l /etc/*release その他 #  ログイン中のユーザー #  LOGIN_USER=`who am i | awk -F \u0026#39; \u0026#39; \u0026#39;{print $1}\u0026#39;` echo $LOGIN_USER References #   インフラエンジニアとしてよく使うコマンド集 インフラエンジニアじゃなくても押さえておきたいSSHの基礎知識 viの文字コードについて vimによる日本語文字コード自動判別と文字コード変換 grepでこういう時はどうする? Man page of GREP gzip ファイルを操作  "},{"id":8,"href":"/tech-blog/database/mysql/","title":"MySQL","section":"Database","content":"MySQL #  Preparation #  Install to macOS #  $ brew install mysql Start #  $ mysql.server start Starting MySQL ....... SUCCESS! Check the vertion #  $ mysql --version mysql Ver 8.0.26 for macos11.3 on x86_64 (Homebrew) Make initial settings #  $ mysql_secure_installation  パスワード強度検証プラグインの利用有無 パスワード強度の選択 root ユーザのパスワード設定 匿名ユーザの削除 リモートからの root ユーザとしてのログインの禁止 サンプル用 test データベースの削除  $ mysql_secure_installation  Securing the MySQL server deployment. Connecting to MySQL using a blank password. VALIDATE PASSWORD COMPONENT can be used to test passwords and improve security. It checks the strength of password and allows the users to set only those passwords which are secure enough. Would you like to setup VALIDATE PASSWORD component? ### パスワード強度検証プラグインの利用 Press y|Y for Yes, any other key for No: y ### y と入力  There are three levels of password validation policy: LOW Length \u0026gt;= 8 MEDIUM Length \u0026gt;= 8, numeric, mixed case, and special characters STRONG Length \u0026gt;= 8, numeric, mixed case, special characters and dictionary file ### パスワード検証ポリシーの選択 Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 2　### 2 と入力  Please set the password for root here. New password: ### rootユーザー用のパスワードを入力  Re-enter new password: ### rootユーザー用のパスワードを再入力  Estimated strength of the password: 100 Do you wish to continue with the password provided? (Press y|Y for Yes, any other key for No) : y　### y と入力 By default, a MySQL installation has an anonymous user, allowing anyone to log into MySQL without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. ### 匿名ユーザーの削除 Remove anonymous users? (Press y|Y for Yes, any other key for No) : y ### y と入力 Success. Normally, root should only be allowed to connect from \u0026#39;localhost\u0026#39;. This ensures that someone cannot guess at the root password from the network. ### リモートからの root ログインの拒否 Disallow root login remotely? (Press y|Y for Yes, any other key for No) : y ### y と入力 Success. By default, MySQL comes with a database named \u0026#39;test\u0026#39; that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. ### test データベースの削除 Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y　### y と入力  - Dropping test database... Success. - Removing privileges on test database... Success. Reloading the privilege tables will ensure that all changes made so far will take effect immediately. ### 特権テーブルの即時適用 Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y　### y と入力 Success. All done! ログイン #  e.g) rootユーザーでのログイン\n$ mysql -uroot -p Enter password: ### 設定したパスワードを入力 MySQLの情報 #  バージョン #  SELECT VERSION(); タイムゾーン #  SHOW VARIABLES LIKE \u0026#39;%time_zone%\u0026#39;; 文字コード #  SHOW VARIABLES LIKE \u0026#39;%character\\_set\\_%\u0026#39;; SHOW VARIABLES LIKE \u0026#39;collation%\u0026#39;; データベース/テーブル/カラムの一覧 #  データベースの一覧 #  SHOW DATABASES; SELECT DISTINCT table_schema AS database_name FROM information_schema.tables WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) ORDER BY table_schema; テーブルの一覧 #  USE sample_database; SHOW TABLES; SHOW TABLES FROM sample_database; SELECT table_schema AS database_name, table_name FROM information_schema.tables WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) AND table_type = \u0026#39;BASE TABLE\u0026#39; ORDER BY table_schema, table_type, table_name; テーブルごとの自動採番 AUTO_INCREMENT の一覧 #  SELECT table_schema AS database_name, table_name, auto_increment FROM information_schema.tables WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) AND table_type = \u0026#39;BASE TABLE\u0026#39; ORDER BY table_schema, table_name; テーブルごとのカラムの一覧（カンマ区切り） #  SELECT table_schema AS database_name, table_name, GROUP_CONCAT(column_name) AS column_names FROM information_schema.columns WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) GROUP BY table_schema, table_name テーブルの物理名と論理名（テーブル・コメント）の一覧 #  SELECT table_schema AS databae_name, table_name, table_comment FROM information_schema.tables WHERE table_schema = \u0026#39;sample_database\u0026#39; ORDER BY table_schema, table_name; カラムの物理名と論理名（カラム・コメント）の一覧 #  SELECT table_schema AS databae_name, table_name, column_name, column_comment FROM information_schema.columns ORDER BY table_schema, table_name; 特定のカラムを含むテーブルの一覧 #  SELECT table_schema AS databae_name, table_name, column_name, column_comment FROM information_schema.columns WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) AND column_name LIKE \u0026#39;%sample_column%\u0026#39; ORDER BY table_schema, table_name, column_name; ビューの一覧 #  SELECT table_schema AS database_name, table_name AS view_name FROM information_schema.tables WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) AND table_type = \u0026#39;VIEW\u0026#39; ORDER BY table_schema, table_name; テーブルのキー情報の一覧 #  テーブルごとのプライマリーキー制約の一覧 #  SELECT table_schema AS database_name, table_name, column_name AS primary_key FROM information_schema.KEY_COLUMN_USAGE WHERE constraint_name = \u0026#39;PRIMARY\u0026#39;; テーブルごとのユニークキー制約の一覧 #  SELECT table_schema AS database_name, table_name, GROUP_CONCAT(column_name) AS unique_keys FROM information_schema.KEY_COLUMN_USAGE WHERE position_in_unique_constraint = 1 GROUP BY table_schema, table_name; テーブルごとの外部キー制約の一覧 #  SELECT table_schema AS database_name, table_name, GROUP_CONCAT( CONCAT( column_name, \u0026#39;=\u0026#39;, referenced_table_name, \u0026#39;.\u0026#39;, referenced_column_name ) ) AS referenced FROM information_schema.KEY_COLUMN_USAGE WHERE referenced_table_name IS NOT NULL GROUP BY table_schema, table_name; テーブルごとのプライマリーキー・ユニークキー・外部キー一覧 #  SELECT table_info.*, primary_info.primary_key, unique_info.unique_keys, reference_info.referenced FROM ( SELECT table_schema AS database_name, table_name FROM information_schema.tables WHERE table_type = \u0026#39;BASE TABLE\u0026#39; ) AS table_info LEFT JOIN ( SELECT table_schema AS database_name, table_name, GROUP_CONCAT(column_name) AS unique_keys FROM information_schema.KEY_COLUMN_USAGE WHERE position_in_unique_constraint = 1 GROUP BY table_schema, table_name ) AS unique_info ON table_info.database_name = unique_info.database_name AND table_info.table_name = unique_info.table_name LEFT JOIN ( SELECT table_schema AS database_name, table_name, column_name AS primary_key FROM information_schema.KEY_COLUMN_USAGE WHERE constraint_name = \u0026#39;PRIMARY\u0026#39; ) AS primary_info ON table_info.database_name = primary_info.database_name AND table_info.table_name = primary_info.table_name LEFT JOIN ( SELECT table_schema AS database_name, table_name, GROUP_CONCAT( CONCAT( column_name, \u0026#39;=\u0026#39;, referenced_table_name, \u0026#39;.\u0026#39;, referenced_column_name ) ) AS referenced FROM information_schema.KEY_COLUMN_USAGE WHERE referenced_table_name IS NOT NULL GROUP BY table_schema, table_name ) AS reference_info ON table_info.database_name = reference_info.database_name AND table_info.table_name = reference_info.table_name データ容量の一覧 #  データベースごとのサイズの一覧 #  SELECT table_schema AS database_name, CONCAT( SUM(data_length + index_length) / (1024 * 1024), \u0026#39; MB\u0026#39; ) AS db_size FROM information_schema.tables GROUP BY table_schema ORDER BY table_schema; データベースごとのテーブル数の一覧 #  SELECT table_schema AS database_name, COUNT(*) AS table_count FROM information_schema.tables WHERE table_type = \u0026#39;BASE TABLE\u0026#39; GROUP BY table_schema; テーブルごとのサイズの一覧 #  SELECT table_schema AS database_name, table_name, CONCAT( (data_length + index_length) / (1024 * 1024), \u0026#39; MB\u0026#39; ) AS table_size FROM information_schema.tables WHERE table_type = \u0026#39;BASE TABLE\u0026#39; AND table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) ORDER BY table_schema, (data_length + index_length) DESC, table_name; テーブルごとのレコード数の一覧 #  SELECT table_schema AS database_name, table_name, table_rows FROM information_schema.tables AS `target` WHERE table_type = \u0026#39;BASE TABLE\u0026#39; AND table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) ORDER BY table_schema, table_rows DESC, table_name; データベース/テーブルごとの件数/容量/カラム/キー情報/文字コード/AUTO_INCREMENTの一覧 #  SELECT table_info.table_schema AS database_name, database_info.table_count, database_info.db_size, table_info.table_name, table_info.table_rows, table_info.table_size, columns_info.column_names, key_info.primary_key, key_info.unique_keys, key_info.referenced, table_info.auto_increment, table_info.table_collation AS character_info FROM ( -- 全テーブル情報  SELECT *, CONCAT( (data_length + index_length) / (1024 * 1024), \u0026#39; MB\u0026#39; ) AS table_size FROM information_schema.tables WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) AND table_type = \u0026#39;BASE TABLE\u0026#39; ) AS table_info LEFT JOIN ( -- データベースの容量とテーブル数  SELECT table_schema AS database_name, CONCAT( SUM(data_length + index_length) / (1024 * 1024), \u0026#39; MB\u0026#39; ) AS db_size, SUM( CASE WHEN table_type = \u0026#39;BASE TABLE\u0026#39; THEN 1 ELSE 0 END ) AS table_count FROM information_schema.tables GROUP BY table_schema ) AS database_info ON table_info.table_schema = database_info.database_name LEFT JOIN ( -- テーブルごとのカラム  SELECT table_schema AS database_name, table_name, GROUP_CONCAT(column_name) AS column_names FROM information_schema.columns WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) GROUP BY table_schema, table_name ) AS columns_info ON table_info.table_schema = columns_info.database_name AND table_info.table_name = columns_info.table_name LEFT JOIN ( -- テーブルのキー情報（プライマリーキー、ユニークキー、外部キー）  SELECT table_info.*, primary_info.primary_key, unique_info.unique_keys, reference_info.referenced FROM ( SELECT table_schema AS database_name, table_name FROM information_schema.tables WHERE table_type = \u0026#39;BASE TABLE\u0026#39; ) AS table_info LEFT JOIN ( SELECT table_schema AS database_name, table_name, GROUP_CONCAT(column_name) AS unique_keys FROM information_schema.KEY_COLUMN_USAGE WHERE position_in_unique_constraint = 1 GROUP BY table_schema, table_name ) AS unique_info ON table_info.database_name = unique_info.database_name AND table_info.table_name = unique_info.table_name LEFT JOIN ( SELECT table_schema AS database_name, table_name, column_name AS primary_key FROM information_schema.KEY_COLUMN_USAGE WHERE constraint_name = \u0026#39;PRIMARY\u0026#39; ) AS primary_info ON table_info.database_name = primary_info.database_name AND table_info.table_name = primary_info.table_name LEFT JOIN ( SELECT table_schema AS database_name, table_name, GROUP_CONCAT( CONCAT( column_name, \u0026#39;=\u0026#39;, referenced_table_name, \u0026#39;.\u0026#39;, referenced_column_name ) ) AS referenced FROM information_schema.KEY_COLUMN_USAGE WHERE referenced_table_name IS NOT NULL GROUP BY table_schema, table_name ) AS reference_info ON table_info.database_name = reference_info.database_name AND table_info.table_name = reference_info.table_name ) AS key_info ON table_info.table_schema = key_info.database_name AND table_info.table_name = key_info.table_name ORDER BY table_info.table_schema, table_info.table_name; データベース #  データベースの新規作成 #   CHARACTER SET 文字コード  utf8mb4 絵文字にも対応。   COLLATE 照合順序  utf8mb4_bin: 全ての区別あり（大文字小文字/全角半角の区別あり） utf8mb4_general_ci: 大文字小文字の区別なし utf8mb4_unicode_ci: 大文字小文字/全角半角の区別なし     CREATE DATABASE sample_db DEFAULT CHARACTER SET = utf8mb4 DEFAULT COLLATE = utf8mb4_bin; データベースの文字コードの変更 #  ALTER DATABASE sample_db DEFAULT CHARACTER SET = utf8mb4; ユーザー #  ユーザーの新規作成 #  CREATE USER \u0026#39;sample_user\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;sample_password\u0026#39;; ユーザーのパスワードの設定 #  ログイン中ユーザーのパスワードの設定 #  -- ログイン中のユーザーを確認 SELECT CURRENT_USER(); -- パスワードを設定 SET PASSWORD = PASSWORD(\u0026#39;sample_password\u0026#39;); 特定のユーザーのパスワードの設定 #  SET PASSWORD FOR \u0026#39;sample_user\u0026#39;@\u0026#39;localhost\u0026#39; = PASSWORD(\u0026#39;sample_password\u0026#39;); ユーザーの権限の設定 #  データベース権限 #  sample_user に sample_db の全テーブルの全ての権限を付与\nGRANT ALL ON sample_db.* TO \u0026#39;sample_user\u0026#39;@\u0026#39;localhost\u0026#39;; sample_user に sample_db の全テーブルの参照/新規登録の権限を付与\nGRANT SELECT, INSERT ON sample_db.* TO \u0026#39;sample_user\u0026#39;@\u0026#39;localhost\u0026#39;; テーブル権限 #  sample_user に sample_db の sample_table の参照権限を付与\nGRANT SELECT ON sample_db.sample_table TO \u0026#39;sample_user\u0026#39;@\u0026#39;localhost\u0026#39;; sample_user の既存の権限を変更せずに 1時間あたりの発行可能クエリ数を制限  MAX_QUERIES_PER_HOUR count クエリ数 MAX_UPDATES_PER_HOUR count 更新件数 MAX_CONNECTIONS_PER_HOUR count コネクション数（同時接続の最大数を制限）  (結果がクエリーキャッシュから得られたクエリーは、MAX_QUERIES_PER_HOUR 制限に対してカウントされません。) count が 0 (デフォルト) である場合、これは、このアカウントに対する制限が存在しないことを示します。  GRANT USAGE ON *.* TO \u0026#39;sample_user\u0026#39;@\u0026#39;localhost\u0026#39; WITH MAX_QUERIES_PER_HOUR 100; カラム権限 #  カラム権限で付与される権限 INSERT, SELECT, UPDATE の後にカッコで囲まれた 1つ以上のカラムを指定\nGRANT SELECT (sample_column_1, sample_column_2), UPDATE (sample_column_1) ON sample_db.sample_table TO \u0026#39;sample_user\u0026#39;@\u0026#39;localhost\u0026#39;; 権限 #  ユーザーごとの権限の一覧 #  SELECT grantee AS user, is_grantable AS is_grantable, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.user_privileges GROUP BY grantee, is_grantable ORDER BY grantee; データベースごとの権限の一覧 #  SELECT grantee AS user, table_schema AS db, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.schema_privileges GROUP BY grantee, table_schema ORDER BY grantee, table_schema; テーブルごとの権限の一覧 #  SELECT grantee AS user, table_schema AS db, table_name AS `table`, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.table_privileges GROUP BY grantee, table_schema, table_name ORDER BY grantee, table_schema, table_name; カラムごとの権限の一覧 #  SELECT grantee AS user, table_schema AS db, table_name AS `table`, column_name AS `column`, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.column_privileges GROUP BY grantee, table_schema, table_name, column_name ORDER BY grantee, table_schema, table_name, column_name; ユーザーごと・データベースごと・テーブルごと・カラムごとの権限の一覧 #  SELECT * FROM ( SELECT grantee AS user, is_grantable AS is_grantable, \u0026#39;-\u0026#39; AS db, \u0026#39;-\u0026#39; AS `table`, \u0026#39;-\u0026#39; AS `column`, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.user_privileges GROUP BY grantee, is_grantable UNION ALL SELECT grantee AS user, is_grantable AS is_grantable, table_schema AS db, \u0026#39;-\u0026#39; AS `table`, \u0026#39;-\u0026#39; AS `column`, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.schema_privileges GROUP BY grantee, is_grantable, table_schema UNION ALL SELECT grantee AS user, is_grantable AS is_grantable, table_schema AS db, table_name AS `table`, \u0026#39;-\u0026#39; AS `column`, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.table_privileges GROUP BY grantee, is_grantable, table_schema, table_name UNION ALL SELECT grantee AS user, is_grantable AS is_grantable, table_schema AS db, table_name AS `table`, column_name AS `column`, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.column_privileges GROUP BY grantee, is_grantable, table_schema, table_name, column_name ) AS authority ORDER BY user, db, `table`, `column`; 日付・時刻 #  MySQL Reference Manual - Date and Time Functions\n現在時刻 #  SELECT NOW(); -- 2020-01-05 13:30:10 現在時刻の時刻のみ #  SELECT CURRENT_TIME(); -- 13:30:10 今日 #  SELECT CURRENT_DATE(); -- 2020-01-05 昨日 #  SELECT CURRENT_DATE() - INTERVAL 1 DAY; -- 2020-01-04 明日 #  SELECT CURRENT_DATE() + INTERVAL 1 DAY; -- 2020-01-06 1週間前 #  SELECT CURRENT_DATE() - INTERVAL 7 DAY; -- 2019-12-29 1週間後 #  SELECT CURRENT_DATE() + INTERVAL 7 DAY; -- 2020-01-12 当月1日 #  SELECT DATE_FORMAT(CURRENT_DATE(), \u0026#39;%Y-%m-01\u0026#39;); -- 2020-01-01 当月末日 #  SELECT LAST_DAY(CURRENT_DATE()); -- 2020-01-31 当月1日〜当月末日 #  SELECT * FROM sample_table WHERE sample_column \u0026gt;= DATE_FORMAT(CURRENT_DATE(), \u0026#39;%Y-%m-01\u0026#39;) AND sample_column \u0026lt;= LAST_DAY(CURRENT_DATE()); 先月1日 #  SELECT DATE_FORMAT(DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH), \u0026#39;%Y-%m-01\u0026#39;); -- 2019-12-01 -- or SELECT DATE_FORMAT(DATE_ADD(CURRENT_DATE(), INTERVAL -1 MONTH), \u0026#39;%Y-%m-01\u0026#39;); -- 2019-12-01 先月末日 #  SELECT LAST_DAY(DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)); -- 2019-12-31 -- or SELECT LAST_DAY(DATE_ADD(CURRENT_DATE(), INTERVAL -1 MONTH)); -- 2019-12-31 来月1日 #  SELECT DATE_FORMAT(DATE_ADD(CURRENT_DATE(), INTERVAL 1 MONTH), \u0026#39;%Y-%m-01\u0026#39;); -- 2020-02-01 来月末日 #  SELECT LAST_DAY(DATE_ADD(CURRENT_DATE(), INTERVAL 1 MONTH)); -- 2020-02-29 昨年 #  SELECT DATE_FORMAT((NOW() - INTERVAL 1 YEAR), \u0026#39;%Y-%m-%d\u0026#39;); 来年 #  SELECT DATE_FORMAT((NOW() + INTERVAL 1 YEAR), \u0026#39;%Y-%m-%d\u0026#39;); 3年前 #  SELECT DATE_FORMAT((NOW() - INTERVAL 3 YEAR), \u0026#39;%Y-%m-%d\u0026#39;); 3年後 #  SELECT DATE_FORMAT((NOW() + INTERVAL 3 YEAR), \u0026#39;%Y-%m-%d\u0026#39;); 日付の差分 #  SELECT DATEDIFF(\u0026#39;2020-12-31 23:59:59\u0026#39;,\u0026#39;2020-12-30\u0026#39;); -- 1 SELECT DATEDIFF(\u0026#39;2020-11-30 23:59:59\u0026#39;,\u0026#39;2020-12-31\u0026#39;); -- -31 年のみ #  SELECT YEAR(\u0026#39;2020-12-31\u0026#39;); -- 2020 月のみ #  SELECT MONTH(\u0026#39;2020-12-31\u0026#39;); -- 12 -- or SELECT DAYOFMONTH(\u0026#39;2020-12-31\u0026#39;); -- 12 日のみ #  SELECT DAY(\u0026#39;2020-12-31\u0026#39;); -- 31 -- or SELECT DAYOFMONTH(\u0026#39;2020-12-31\u0026#39;); -- 31 曜日 #  曜日インデックス (1 = Sunday、2 = Monday、…、7 = Saturday)\nSELECT DAYOFWEEK(\u0026#39;2007-02-03\u0026#39;); -- 7 曜日インデックス (0 = Monday、1 = Tuesday、…6 = Sunday)\nSELECT WEEKDAY(\u0026#39;2008-02-03 22:23:00\u0026#39;); -- 6 曜日（日本語） #  SELECT CASE DATE_FORMAT(NOW(), \u0026#39;%w\u0026#39;) WHEN 0 THEN \u0026#39;日\u0026#39; WHEN 1 THEN \u0026#39;月\u0026#39; WHEN 2 THEN \u0026#39;火\u0026#39; WHEN 3 THEN \u0026#39;水\u0026#39; WHEN 4 THEN \u0026#39;木\u0026#39; WHEN 5 THEN \u0026#39;金\u0026#39; WHEN 6 THEN \u0026#39;土\u0026#39; END; 年内の歴週 #  SELECT WEEKOFYEAR(\u0026#39;2008-02-20\u0026#39;); -- 8 年内の通日 #  SELECT DAYOFYEAR(\u0026#39;2007-02-03\u0026#39;); -- 34 便利関数 #  値がNULLの場合の初期値を返却 IFNULL #  SELECT IFNULL(name, \u0026#39;anonym\u0026#39;) AS name FROM sample_table; 最初のNULL以外の値を返却 COALESCE #  NULL以外の値がない場合 NULLを返却\nSELECT COALESCE( phone_number_smart_private, phone_number_home, phone_number_office, NULL ) AS phone_number FROM sample_table; カンマ区切りで結合 GROUP_CONCAT #  SELECT GROUP_CONCAT(id) AS id -- \u0026#39;1,2,3,4,5\u0026#39; FROM sample_table ORDER BY id; カンマ区切りの値を検索 FIND_IN_SET #  INDEXが効かないため要注意  SELECT * FROM sample_table WHERE FIND_IN_SET(id, \u0026#39;1,2,3,4\u0026#39;); 指定した順番に並べ替え FIELD #  SELECT * FROM sample_table WHERE id IN(1, 2, 3) ORDER BY FIELD(id, 3, 1, 2); 条件分岐 CASE #  SELECT CASE WHEN active_flag = true THEN \u0026#39;ON\u0026#39; WHEN active_flag = false THEN \u0026#39;OFF\u0026#39; ELSE \u0026#39;\u0026#39; END FROM sample_table;  SELECT id, name, score, CASE WHEN score \u0026gt;= 80 THEN \u0026#39;Excellent\u0026#39; WHEN 80 \u0026gt; score AND score \u0026gt;= 70 THEN \u0026#39;Good\u0026#39; WHEN 70 \u0026gt; score AND score \u0026gt;= 60 THEN \u0026#39;Average\u0026#39; WHEN 60 \u0026gt; score AND score \u0026gt;= 50 THEN \u0026#39;Below Average\u0026#39; WHEN 50 \u0026gt; score THEN \u0026#39;Poor\u0026#39; ELSE \u0026#39;\u0026#39; END AS \u0026#39;evaluation\u0026#39; FROM scores; 便利SQL #  SELECT句の値を変数にセット #  SELECT 100, \u0026#39;sample\u0026#39; INTO @HOGE, @FOO;  SELECT @HOGE, @FOO; +-------+--------+ | @HOGE | @FOO | +-------+--------+ | 100 | sample | +-------+--------+ SELECT したデータを INSERT #  INSERT INTO sample_table_1 (sample_column_1, sample_column_2, sample_column_3) SELECT sample_column_1, sample_column_2, sample_column_3 FROM sample_table_2; 一部の値を固定値で登録（以下の例では sample_column_3 に 固定値 \u0026lsquo;hoge\u0026rsquo; を登録\nINSERT INTO sample_table_1 (sample_column_1, sample_column_2, sample_column_3) SELECT sample_column_1, sample_column_2, \u0026#39;hoge\u0026#39; AS sample_column_3 FROM sample_table_2; 特定のカラムの値が重複しているレコードを抽出 HAVING/GROUP BY #  SELECT sample_column, COUNT(*) AS count FROM sample_table GROUP BY sample_column HAVING count \u0026gt; 1 ORDER BY sample_column; 置換 #  文字列を置換して更新 #  UPDATE sample_table SET sample_column = REPLACE(sample_column, \u0026#39;Search String\u0026#39;, \u0026#39;Replacement String\u0026#39;) WHERE sample_column LIKE \u0026#39;%Search String%\u0026#39;; 改行コード #  Carriage Return (CR) #  \\r CHAR(13) Line Feed (LF) #  \\n CHAR(10) 改行コードを半角スペースに置換 #  SELECT REPLACE(REPLACE(REPLACE(sample_column, \u0026#39;\\r\\n\u0026#39;, \u0026#39; \u0026#39;), \u0026#39;\\r\u0026#39;, \u0026#39; \u0026#39;), \u0026#39;\\n\u0026#39;, \u0026#39; \u0026#39;) FROM sample_table; SELECT REPLACE(REPLACE(REPLACE(sample_column, CHAR(13) + CHAR(10), \u0026#39; \u0026#39;), CHAR(13), \u0026#39; \u0026#39;), CHAR(10), \u0026#39; \u0026#39;) FROM sample_table; UPDATE sample_table SET sample_column = REPLACE(REPLACE(REPLACE(sample_column, \u0026#39;\\r\\n\u0026#39;, \u0026#39; \u0026#39;), \u0026#39;\\r\u0026#39;, \u0026#39; \u0026#39;), \u0026#39;\\n\u0026#39;,\u0026#39; \u0026#39;); UPDATE sample_table SET REPLACE(REPLACE(REPLACE(sample_column, CHAR(13) + CHAR(10), \u0026#39; \u0026#39;), CHAR(13), \u0026#39; \u0026#39;), CHAR(10), \u0026#39; \u0026#39;); VIEW #  VIEWの一括DROP文 #  SELECT CONCAT(\u0026#39;DROP VIEW \u0026#39;, table_name, \u0026#39;;\u0026#39;) AS view_drop_sql FROM information_schema.tables WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) AND table_type = \u0026#39;VIEW\u0026#39; ORDER BY table_schema, table_name; VIEWの一覧を作成するCREATE文の一覧 #  SELECT CONCAT(TABLE_SCHEMA, \u0026#39;.\u0026#39;, TABLE_NAME) AS target_view, CONCAT( \u0026#39;CREATE ALGORITHM=UNDEFINED DEFINER=`\u0026#39;, DEFINER, \u0026#39;` SQL SECURITY \u0026#39;, SECURITY_TYPE, \u0026#39; VIEW `\u0026#39;, TABLE_NAME, \u0026#39;` AS \u0026#39;, VIEW_DEFINITION, \u0026#39;;\u0026#39; ) AS create_view FROM information_schema.views; その他 #  SQLの実行計画 #  EXPLAIN SELECT * FROM sample_table WHERE sample_flag = 1; データベースへのコネクション数 #  threads へのアクセスには相互排他ロックは必要なく、サーバーパフォーマンスへの影響は最小です。INFORMATION_SCHEMA.PROCESSLIST と SHOW PROCESSLIST では相互排他ロックが必要になるため、パフォーマンスの低下につながります。 https://dev.mysql.com/doc/refman/5.6/ja/performance-schema-threads-table.html  SELECT processlist_host, COUNT(*) AS connection_count FROM performance_schema.threads WHERE TYPE = \u0026#39;FOREGROUND\u0026#39; GROUP BY processlist_host ORDER BY processlist_host; テーブルのロック状態 #  ストレージエンジンがInnoDBの場合\nSELECT * FROM information_schema.innodb_locks; トランザクション #  BEGIN; UPDATE sample_table SET email = \u0026#39;sample1@email.com\u0026#39; WHERE id = 1; UPDATE sample_table SET email = \u0026#39;sample1@email.com\u0026#39; WHERE id = 2; -- 失敗した場合は ROLLBACK;  COMMIT; or\nSTART TRANSACTION; UPDATE sample_table SET email = \u0026#39;sample1@email.com\u0026#39; WHERE id = 1; UPDATE sample_table SET email = \u0026#39;sample1@email.com\u0026#39; WHERE id = 2; -- 失敗した場合は ROLLBACK;  COMMIT; AUTO_INCREMENT（自動採番） #  AUTO_INCREMENT（自動採番）の値を確認 #  SELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = \u0026#39;sample_database\u0026#39; AND TABLE_NAME = \u0026#39;sample_table\u0026#39;;  SHOW TABLE STATUS WHERE name = \u0026#39;sample_table\u0026#39;;  SHOW TABLE STATUS LIKE \u0026#39;sample_table_prefix%\u0026#39;; AUTO_INCREMENT（自動採番）の値を変更 #  ALTER TABLE sample_table AUTO_INCREMENT = 1000; 設定 #  トランザクションのタイムアウト #  SHOW GLOBAL VARIABLES LIKE \u0026#39;%lock_wait_time_out\u0026#39; +----------------------+--------+ | Variable_name | Value | +----------------------+--------+ | lock_wait_timeout_ms | 300000 | +----------------------+--------+ 1 row in set (0.01 sec) 暗号化 #  MySQL Reference Manual - Encryption and Compression Functions\nSET block_encryption_mode = \u0026#39;aes-256-cbc\u0026#39;; SET @key_str = SHA2(\u0026#39;My secret passphrase\u0026#39;,512); SET @init_vector = RANDOM_BYTES(16); SET @crypt_str = AES_ENCRYPT(\u0026#39;text\u0026#39;,@key_str,@init_vector); SELECT AES_DECRYPT(@crypt_str,@key_str,@init_vector); +-----------------------------------------------+ | AES_DECRYPT(@crypt_str,@key_str,@init_vector) | +-----------------------------------------------+ | text | +-----------------------------------------------+ References #   https://qiita.com/devopsCoordinator/items/9b70e506150888e190be https://qiita.com/CyberMergina/items/f889519e6be19c46f5f4 https://qiita.com/Tocyuki/items/cb613c51a0e9c6e4f23c https://qiita.com/marnie_ms4/items/576055abc355184c51a1 https://qiita.com/fururun02/items/148a1eee68a1fb978f06 https://qiita.com/dodonki1223/items/776a3520e45626773c60  "},{"id":9,"href":"/tech-blog/php/phpmetrics/","title":"PhpMetrics","section":"Php","content":"PhpMetrics #  PhpMetrics とは #   PHPプログラムの静的解析ツール 結果レポートをHTMLで出力 期待する効果  可読性・メンテナンス性・再利用性・テスト容易性の向上 バグ混入率の低下    解析時の評価指標 #   複雑度(循環的複雑度、経路複雑度) オブジェク指向(凝集度、結合度、抽象化) コード量 etc.  インストール #  $ composer require phpmetrics/phpmetrics --dev 使用方法 #  $ php ./vendor/bin/phpmetrics --report-html=myreport.html /path/to/your/sources/ 参考 #   https://phpmetrics.org/ https://github.com/phpmetrics/PhpMetrics  "},{"id":10,"href":"/tech-blog/php/phpunit/","title":"PHPUnit","section":"Php","content":"PHPUnit #  事前準備 #  インストール #  composer.json\n\u0026#34;require-dev\u0026#34;: { \u0026#34;fzaninotto/faker\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;mikey179/vfsstream\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;mockery/mockery\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;phpunit/phpunit\u0026#34;: \u0026#34;*\u0026#34; }, $ composer install バージョンの確認 #  $ ./vendor/bin/phpunit --version 基本 #  \u0026lt;?php use Aaa\\ClassA; use Bbb\\ClassB; use Eee\\ExceptionA; use Mockery; use PHPUnit\\Framework\\TestCase; /** * @coversDefaultClass Aaa\\ClassA */ class ClassATest extends TestCase { // Omitted  /** * This method is called before class.　TestCaseクラス実行前の処理。 * * @return void */ public static function setUpBeforeClass(): void { parent::setUpBeforeClass(); // static 変数を使用（static メソッドのため）  self::$hoge = \u0026#39;some value\u0026#39;; } /** * This method is called before each test.　各テストのメソッドが実行される前の処理。 * * @return void */ protected function setUp(): void { parent::setUp(); // インスタンス変数  $this-\u0026gt;classA = new ClassA(); } /** * This method is called after each test. 各テストのメソッドが実行された後の処理。 * * @return void */ protected function tearDown(): void { parent::tearDown(); } /** * Test ClassA::method1 * * @covers ::method1 カバレッジを算出する際に使用。テスト対象のクラス名（名前空間を含む）とメソッド名を記載。 * @return void */ public function testMethod1ExpectedValue(): void // メソッド名の命名規則：lowerCamelCase test[TargetFunctionName][Description|ExpectedValue]  { $classA = new ClassA(); $actualValue = $classA-\u0026gt;method1(); $this-\u0026gt;assertEquals($expectedValue, $actualValue); // 引数は期待値、実際の値の順番  } } アノテーション #  デフォルトのテスト対象クラスをテスト・クラスのアノテーションで指定 #  メソッドのアノテーションでクラス名の記述を省略しクラス名のタイポを未然に防止 @coversDefaultClass https://phpunit.readthedocs.io/en/latest/annotations.html#coversdefaultclass\n\u0026lt;?php use PHPUnit\\Framework\\TestCase; /** * @coversDefaultClass \\Foo\\CoveredClass */ class CoversDefaultClassTest extends TestCase { /** * @covers ::publicMethod */ public function testSomething() { $o = new Foo\\CoveredClass; $o-\u0026gt;publicMethod(); } } 未実装のテストをスキップする #  use Aaa\\ClassA; // Omitted  /** * Skip unimplemented tests * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $this-\u0026gt;markTestIncomplete(\u0026#39;This test has not been implemented yet.\u0026#39;); } アサーションがないテストをリスキーと見なさない #  /** * Do not consider a test without an assertion as risky * * @covers Aaa\\ClassA::method1ClassA * @doesNotPerformAssertions * @return void */ public function testSampleMethod(): void { // Omitted } PHP Code Sniffer で警告が発生するのを 以下のアノテーションで回避 #  コールバック関数で使用する引数が未使用扱いとなり PHP Code Sniffer で警告が発生するのを 以下のアノテーションで回避\nprotected function getSample() : callable { // PHP Code Sniffer で警告が発生するのを 以下のアノテーションで回避  // @codingStandardsIgnoreStart  return function ($sample) { // Omitted  } // @codingStandardsIgnoreEnd } 例外 #  例外が発生することをテスト #  PHPUnit 8+ #  use Aaa\\ClassA; use Eee\\ExceptionA // Omitted  /** * Test that ExceptionA occurs * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $this-\u0026gt;expectException(ExceptionA::class);　// クラス名（名前空間を含む）の文字列を使用する場合は クラス名::class を使用  $classA = new ClassA(); $classA-\u0026gt;method1ClassA(); } PHPUnit 7 #  use Aaa\\ClassA; use Eee\\ExceptionA // Omitted  /** * Test that Exception occurs * * @covers Aaa\\ClassA::method1ClassA * @expectedException Eee\\ExceptionA * @return void */ public function testSampleMethod(): void { $classA = new ClassA(); $classA-\u0026gt;method1ClassA(); } 例外が発生しないことをテスト #  use Aaa\\ClassA; use Eee\\ExceptionA // Omitted  /** * Test that no ExceptionA occurs * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $classA = new ClassA(); try { $classA-\u0026gt;method1ClassA(); } catch (ExceptionA $e) { $this-\u0026gt;fail(); } $this-\u0026gt;assertTrue(true); } public メソッド,プロパティ #  publicメソッドのモックを作ってテスト #  use Aaa\\ClassA; use Bbb\\ClassB; use Eee\\ExceptionA use Mockery; // Omitted  /** * Test using a mock of public method * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $mockClassB = Mockery::mock(ClassB::class); // 引数は with() で指定、返り値は andReturn() で指定  $mockClassB-\u0026gt;shouldReceive(\u0026#39;method1ClassB\u0026#39;)-\u0026gt;with(\u0026#39;argument value 1\u0026#39;, \u0026#39;argument value 2\u0026#39;)-\u0026gt;andReturn(\u0026#39;some value\u0026#39;); $classA = new ClassA($mockClassB);  $classA-\u0026gt;method1ClassA(); } publicプロパティのモックを作ってテスト #  use Aaa\\ClassA; use Bbb\\ClassB; use Mockery; // Omitted  /** * Test using a mock of public property * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $mockClassB = Mockery::mock(ClassB::class); $mockClassB-\u0026gt;property1ClassB = \u0026#39;some value\u0026#39;; $classA = new ClassA($mockClassB);  $classA-\u0026gt;method1ClassA(); } public staticメソッドのモックを作ってテスト #  @runInSeparateProcess そのテストを個別の PHP プロセスで実行するように指示する\nuse Aaa\\ClassA; use Bbb\\ClassB; use Mockery; // Omitted  /** * Test using a mock of public static method * * @covers Aaa\\ClassA::method1ClassA * @runInSeparateProcess * @preserveGlobalState disabled * @return void */ public function testSampleMethod(): void { $mockClassB = Mockery::mock(\u0026#39;alias:\u0026#39; . ClassB::class); $mockClassB-\u0026gt;shouldReceive(\u0026#39;method1ClassB\u0026#39;)-\u0026gt;andReturn(\u0026#39;some value\u0026#39;);  $classA = new ClassA(); $classA-\u0026gt;method1ClassA(); } publicメソッドのモックを作ってテスト（クラス名がハードコーディングされている場合） #  use Aaa\\ClassA; use Bbb\\ClassB; use Mockery; // Omitted  /** * Test using a mock of public method if a class name is hard coded * * @covers Aaa\\ClassA::method1ClassA * @runInSeparateProcess * @preserveGlobalState disabled * @return void */ public function testSampleMethod(): void { $mockClassB = Mockery::mock(\u0026#39;overload:\u0026#39; . ClassB::class); $mockClassB-\u0026gt;shouldReceive(\u0026#39;method1ClassB\u0026#39;)-\u0026gt;andReturn(\u0026#39;some value\u0026#39;);  $classA = new ClassA(); $classA-\u0026gt;method1ClassA(); } 自クラスのpublicメソッドのモックを作ってテスト #  use Aaa\\ClassA; use Mockery; // Omitted  /** * Test using a mock of public method of the class itself * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $partialMockClassA = Mockery::mock(ClassA::class)-\u0026gt;makePartial(); $partialMockClassA-\u0026gt;shouldReceive(\u0026#39;method2ClassA\u0026#39;)-\u0026gt;andReturn(\u0026#39;some value\u0026#39;);  $partialMockClassA-\u0026gt;method1ClassA(); } 依存クラスのコンストラクタ呼び出しをモックしてテスト #  namespace Aaa; use Bbb\\ClassB; // Omitted  class ClassA { public function method1ClassA() { $classB = $this-\u0026gt;newClassB();  // Omitted  } /** * Wrap the instance generation process because the mock of the constructor cannot be created * コンストラクタのモックは作れないのでインスタンス生成処理をラップする */ public function newClassB(): ClassB { return new ClassB(); } } use Aaa\\ClassA; use Bbb\\ClassB; use Mockery; // Omitted  /** * Mock constructor call of a dependent class and test * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $mockClassB = Mockery::mock(ClassB::class); $partialMockClassA = Mockery::mock(ClassA::class)-\u0026gt;makePartial(); $partialMockClassA-\u0026gt;shouldReceive(\u0026#39;newClassB\u0026#39;)-\u0026gt;andReturn($mockClassB);  $partialMockClassA-\u0026gt;method1ClassA(); } チェインしたpublicメソッドのモックを作ってテスト #  チェーンしたメソッドが引数をとる場合は1つずつ Mockery でモック化する必要あり\nuse Aaa\\ClassA; use Bbb\\ClassB; use Mockery; // Omitted  /** * Test using a mock of chained public method * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $mockClassB = Mockery::mock(ClassB::class); $mockClassB-\u0026gt;shouldReceive(\u0026#39;method1ClassB-\u0026gt;method2ClassB\u0026#39;)-\u0026gt;andReturn(\u0026#39;some value\u0026#39;); $classA = new ClassA($mockClassB);  $classA-\u0026gt;method1ClassA(); } [Laravel] ファサードのpublicメソッドのモックを作ってテスト #  use Aaa\\ClassA; use Fff\\FacadeA; use Mockery; // Omitted  /** * Test using a mock of a public method of Laravel Facade * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { FacadeA::shouldReceive(\u0026#39;method1FacadeA\u0026#39;)-\u0026gt;andReturn(\u0026#39;some value\u0026#39;);  $classA = new ClassA(); $classA-\u0026gt;method1ClassA(); } [Laravel] Eloquentのpublicメソッドのモックを作ってテスト #  use Aaa\\ClassA; use Eee\\EloquentA; use Mockery; // Omitted  /** * Test using a mock of a public method of Laravel Eloquent * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $mockEloquentA = Mockery::mock(EloquentA::class); $mockEloquentA-\u0026gt;shouldReceive(\u0026#39;method1EloquentA\u0026#39;)-\u0026gt;andReturn(\u0026#39;some value\u0026#39;); $classA = new ClassA($mockEloquentA);  $classA-\u0026gt;method1ClassA(); } [Laravel] Eloquentのpublicプロパティのモックを作ってテスト #  use Aaa\\ClassA; use Eee\\EloquentA; use Mockery; // Omitted  /** * Test using a mock of a public property of Laravel Eloquent * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $mockEloquentA = Mockery::mock(EloquentA::class)-\u0026gt;makePartial(); $mockEloquentA-\u0026gt;property1EloquentA = \u0026#39;some value\u0026#39;; $classA = new ClassA($mockEloquentA);  $classA-\u0026gt;method1ClassA(); } private/protected #  private/protectedメソッドをテスト #  use Aaa\\ClassA; use ReflectionMethod; // Omitted  /** * Test private/protected methods * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $classA = new ClassA(); $reflectionMethod1ClassA = new ReflectionMethod($classA, \u0026#39;method1ClassA\u0026#39;); $reflectionMethod1ClassA-\u0026gt;setAccessible(true); $reflectionMethod1ClassA-\u0026gt;invoke($classA); } private/protectedプロパティの値を書き換えてテスト #  use Aaa\\ClassA; use ReflectionClass; // Omitted  /** * Rewrite private/protected property value and test * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $classA = new ClassA(); $reflectionClassA = new ReflectionClass($classA); $reflectionProperty1ClassA = $reflectionClassA-\u0026gt;getProperty(\u0026#39;property1ClassA\u0026#39;); $reflectionProperty1ClassA-\u0026gt;setAccessible(true); $reflectionProperty1ClassA-\u0026gt;setValue($classA, \u0026#39;some value\u0026#39;);  $classA-\u0026gt;method1ClassA(); } private/protectedプロパティの値をテスト #  use Aaa\\ClassA; use ReflectionClass; // Omitted  /** * Test private/protected property value * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $classA = new ClassA(); $classA-\u0026gt;method1ClassA(); $reflectionClassA = new ReflectionClass($classA); $reflectionProperty1ClassA = $reflectionClassA-\u0026gt;getProperty(\u0026#39;property1ClassA\u0026#39;); $reflectionProperty1ClassA-\u0026gt;setAccessible(true); $valueReflectionProperty1ClassA = $reflectionProperty1ClassA-\u0026gt;getValue($classA);  $this-\u0026gt;assertEquals(\u0026#39;some value\u0026#39;, $valueReflectionProperty1ClassA); } ファイル #  仮想ファイルを使ってファイルの読み書きをテスト #  use Aaa\\ClassA; use org\\bovigo\\vfs\\vfsStream; // Omitted  /** * Test reading and writing a file using a virtual file * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $root = vfsStream::setup(\u0026#39;root\u0026#39;); vfsStream::newFile(\u0026#39;file\u0026#39;)-\u0026gt;at($root)-\u0026gt;setContent(\u0026#39;some contents\u0026#39;); $path = vfsStream::url(\u0026#39;root/file\u0026#39;);  $classA = new ClassA($path); $classA-\u0026gt;method1ClassA(); } その他 #  無名クラスを使ってトレイトをテスト #  トレイトとは\nhttps://www.php.net/manual/ja/language.oop5.traits.php\nPHPのような単一継承言語でコードを再利用するための仕組みの一つ。\nトレイトは単にいくつかの機能をまとめるためだけのもの。\nトレイト自身のインスタンスを作成することはできない。\nuse Aaa\\ClassA; use Ttt\\TraitA; // Omitted  /** * Test a trait using an anonymous class * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $classUsingTrait = new class($property) { use TraitA; public function __construct($property) { $this-\u0026gt;method1TraitA($property); } }; $classUsingTrait-\u0026gt;method2TraitA(); } References #   PHPUnit のイディオム https://qiita.com/ngmy/items/08af9f74f6308ef6281c PHPUnit のアノテーション https://phpunit.readthedocs.io/ja/latest/annotations.html Mockery のクラス指定 https://qiita.com/prex-uchida/items/7563f7f33153da463802 Mockery https://qiita.com/ttn_tt/items/a35638ab12d4dc2ea488 Mockery（モック化用ライブラリ） https://github.com/mockery/mockery vfsStream（ファイル操作用ライブラリ） https://github.com/bovigo/vfsStream Trait https://www.php.net/manual/ja/language.oop5.traits.php  "},{"id":11,"href":"/tech-blog/database/postgresql/","title":"PostgreSQL","section":"Database","content":"PostgreSQL #  PostgreSQL\u0026rsquo;s Information #  Table Schema #  SELECT col.table_name, col.ordinal_position, -- No.  col.column_name, col.data_type, col.character_maximum_length, -- 文字数(文字列型)  col.character_octet_length, -- バイト数(文字列型)  col.numeric_precision, -- 桁数(数値型)  col.numeric_scale, -- 小数部(数値型)  col.datetime_precision, -- ミリ秒以下(日付型)  col.interval_type, -- インターバルの単位(日付型)  col.is_nullable, -- NULLを許可するか否か  col.column_default -- 初期値 FROM information_schema.columns col WHERE col.table_name = \u0026#39;sample_table\u0026#39; -- 対象テーブル名を指定 ORDER BY col.table_name, col.ordinal_position "},{"id":12,"href":"/tech-blog/todo/","title":"TODO","section":"Tech Blog","content":"TODO #  Topic #   Container  Docker★ Kubernetes istio   English  IT English  https://qiita.com/Ted-HM/items/7dde25dcffae4cdc7923   TOEIC★   Database  PostgreSQL   Programing Language  Golang★ PHP  phpcs   Typescript Python Kotlin   Framework/Library  Laravel   CI/CD  Jenkins CircleCI   Agile  Scrum Jira Redmine Team Building Project Management https://qiita.com/br_branch/items/bbbaba835b45e79efa5b   VCS  Git Github   Public Cloud  AWS GCP Azure   Check Sheet  Coding Unit Test/Functional Test Integration Test   Tool  Excel    Soft Skill #   Presence Management Power and Influence LinkedIn Resume/CV Interview  Topic - In Progress #   MySQL Microservices PHPUnit  faker★    Topic - Done #   Hugo phpmetrics VS Code  Improvement #   Mermaid Diagram https://mermaid-js.github.io/mermaid/#/examples  mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) graph LR; A(A) --- B(B)  last updated date of the articles profile books links left navi i18n(English, Japanese) https://gohugo.io/content-management/multilingual/ favicon logo Twitter hands-on site hands-on movie  "},{"id":13,"href":"/tech-blog/tool/vscode/","title":"VS Code","section":"Tool","content":"VS Code (Visual Studio Code) #  設定 #  設定を開く #   Macの場合：Code \u0026gt; Preferences... \u0026gt; Settings  ファイルを常に新しいタブで開く方法 #   workbench.editor.enablePreview　を検索しチェックを解除  プロジェクトを常に新しいウィンドウで開く方法 #   window.openFoldersInNewWindow を検索し on を選択  ショートカット #  開く・閉じる #     内容 Mac Windows     設定を開く command + , ctrl + ,   コマンドパレットを開く command + shift + p ctrl + shift + p   新しいウィンドウを開く command + shift + n ctrl + shift + n   ファイル名を指定して開く command + p ctrl + p   アクティブなファイルを閉じる command + w ctrl + w   全てのファイル閉じる command + k w ctrl + k w    拡大・縮小 #     内容 Mac Windows     拡大(ズームイン) command + = ctrl + =   縮小(ズームアウト) command + - ctrl + -   全画面表示 command + control + - F11    コピー・切り取り・削除 #     内容 Mac Windows     行末尾のスペースを削除 command + k x ctrl + k x   行のインデントを追加 command + ] ctrl + ]   行のインデントを削除 command + [ ctrl + [   行のコピー(未選択時) command + c ctrl + c   行の切り取り(未選択時) command + x ctrl + x   ファイルの相対パスをコピー shift + option + command + c -   ファイルの絶対パスをコピー option + command + c -   コメント化/コメント解除 option + shift + a ctrl + /    選択 #     内容 Mac Windows     矩形選択 shift + option + マウス・ドラッグ shift + alt + マウス・ドラッグ    検索 #     内容 Mac Windows     プロジェクト全体を検索 command + shift + f ctrl + shift + f    移動 #     内容 Mac Windows     カーソル行を下に移動 option + ↓ alt + ↓   カーソル行を下に移動 option + ↑ alt + ↑   ファイル履歴を表示し移動 control + tab ctrl + tab   サイドバーにフォーカスを移動 command + 0 ctrl + 0   指定行に移動 control + g ctrl + g   最後に編集した箇所に移動 command + k q ctrl + k q   対応するカッコに移動 command + shift + \\ ctrl + shift + ¥   前に移動(戻る) option + ← alt + ←   次に移動(進む) option + → alt + →    参考 #   https://qiita.com/TakahiRoyte/items/cdab6fca64da386a690b  "}]