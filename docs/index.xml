<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tech Blog</title><link>https://exaream.github.io/tech-blog/</link><description>Recent content on Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>exaream</copyright><lastBuildDate>Sat, 31 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://exaream.github.io/tech-blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Memo</title><link>https://exaream.github.io/tech-blog/go/memo/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/go/memo/</guid><description>Go Memo # macOS でパスを通す方法 # echo &amp;#34;export GOPATH=$HOME/go&amp;#34; &amp;gt;&amp;gt; ~/.bash_profile echo &amp;#34;export PATH=$PATH:$GOPATH/bin&amp;#34; &amp;gt;&amp;gt; ~/.bash_profile source ~/.bash_profile コンパイル, バイナリ # コンパイルして実行 # バイナリ（実行可能ファイル）の生成なし
$ go run main.go $ go run . $ go run pkgname コンパイルしてバイナリを生成 # バイナリ（実行可能ファイル）の生成あり
$ go build main.go $ go build . $ go build pkgname 静的解析によるミスの検出 # バグと思われるミスを検出 # go test 実行時に自動で実行される The Go Playground でも実行される
$ go vet main.</description></item><item><title>Go Test</title><link>https://exaream.github.io/tech-blog/go/test/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/go/test/</guid><description>Go Test # Unit Test # Run # Run all unit tests # $ go test ./... Show detailed information
$ go test ./... -v Disable test cache
$ go test ./... -count=1 Run a method of a unit test # $ go test ./mypkg/ -run TestSample Coverage # Output coverage to a terminal
$ go test -cover ./... Output the coverage profile to a file and view it in a browser</description></item><item><title>Python Memo</title><link>https://exaream.github.io/tech-blog/python/memo/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/python/memo/</guid><description>Python Memo # Install macOS # Check the default version of Python on macOS # $ python --version Python 2.7.16 $ which python /usr/bin/python Install the latest version using Homebrew # brew update Update Homebrew itself brew install Install package $ brew update $ brew install python Add Python&amp;rsquo;s path # $ vi ~/.bash_profile export PATH=&amp;#34;/usr/local/opt/python/libexec/bin:$PATH&amp;#34; $ source ~/.bash_profile Check that the latest version is available # $ python --version Python 3.</description></item><item><title>Python OCR</title><link>https://exaream.github.io/tech-blog/python/ocr/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/python/ocr/</guid><description>Python OCR # Overview # How to get text from an image using Tesseract which is an OCR (Optical Character Recognition) engine and Python.
Precondition # Version # macOS: Big Sur 11.4 Docker: 20.10.5, build 55c4c88 docker-compose: 1.29.0, build 07737305 Simple sample # Version # Debian GNU/Linux: 10 (buster) Python: 3.9.6 pyocr: 0.8 opencv-python: 4.5.3.56 Directory structure # python-ocr/ ├── README.</description></item><item><title>Alpine Linux</title><link>https://exaream.github.io/tech-blog/linux/alpine-linux/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/linux/alpine-linux/</guid><description>Alpine Linux # Improvement of date command # Before # $ LAST_MONTH=`date -d &amp;#34;1970.01.01-00:00:$(( $( date +\%s ) - $(( 24 * 60 * 60 * 30 )) ))&amp;#34; +%Y%m` $ echo $LAST_MONTH Add coreutils package # apk add --update coreutils &amp;amp;&amp;amp; rm -rf /var/cache/apk/* After # $ LAST_MONTH=`date +\%Y\%m -d &amp;#39;last month&amp;#39;` $ echo $LAST_MONTH</description></item><item><title>Cron Memo</title><link>https://exaream.github.io/tech-blog/cron/memo/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/cron/memo/</guid><description>Cron # 日時・時刻・インターバルの指定 # 記述方法 # 時，日，月，曜日，実行コマンド 記号による指定 # 記号 内容 * 全範囲指定(ワイルドカード) - 範囲指定 / インターバル指定 , 区切り指定 曜日の指定 # 略語または数字での指定が可能 略語 数字 sun 0 mon 1 tue 2 wed 3 thu 4 fri 5 sat 6 月の指定 # 略語または数字での指定が可能 略語 数字 jan 1 feb 2 mar 3 apr 4 may 5 jun 6 jul 7 aug 8 sep 9 oct 10 nov 11 dec 12 注意事項 # 実行ディレクトリ # cron ジョブ実行時のカレントディレクトリ = ユーザのホームディレクトリ 実行コマンドの指定は「絶対パスを指定」または「実行ディレクトリにcdで移動」すること 環境変数 # cron ジョブ実行時は最低限の環境変数のみセットされた状態、パスが通っていないケースがあるため注意 shell内での指定と異なり、右辺の環境変数が展開されないため注意 # NG PATH=/usr/local/bin:$PATH # OK PATH=/usr/local/bin:/usr/bin:/bin 毎分指定 # 日次のバッチを誤って毎分実行しないよう注意 # NG * 5 * * * /path/to/backup.</description></item><item><title>Docker Memo</title><link>https://exaream.github.io/tech-blog/docker/memo/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/docker/memo/</guid><description>Docker Memo # Dockerfile # command description FROM ビルドするイメージのベースイメージ RUN イメージをビルドする際、コンテナで実行するコマンドを定義 COPY ホスト側からコンテナ側にファイルやディレクトリをコピー ADD COPY の機能に加え、アーカー部の自動展開やURLを指定してファイルやディレクトリをコンテナに追加。OSのベースイメージ作成時のような特殊なケースで活用 CMD コンテナがフォアグラウンドで実行するコマンドを定義 ENTRYPOINT コンテナを実行可能ファイルとして使用する際に定義する際に定義するコマンド。CMD と ENTRYPOINT は併用可能 ARG docker image build 時に利用する変数 ENV コンテナ内の環境変数を定義 EXPOSE コンテナが公開するポート VOLUME ホストや他のコンテナからマウントできるポイントを作成 LABEL イメージに追加するメタデータ STOPSIGNAL コンテナに送られて終了するシステムコール信号を設定 HEALTHCHECK コンテナ内でコマンドを実行し、その結果をヘルスチェック(死活監視)として利用 USER コンテナ実行時のコンテナユーザー。イメージビルド時、USER 定義後の RUN もそのユーザで実行される WORKDIR コンテナ内の作業ディレクトリ ONBUILD コンテナ内で実行するコマンドを定義するが、定義したイメージでは実行されない。ONBUILD を定義したベースイメージを利用するイメージのビルド時に実行される Image # Dockerfile から Docker イメージをビルド # $ docker image build [options] (Dockerfileを配置したディレクトリのパス|URL) Docker Hub にホストされている Docker イメージを検索 # $ docker search [options] 検索キーワード Inspection # Get instance&amp;rsquo;s information # $ docker inspect &amp;lt;CONTAINER ID|NAME&amp;gt; Get an instance’s IP address # $ docker inspect --format=&amp;#39;{{range .</description></item><item><title>Docker Swarm</title><link>https://exaream.github.io/tech-blog/docker/docker-swarm/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/docker/docker-swarm/</guid><description>Docker Swarm # Swarm クラスタを初期化 # docker swarm init [options] Swarm クラスタに node もしくは manager を追加 # docker swarm join [options] managerホスト:ポート Swarm クラスタから node もしくは manager を離脱 # docker swarm leave [options] Swarm クラスタに Stack をデプロイ # docker stack deploy [options] Stack名 Swarm クラスタにデプロイされている Stack 一覧を表示 # docker stack (ls|list) [options] Stack 内で実行されているタスクを表示 # docker stack ps [options] Stack名 Swarm クラスタからStackを削除 # docker stack (rm|remove|down) [options] Stack名.</description></item><item><title>docker-compose</title><link>https://exaream.github.io/tech-blog/docker/docker-compose/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/docker/docker-compose/</guid><description>Docker Compose # Basic operation # Run containers # カレントディレクトリの docker-compose.yml に記載したコンテナ群を起動 初回起動時にコンテナ群をつなぐユーザ定義・ブリッジ・ネットワークも自動生成 フォアグラウンドモードで起動する場合(ターミナルにコンテナログを出力) $ docker-compose up バックグラウンドモードで起動する場合 $ docker-compose up -d Stop containers # フォアグラウンドモードで起動した場合 ターミナルで Ctrl+C 押下 バックグラウンドモードで起動した場合 $ docker-compose stop Rebuild an image # $ docker-compose build Remove containers and networks # $ docker-compose down Stop and remove all (containers, images, volumes, networks) 滅びの呪文 # docker-compose down --rmi all --volumes --remove-orphans</description></item><item><title>Excel</title><link>https://exaream.github.io/tech-blog/tool/excel/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/tool/excel/</guid><description>Excel # 検索 # VLOOKUP(検索値,範囲,列位置,FALSE) # e.g.) A1 の値が sample シートの範囲(A1:A10) にある場合 B 列の値を出力
=VLOOKUP(A1,sample!$A$1:$B$10,2,FALSE) 特定の値があるか判定 # =IF(COUNTIF(A1:B10,&amp;#34;aaa&amp;#34;)&amp;gt;0,&amp;#34;Yes&amp;#34;,&amp;#34;No&amp;#34;) 日付・時刻 # 曜日 # e.g.) A1 の日時を日本語の曜日の短縮形で表示。
=TEXT(A1,&amp;#34;aaa&amp;#34;) 第2引数 description aaaa 日本語の曜日 aaa 日本語の曜日の短縮形 dddd 英語の曜日 ddd 英語の曜日の曜日の短縮形 時間の差分 # 時間(差分が24時間未満の場合のみ) # =TEXT(B1-A1,&amp;#34;hh:mm:ss&amp;#34;) 日数 # =DATEDIF(A1,B1,&amp;#34;d&amp;#34;) 週数 # =DATEDIF(A1,B1,&amp;#34;d&amp;#34;)/7 月数 # =DATEDIF(A1,B1,&amp;#34;m&amp;#34;) 年数 # =DATEDIF(A1,B1,&amp;#34;y&amp;#34;) ハイパーリンク # シートへのリンク # B1 に記載されたシート内の A1 へ移動</description></item><item><title>Git Memo</title><link>https://exaream.github.io/tech-blog/git/memo/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/git/memo/</guid><description>Git Memo # 実用的なコマンド # 指定したフォーマットでコミット・ログを表示 # $ git log --graph --date=iso --pretty=format:&amp;#34;[%ad] %h %an : %s&amp;#34; 特定の注釈を含むコミットを検索 # $ git log --oneline --grep &amp;#34;&amp;lt;pattern&amp;gt;&amp;#34; コミット間の変更ファイル一覧を表示 # $ git diff --stat &amp;lt;Commit A&amp;gt; &amp;lt;Commit B&amp;gt; ファイル名のみ表示する場合
$ git diff --stat --name-only &amp;lt;Commit A&amp;gt; &amp;lt;Commit B&amp;gt; タグの一覧を表示 # $ git tag -n Git 設定 # バージョンを確認 # $ git --version 設定の一覧を表示 # 設定適用範囲</description></item><item><title>Git Tool</title><link>https://exaream.github.io/tech-blog/git/tool/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/git/tool/</guid><description>Git Tool # git-split-diffs # Display the results of the git diff command side by side like Github. Precondition # npm or yarn Install git-split-diffs # If you use npm
$ npm install -g git-split-diffs or, if you use yarn
$ yarn global add git-split-diffs Add configuration of git-split-diffs to .gitconfig # $ git config --global core.pager &amp;#34;git-split-diffs --color | less -RFX&amp;#34; Check # $ git log -p $ git diff &amp;lt;branch A&amp;gt; &amp;lt;branch B&amp;gt; Additional info # If you want to use light theme</description></item><item><title>Glossary</title><link>https://exaream.github.io/tech-blog/glossary/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/glossary/</guid><description>用語集 # 静的解析 # コードを実行せずにおこなう検証。 凝集度 # クラスやメソッドがそのクラスの責任に集中しているかを示す尺度。 凝集度が低いケース：メソッドが、クラスの責任範囲と関連性の低い様々な処理をおこなったり、関連性の低いデータを扱っている場合、修正が複数のクラスにまたがって影響する可能性が高まり、保守性が低下。 結合度 # クラスやメソッドを利用・保守しやすいよう、その内容が整理・分割できているかを示す尺度。 結合度が高いケース：利用する側のクラスやメソッドが、利用される側のクラスやメソッドの内容を把握（依存）している割合が高いほど、保守性やテスト容易性が低下。 参考 # 凝集度・結合度・循環的複雑度 https://qiita.com/oda-kazuki/items/a16b43dc624429de7db3 凝集度 https://ja.wikipedia.org/wiki/%E5%87%9D%E9%9B%86%E5%BA%A6 結合度 https://ja.wikipedia.org/wiki/%E7%B5%90%E5%90%88%E5%BA%A6</description></item><item><title>gRPC</title><link>https://exaream.github.io/tech-blog/api/grpc/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/api/grpc/</guid><description>gRPC # RPC とは # Remote Procedure Call 直訳すると「遠隔手続き呼び出し」 あるプログラムがネットワーク上の異なる場所に配置されたプログラムの処理を呼び出して実行すること サン・マイクロシステムズ社がNFS(分散ファイルシステム)の一部で使用するために1976年に開発</description></item><item><title>Hugo</title><link>https://exaream.github.io/tech-blog/tool/hugo/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/tool/hugo/</guid><description>Hugo # What&amp;rsquo;s Hugo? # Hugo is a fast and flexible static site generator made of Golang.
https://gohugo.io/about/ Preparation # Create a git repository using Github # Repositories &amp;gt; New Repository name: sample Click &amp;ldquo;Create repository&amp;rdquo; Install Hugo on macOS # $ brew install hugo Build a blog using Hugo # $ GITHUB_USERNAME=xxxx $ GIT_REPOSITORY=sample $ hugo new site ${GIT_REPOSITORY} $ cd ${GIT_REPOSITORY} $ echo &amp;#34;# ${GIT_REPOSITORY}&amp;#34; &amp;gt;&amp;gt; README.</description></item><item><title>Linux Memo</title><link>https://exaream.github.io/tech-blog/linux/memo/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/linux/memo/</guid><description>Linux Memo # コマンド入力履歴 # history コマンドの主なオプション # option description 整数値 履歴の末尾から指定した行数分を表示 -c 履歴一覧からすべての項目を削除 -d 番号 指定した番号の履歴項目を削除 -a 履歴ファイルに現在のセッションの履歴を追加 -n 履歴ファイルからまだ読み込まれていない行を全て読み込み -r 履歴ファイルを読み込み、内容を履歴一覧に追加 -w 現在の履歴を履歴ファイルに上書き コマンド入力履歴を表示 # 履歴を末尾から10件分表示
$ history 10 コマンドライン上で !番号 と入力することで指定したコマンドを実行
例) 履歴の末尾から5件目のコマンドを実行する場合
!5 履歴の件数が多い場合 head コマンドで冒頭のみ表示
$ history | head コマンド入力履歴を削除 # 指定した番号の履歴を削除 例) 5番の履歴を削除</description></item><item><title>Mac</title><link>https://exaream.github.io/tech-blog/tool/iterm2/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/tool/iterm2/</guid><description>iTerm2 # What&amp;rsquo;s iTerm2 # iTerm2 is a terminal emulator for macOS
https://iterm2.com/ Shortcuts # command description command + N New Window command + T New Tab command + return Maximize Window command + (◀ or ▶) Move Tab shift + command + D Split Horizontally with Current Profile command + D Split Vertically with Current Profile command + F Find option + command + F Replace shift + command + F Find in Files shift + command + H Replace in Files How to increase scrollback lines # iTerm2 &amp;gt; Preferences &amp;gt; Profiles Select a profile from Profile Name Click Terminal tab Change Scrollback lines: or check Unlimited scrollback How to input to multiple consoles at the same time # Shell &amp;gt; Broadcast Input &amp;gt; Broadcast input to All Panes in Current Tab How to output console log automatically # $ mkdir -p /Users/`whoami`/iTerm2/ iTerm2 &amp;gt; Preferences &amp;gt; Profiles Select a profile from Profile Name Click Session tab Check Automatically log session input to files in: Check log plain text Input the directory path How to change the background color of iTerm2 for each environment # Add color schemes to iTerm2 by referring to the following URL.</description></item><item><title>Mac</title><link>https://exaream.github.io/tech-blog/tool/mac/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/tool/mac/</guid><description>Mac # Box Drive # How to display Box Drive context menu System Preferences &amp;gt; Extensions Checl Box &amp;gt; Finder Extensions Siri # How to disable Siri # https://pc-karuma.net/mac-touch-bar-delete-siri-button/
Preview # https://support.apple.com/en-us/guide/preview/prvw15636/mac
How to use two Mac apps side by side in Split View # https://support.apple.com/en-us/HT204948</description></item><item><title>MailCatcher</title><link>https://exaream.github.io/tech-blog/tool/mailcatcher/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/tool/mailcatcher/</guid><description>MailCatcher # Simple SMTP server made of Ruby. You can check emails of web app on your local environment. Docker container of MailCatcher # docker-compose.yml
mailcatcher: image: schickling/mailcatcher:latest ports: - 1080:1080 docker-compose up -d http://localhost:1080
.env config of Laravel container # .env.local
MAIL_DRIVER=smtp MAIL_HOST=mailcatcher MAIL_PORT=1025 MAIL_USERNAME=null MAIL_PASSWORD=null MAIL_ENCRYPTION=null # Optional configuration MAIL_FROM_ADDRESS=mailcatcher@example.com MAIL_FROM_NAME=&amp;#34;${APP_NAME}&amp;#34; SMTP config of Laravel container # /etc/ssmtp/ssmtp.conf
root=postmaster mailhub=mailcatcher:1025 rewriteDomain=foo-bar-baz.com References # Github Mail Catcher ローカルの開発環境にSMTPを整備する Laravelローカル環境構築 メール送信の設定＋MailCatcher</description></item><item><title>MySQL Memo</title><link>https://exaream.github.io/tech-blog/mysql/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/mysql/</guid><description>MySQL Memo # Preparation # Install to macOS # $ brew install mysql Start # $ mysql.server start Starting MySQL ....... SUCCESS! Check the vertion # $ mysql --version mysql Ver 8.0.26 for macos11.3 on x86_64 (Homebrew) Make initial settings # $ mysql_secure_installation パスワード強度検証プラグインの利用有無 パスワード強度の選択 root ユーザのパスワード設定 匿名ユーザの削除 リモートからの root ユーザとしてのログインの禁止 サンプル用 test データベースの削除 $ mysql_secure_installation Securing the MySQL server deployment. Connecting to MySQL using a blank password.</description></item><item><title>Node Memo</title><link>https://exaream.github.io/tech-blog/node/memo/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/node/memo/</guid><description>Node # Install Homebrew # Homebrew is the package manager for macOS. https://docs.brew.sh/Installation $ /bin/bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&amp;#34; $ brew -v Homebrew 3.2.13 ... Install nodebrew (using Homebrew) # nodebrew is the package manager for Node.js. You can install multiple versions of Node.js and switch between them etc. $ brew install nodebrew $ which nodebrew /usr/local/bin/nodebrew $ nodebrew -v nodebrew 1.1.0 $ nodebrew setup .</description></item><item><title>PhpMetrics</title><link>https://exaream.github.io/tech-blog/php/phpmetrics/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/php/phpmetrics/</guid><description>PhpMetrics # PhpMetrics とは # PHPプログラムの静的解析ツール 結果レポートをHTMLで出力 期待する効果 可読性・メンテナンス性・再利用性・テスト容易性の向上 バグ混入率の低下 解析時の評価指標 # 複雑度(循環的複雑度、経路複雑度) オブジェク指向(凝集度、結合度、抽象化) コード量 etc. インストール # $ composer require phpmetrics/phpmetrics --dev 使用方法 # $ php ./vendor/bin/phpmetrics --report-html=myreport.html /path/to/your/sources/ 参考 # https://phpmetrics.org/ https://github.com/phpmetrics/PhpMetrics</description></item><item><title>PHPUnit</title><link>https://exaream.github.io/tech-blog/php/phpunit/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/php/phpunit/</guid><description>PHPUnit # 事前準備 # インストール # composer.json
&amp;#34;require-dev&amp;#34;: { &amp;#34;fzaninotto/faker&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;mikey179/vfsstream&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;mockery/mockery&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;phpunit/phpunit&amp;#34;: &amp;#34;*&amp;#34; }, $ composer install バージョンの確認 # $ ./vendor/bin/phpunit --version 基本 # &amp;lt;?php use Aaa\ClassA; use Bbb\ClassB; use Eee\ExceptionA; use Mockery; use PHPUnit\Framework\TestCase; /** * @coversDefaultClass Aaa\ClassA */ class ClassATest extends TestCase { // Omitted /** * This method is called before class.　TestCaseクラス実行前の処理。 * * @return void */ public static function setUpBeforeClass(): void { parent::setUpBeforeClass(); // static 変数を使用（static メソッドのため） self::$hoge = &amp;#39;some value&amp;#39;; } /** * This method is called before each test.</description></item><item><title>PostgreSQL Memo</title><link>https://exaream.github.io/tech-blog/postgresql/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/postgresql/</guid><description>PostgreSQL Memo # PostgreSQL&amp;rsquo;s Information # Table Schema # SELECT col.table_name, col.ordinal_position, -- No. col.column_name, col.data_type, col.character_maximum_length, -- 文字数(文字列型) col.character_octet_length, -- バイト数(文字列型) col.numeric_precision, -- 桁数(数値型) col.numeric_scale, -- 小数部(数値型) col.datetime_precision, -- ミリ秒以下(日付型) col.interval_type, -- インターバルの単位(日付型) col.is_nullable, -- NULLを許可するか否か col.column_default -- 初期値 FROM information_schema.columns col WHERE col.table_name = &amp;#39;sample_table&amp;#39; -- 対象テーブル名を指定 ORDER BY col.table_name, col.ordinal_position</description></item><item><title>TODO</title><link>https://exaream.github.io/tech-blog/todo/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/todo/</guid><description>TODO # Topic # Container Docker★ Kubernetes istio English IT English https://qiita.com/Ted-HM/items/7dde25dcffae4cdc7923 TOEIC★ Database PostgreSQL Programing Language Golang★ PHP phpcs Typescript Python Kotlin Framework/Library Laravel CI/CD Jenkins CircleCI Agile Scrum Jira Redmine Team Building Project Management https://qiita.com/br_branch/items/bbbaba835b45e79efa5b VCS Git Github Public Cloud AWS GCP Azure Check Sheet Coding Unit Test/Functional Test Integration Test Tool Excel Soft Skill # Presence Management Power and Influence LinkedIn Resume/CV Interview Topic - In Progress # MySQL Microservices PHPUnit faker★ Topic - Done # Hugo phpmetrics VS Code Improvement # Mermaid Diagram https://mermaid-js.</description></item><item><title>Ubuntu</title><link>https://exaream.github.io/tech-blog/linux/ubuntu/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/linux/ubuntu/</guid><description>Ubuntu # apt-get # command description apt-get install &amp;lt;package&amp;gt; 指定パッケージのインストールと更新 apt-get update パッケージ・リストを更新 apt-get upgrade インストール済パッケージを更新 apt-get dist-upgrade 追加で必要なパッケージをインストール、不要パッケージを削除、ディストリビューションのバージョンを更新(セキュリティパッチをあてる場合などにも使用) apt-get remove &amp;lt;package&amp;gt; 指定パッケージを削除 apt-get autoremove 未使用パッケージを削除 (設定ファイルは削除しない) apt-get purge &amp;lt;package&amp;gt; 未使用パッケージを削除 (設定ファイルも削除する) apt-get clean パッケージをインストールした際のアーカイブ・ファイル(*.tar.gzなど)を削除 apt-get autoclean 未使用パッケージのアーカイブ・ファイルを削除 apt-cache # command description apt-cache search &amp;lt;query&amp;gt; パッケージを検索 (パッケージ名と説明が &amp;lt;query&amp;gt; の対象) apt-cache policy &amp;lt;query&amp;gt; パッケージを検索 (インストール可能なバージョンの表示) apt-cache madison &amp;lt;query&amp;gt; パッケージを検索 (インストール可能なバージョンの一覧) dpkg # command description dpkg -l &amp;lt;package&amp;gt; インストール済パッケージの一覧を表示、&amp;lt;package&amp;gt; を省略した場合 全パッケージを表示 dpkg -L &amp;lt;package&amp;gt; インストール時のファイルの一覧を表示 References # Ubuntu apt-get まとめ</description></item><item><title>VS Code</title><link>https://exaream.github.io/tech-blog/tool/vscode/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/tool/vscode/</guid><description>VS Code (Visual Studio Code) # 設定 # 設定を開く # Macの場合：Code &amp;gt; Preferences... &amp;gt; Settings ファイルを常に新しいタブで開く方法 # workbench.editor.enablePreview　を検索しチェックを解除 プロジェクトを常に新しいウィンドウで開く方法 # window.openFoldersInNewWindow を検索し on を選択 ショートカット # 開く・閉じる # 内容 Mac Windows 設定を開く command + , ctrl + , コマンドパレットを開く command + shift + p ctrl + shift + p 新しいウィンドウを開く command + shift + n ctrl + shift + n ファイル名を指定して開く command + p ctrl + p アクティブなファイルを閉じる command + w ctrl + w 全てのファイル閉じる command + k w ctrl + k w 拡大・縮小 # 内容 Mac Windows 拡大(ズームイン) command + = ctrl + = 縮小(ズームアウト) command + - ctrl + - 全画面表示 command + control + - F11 コピー・切り取り・削除 # 内容 Mac Windows 行末尾のスペースを削除 command + k x ctrl + k x 行のインデントを追加 command + ] ctrl + ] 行のインデントを削除 command + [ ctrl + [ 行のコピー(未選択時) command + c ctrl + c 行の切り取り(未選択時) command + x ctrl + x ファイルの相対パスをコピー shift + option + command + c - ファイルの絶対パスをコピー option + command + c - コメント化/コメント解除 option + shift + a ctrl + / 選択 # 内容 Mac Windows 矩形選択 shift + option + マウス・ドラッグ shift + alt + マウス・ドラッグ 検索 # 内容 Mac Windows プロジェクト全体を検索 command + shift + f ctrl + shift + f 移動 # 内容 Mac Windows カーソル行を下に移動 option + ↓ alt + ↓ カーソル行を下に移動 option + ↑ alt + ↑ ファイル履歴を表示し移動 control + tab ctrl + tab サイドバーにフォーカスを移動 command + 0 ctrl + 0 指定行に移動 control + g ctrl + g 最後に編集した箇所に移動 command + k q ctrl + k q 対応するカッコに移動 command + shift + \ ctrl + shift + ¥ 前に移動(戻る) option + ← alt + ← 次に移動(進む) option + → alt + → 参考 # https://qiita.</description></item><item><title/><link>https://exaream.github.io/tech-blog/go/link/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/go/link/</guid><description>Go Link # Go Github Go Spec Go Release Go Download Go の命名規則 私がGoのソースコードを読むときのTips Goの標準ライブラリのコードリーディングのすすめ インタフェースの実装パターン Goのinterfaceをデータ構造から理解する Go First Step The Go Playground A Tour of Go Effective Go Packages Project Layout (Directory Structure) Error handling and Go Context Book # エキスパートたちのGo言語 一流のコードから応用力を学ぶ https://cs.opensource.google/go/go/+/master:src/strings/ https://cs.opensource.google/go/go/+/master:src/errors/ https://cs.opensource.google/go/go/+/master:src/errors/wrap.go;l=104</description></item><item><title/><link>https://exaream.github.io/tech-blog/kubernetes/memo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/kubernetes/memo/</guid><description>Kuberntes Memo # Basics # kubectl create -f &amp;lt;nanifest file(s)&amp;gt; kubectl apply -f &amp;lt;nanifest file(s)&amp;gt; kubectl delete -f &amp;lt;nanifest file(s)&amp;gt; kubectl get &amp;lt;ObjectType&amp;gt; kubectl describe &amp;lt;ObjectType&amp;gt; &amp;lt;ObjectName&amp;gt; kubectl get &amp;lt;ObjectType&amp;gt; &amp;lt;ObjectName&amp;gt; minikube start --driver=docker minikube status kubectl version</description></item></channel></rss>