<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Laravel on Tech</title><link>https://exaream.dev/tags/laravel/</link><description>Recent content in Laravel on Tech</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>exaream</copyright><lastBuildDate>Mon, 28 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://exaream.dev/tags/laravel/index.xml" rel="self" type="application/rss+xml"/><item><title>Upgrade</title><link>https://exaream.dev/php/upgrade/</link><pubDate>Mon, 28 Nov 2022 00:00:00 +0000</pubDate><guid>https://exaream.dev/php/upgrade/</guid><description>PHP Upgrade # Supported Versions # https://www.php.net/supported-versions.php https://qiita.com/bezeklik/items/72d1ff8393f66673e2bc Rector # Overview # rectorphp/rector Rector instantly upgrades and refactors the PHP code of your application.
Rules Overview Install # $ composer require rector/rector --dev $ composer install $ vendor/bin/rector init $ vi rector.php &amp;lt;?php declare(strict_types=1); // use Rector\CodeQuality\Rector\Class_\InlineConstructorDefaultToPropertyRector; use Rector\Config\RectorConfig; use Rector\Set\ValueObject\LevelSetList; return static function (RectorConfig $rectorConfig): void { // register paths to upgrade and refactor PHP code $rectorConfig-&amp;gt;paths([ __DIR__ .</description></item><item><title>PHPUnit</title><link>https://exaream.dev/php/phpunit/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/php/phpunit/</guid><description>PHPUnit # 事前準備 # インストール # composer.json
&amp;#34;require-dev&amp;#34;: { &amp;#34;fzaninotto/faker&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;mikey179/vfsstream&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;mockery/mockery&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;phpunit/phpunit&amp;#34;: &amp;#34;*&amp;#34; }, $ composer install バージョンの確認 # $ ./vendor/bin/phpunit --version 基本 # &amp;lt;?php use Aaa\ClassA; use Bbb\ClassB; use Eee\ExceptionA; use Mockery; use PHPUnit\Framework\TestCase; /** * @coversDefaultClass Aaa\ClassA */ class ClassATest extends TestCase { // Omitted /** * This method is called before class.　TestCaseクラス実行前の処理。 * * @return void */ public static function setUpBeforeClass(): void { parent::setUpBeforeClass(); // static 変数を使用（static メソッドのため） self::$hoge = &amp;#39;some value&amp;#39;; } /** * This method is called before each test.</description></item></channel></rss>