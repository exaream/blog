<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Tech Blog</title><link>https://exaream.github.io/tech-blog/go/</link><description>Recent content in Go on Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>exaream</copyright><lastBuildDate>Sat, 31 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://exaream.github.io/tech-blog/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Link</title><link>https://exaream.github.io/tech-blog/go/link/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/go/link/</guid><description>Go Link # Go Github Go Spec Go Release Go Download Go の命名規則 Goのロギングライブラリ 2021年冬 私がGoのソースコードを読むときのTips Goの標準ライブラリのコードリーディングのすすめ インタフェースの実装パターン Goのinterfaceをデータ構造から理解する Go First Step The Go Playground A Tour of Go Effective Go Packages Project Layout (Directory Structure) Error handling and Go Context Book # エキスパートたちのGo言語 一流のコードから応用力を学ぶ https://cs.opensource.google/go/go/+/master:src/strings/ https://cs.opensource.google/go/go/+/master:src/errors/ https://cs.opensource.google/go/go/+/master:src/errors/wrap.go;l=104</description></item><item><title>Go Memo</title><link>https://exaream.github.io/tech-blog/go/memo/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/go/memo/</guid><description>Go Memo # macOS でパスを通す方法 # echo &amp;#34;export GOPATH=$HOME/go&amp;#34; &amp;gt;&amp;gt; ~/.bash_profile echo &amp;#34;export PATH=$PATH:$GOPATH/bin&amp;#34; &amp;gt;&amp;gt; ~/.bash_profile source ~/.bash_profile コンパイル, バイナリ # コンパイルして実行 # バイナリ（実行可能ファイル）の生成なし
$ go run main.go $ go run . $ go run pkgname コンパイルしてバイナリを生成 # バイナリ（実行可能ファイル）の生成あり
$ go build main.go $ go build . $ go build pkgname 静的解析によるミスの検出 # バグと思われるミスを検出 # go test 実行時に自動で実行される The Go Playground でも実行される
$ go vet main.</description></item><item><title>Go Test</title><link>https://exaream.github.io/tech-blog/go/test/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/go/test/</guid><description>Go Test # Unit Test # Run # Run all unit tests # $ go test ./... Show detailed information
$ go test ./... -v Disable test cache
$ go test ./... -count=1 Run a method of a unit test # $ go test ./mypkg/ -run TestSample Coverage # Output coverage to a terminal
$ go test -cover ./... Output the coverage profile to a file and view it in a browser</description></item><item><title>Golang latest version</title><link>https://exaream.github.io/tech-blog/go/latest/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/go/latest/</guid><description>Golang latest version # Install go1.18beta1 # https://go.dev/doc/tutorial/generics
$ go version go version go1.17.2 darwin/amd64 $ go install golang.org/dl/go1.18beta1@latest $ go1.18beta1 download $ vi ~/.bash_profile alias go=go1.18beta1 $ source ~/.bash_profile $ go version go version go1.18beta1 darwin/amd64 Run the following # $ go mod init sample $ go get golang.org/x/exp https://gotipplay.golang.org/p/ifloU6kyjMt
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;golang.org/x/exp/maps&amp;#34; &amp;#34;golang.org/x/exp/slices&amp;#34; ) func main() { colors := map[string]string{ &amp;#34;White&amp;#34;: &amp;#34;#FFFFFF&amp;#34;, &amp;#34;Black&amp;#34;: &amp;#34;#000000&amp;#34;, &amp;#34;Blue&amp;#34;: &amp;#34;#0000FF&amp;#34;, &amp;#34;Red&amp;#34;: &amp;#34;#FF0000&amp;#34;, &amp;#34;Green&amp;#34;: &amp;#34;#00FF00&amp;#34;, } fmt.</description></item></channel></rss>