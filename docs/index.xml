<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Tech</title><link>https://exaream.dev/</link><description>Recent content in Home on Tech</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>exaream</copyright><lastBuildDate>Wed, 01 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://exaream.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Career Link</title><link>https://exaream.dev/career/link/</link><pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate><guid>https://exaream.dev/career/link/</guid><description>Link # LinkedIn: 人脈構築 connpass: イベント Github: ポートフォリオ Meety: カジュアル面談 Zenn: 技術の記事と電子書籍 Qiita: 技術の記事 Tech Feed: 技術の記事のフィード Twitter</description></item><item><title>Go Check List</title><link>https://exaream.dev/go/check-list/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://exaream.dev/go/check-list/</guid><description>Go Check Sheet # 設計 # パッケージ管理 Go Modules (go.mod) Workspace mode https://zenn.dev/kimuson13/articles/go-workspace-mode-impressions 分割 ファイルを適切に分割 main.go は極力薄くすること パッケージを適切に分割 命名 1単語 アッパーキャメル、スネークなし 気持ちの良い命名は良い設計ができた証拠 長ったらしい説明有頂な名前は設計がうまくいっていない証拠 適切に型定義すること 多くの引数を引き回さないこと
何でもかんでも構造体にしないこと
e.g. go/token.Pos int ソースコード上の場所を表す型　大小を演算子で比較できる token.FileSet は構造体　構造体ではメソッド化が必要になるため面倒 型同士がお互いを知りすぎていると密結合になるため注意
過度の抽象化をおこなわないこと メソッドの数が多すぎるインターフェイス テストの事情を背負いすぎているインターフェイス internal ディレクトリ 公開したくない機能を隠蔽 internal 以下は内部パッケージ internal ディレクトリ以下のパッケージのみ参照可 internal 以下でエクスポートしても外のパッケージから参照不可 大規模データの入力を考慮 処理できる範囲を仕様として明確化 大きすぎる入力はエラーとして処理 (大規模データの入力を想定せずに落ちるのはNG) メモリが溢れないこと 処理に時間がかかりすぎないこと 再帰呼び出ししすぎてスタックオーバーフローをおこさないこと テスト可用性 パッケージ変数は極力使用しないこと t.</description></item><item><title>Python Basic</title><link>https://exaream.dev/python/basic/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.dev/python/basic/</guid><description>Python Basic # Install macOS # Check the default version of Python on macOS # $ python --version Python 2.7.16 $ which python /usr/bin/python Install the latest version using Homebrew # brew update Update Homebrew itself brew install Install package $ brew update $ brew install python Add Python&amp;rsquo;s path # $ vi ~/.bash_profile export PATH=&amp;#34;/usr/local/opt/python/libexec/bin:$PATH&amp;#34; $ source ~/.bash_profile Check that the latest version is available # $ python --version Python 3.</description></item><item><title>Go Link</title><link>https://exaream.dev/go/link/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.dev/go/link/</guid><description>Go Link # Go Github Go Spec Go Release Go Download Go の命名規則 Goのロギングライブラリ 2021年冬 私がGoのソースコードを読むときのTips Goの標準ライブラリのコードリーディングのすすめ インタフェースの実装パターン Goのinterfaceをデータ構造から理解する Go First Step The Go Playground A Tour of Go Effective Go Packages Project Layout (Directory Structure) Error handling and Go Context go-safeweb SQL Injection, XSS, XSRF etc. Book # エキスパートたちのGo言語 一流のコードから応用力を学ぶ https://cs.opensource.google/go/go/+/master:src/strings/ https://cs.opensource.google/go/go/+/master:src/errors/ https://cs.opensource.google/go/go/+/master:src/errors/wrap.go;l=104</description></item><item><title>Python OCR</title><link>https://exaream.dev/python/ocr/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.dev/python/ocr/</guid><description>Python OCR # Overview # How to get text from an image using Tesseract which is an OCR (Optical Character Recognition) engine and Python.
Precondition # Version # macOS: Big Sur 11.4 Docker: 20.10.5, build 55c4c88 docker-compose: 1.29.0, build 07737305 Simple sample # Version # Debian GNU/Linux: 10 (buster) Python: 3.9.6 pyocr: 0.8 opencv-python: 4.5.3.56 Directory structure # python-ocr/ ├── README.</description></item><item><title>Go Test</title><link>https://exaream.dev/go/test/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.dev/go/test/</guid><description>Go Test # Unit Test # Run # Run all unit tests # $ go test ./... Show detailed information
$ go test ./... -v Disable test cache
$ go test ./... -count=1 Run a method of a unit test # $ go test ./mypkg/ -run TestSample Coverage # Output coverage to a terminal
$ go test -cover ./... Output the coverage profile to a file and view it in a browser</description></item><item><title>Git Basic</title><link>https://exaream.dev/git/basic/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/git/basic/</guid><description>Git Basic # 実用的なコマンド # 頻繁に使うコマンド # $ git branch -a $ git checkout -b sample_branch_name # Edit source code $ git status $ git add . $ git commit -m &amp;#34;message&amp;#34; $ git push origin sample_branch_name git tag sample_tag_name git tag -n git push origin sample_tag_name 指定したフォーマットでコミット・ログを表示 # $ git log --graph --date=iso --pretty=format:&amp;#34;[%ad] %h %an : %s&amp;#34; 特定の注釈を含むコミットを検索 # $ git log --oneline --grep &amp;#34;&amp;lt;pattern&amp;gt;&amp;#34; コミット間の変更ファイル一覧を表示 # $ git diff --stat &amp;lt;Commit A&amp;gt; &amp;lt;Commit B&amp;gt; ファイル名のみ表示する場合</description></item><item><title>Cron Check List</title><link>https://exaream.dev/cron/check-list/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/cron/check-list/</guid><description>Crontab # 変数の設定 # シェルの種類が記載されていること
crontab 実行時のシェルの種類の初期値は /bin/sh e.g. SHELL=/bin/bash エラー発生時のメール送信宛先 MAILTO=foo@bar.com が設定されていること コマンド実行時に必要な変数は key=value フォーマットで上部にまとめて設定されていること 各変数の使用用途と設定値のサンプルがコメントに記載されていること 日時の設定 # 分 時 日 月 曜日 のフォーマットで設定されていること 存在する日時/曜日が設定されていること 日 と 曜日 は同時に設定しないこと
同時に設定されている場合 AND 条件ではなく OR 条件で実行されるため コマンドの設定 # 実行コマンド内の % が \（バックスラッシュ）でエスケープされていること
コマンド内にエスケープされていない ％ がある場合、％ が改行文字に置換されそれ以降のコマンドが標準入力として渡されるため ファイルを指定する場合は絶対パスを使用すること
crontab のコマンド実行時のカレントディレクトリは　ユーザー　のホームディレクトリとなるため /usr/bin、/bin 以外の箇所にあるコマンドを実行したい場合は絶対パスを使用すること crontab 実行時のPATH環境変数は /usr/bin:/bin しか指定されていないため ログが /dev/null に捨てられず、書き込み可能な箇所に出力されていること 実行ログを破棄してしまうと障害発生時の調査が難しくなるため Docker 関連の設定 # dockerコンテナを利用したコマンドを実行する際は、rootユーザー権限で実行しないこと dockerコンテナを利用したコマンドを実行する際は、実行対象のコンテナを特定すること</description></item><item><title>Linux Command</title><link>https://exaream.dev/linux/command/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/linux/command/</guid><description>Linux Command # 便利なコマンド # 文字列の置換 # ディレクトリ配下を再帰的に走査しファイルの文字列を置換
e.g. 拡張子が .txt のファイル内の文字列 Before を After に置換
LC_ALL=C find . -type f -name &amp;#39;*.txt&amp;#39; -exec sed -i &amp;#39;&amp;#39; s/Before/After/g {} + コマンド入力履歴 # history コマンドの主なオプション # option description 整数値 履歴の末尾から指定した行数分を表示 -c 履歴一覧から全ての項目を削除 -d 番号 指定した番号の履歴項目を削除 -a 履歴ファイルに現在のセッションの履歴を追加 -n 履歴ファイルからまだ読み込まれていない行を全て読み込み -r 履歴ファイルを読み込み、内容を履歴一覧に追加 -w 現在の履歴を履歴ファイルに上書き コマンド入力履歴を表示 # 履歴を末尾から10件分表示</description></item><item><title>PHP Command Line Option</title><link>https://exaream.dev/php/command-line/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/php/command-line/</guid><description>PHP Command Line Option # option description -a --interactive 対話モードで実行 -h, -? --help,--usage コマンドラインオプションと1行の説明文を表示 -i --info phpinfo() をコールした結果を表示 -l --syntax-check 構文チェックを実行 -m --modules ロードされたZendモジュールの一覧を表示 -r --run コマンドラインのみで実行 -S --server ビルトインウェブサーバを開始 -s --syntax-highlight,--syntax-highlighting ハイライト表示されたソースを表示 -t --docroot ビルトインウェブサーバのドキュメントルートを指定 -v --version バージョン情報を表示 -w --strip コメントと空白文字を削除してソースを表示, -r との同時の使用は不可 References # https://qiita.</description></item><item><title>PHP Cron Expression</title><link>https://exaream.dev/php/cron-expression/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/php/cron-expression/</guid><description>PHP Cron Expression # Install # composer self-update --2 composer require dragonmantank/cron-expression composer update Example # &amp;lt;?php require_once &amp;#39;vendor/autoload.php&amp;#39;; $schedule = &amp;#39;10 2 * * *&amp;#39;; $cron = new Cron\CronExpression($schedule); $dates = $cron-&amp;gt;getMultipleRunDates(3); foreach ($dates as $date) { echo $date-&amp;gt;format(&amp;#39;Y-m-d H:i:s&amp;#39;) . PHP_EOL; }</description></item><item><title>Docker</title><link>https://exaream.dev/container/docker/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/container/docker/</guid><description>Docker # Dockerfile # command description FROM ビルドするイメージのベースイメージ RUN イメージをビルドする際、コンテナで実行するコマンドを定義 COPY ホスト側からコンテナ側にファイルやディレクトリをコピー ADD COPY の機能に加え、アーカー部の自動展開やURLを指定してファイルやディレクトリをコンテナに追加。OSのベースイメージ作成時のような特殊なケースで活用 CMD コンテナがフォアグラウンドで実行するコマンドを定義 ENTRYPOINT コンテナを実行可能ファイルとして使用する際に定義する際に定義するコマンド。CMD と ENTRYPOINT は併用可能 ARG docker image build 時に利用する変数 ENV コンテナ内の環境変数を定義 EXPOSE コンテナが公開するポート VOLUME ホストや他のコンテナからマウントできるポイントを作成 LABEL イメージに追加するメタデータ STOPSIGNAL コンテナに送られて終了するシステムコール信号を設定 HEALTHCHECK コンテナ内でコマンドを実行し、その結果をヘルスチェック(死活監視)として利用 USER コンテナ実行時のコンテナユーザー。イメージビルド時、USER 定義後の RUN もそのユーザで実行される WORKDIR コンテナ内の作業ディレクトリ ONBUILD コンテナ内で実行するコマンドを定義するが、定義したイメージでは実行されない。ONBUILD を定義したベースイメージを利用するイメージのビルド時に実行される Image # Dockerfile から Docker イメージをビルド # $ docker image build [options] (Dockerfileを配置したディレクトリのパス|URL) Docker Hub にホストされている Docker イメージを検索 # $ docker search [options] 検索キーワード Inspection # Get instance&amp;rsquo;s information # $ docker inspect &amp;lt;CONTAINER ID|NAME&amp;gt; Get an instance’s IP address # $ docker inspect --format=&amp;#39;{{range .</description></item><item><title>Docker Compose</title><link>https://exaream.dev/container/docker-compose/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/container/docker-compose/</guid><description>Docker Compose # Basic operation # Run containers # カレントディレクトリの docker-compose.yml に記載したコンテナ群を起動 初回起動時にコンテナ群をつなぐユーザ定義・ブリッジ・ネットワークも自動生成 フォアグラウンドモードで起動する場合(ターミナルにコンテナログを出力) $ docker-compose up バックグラウンドモードで起動する場合 $ docker-compose up -d Stop containers # フォアグラウンドモードで起動した場合 ターミナルで Ctrl+C 押下 バックグラウンドモードで起動した場合 $ docker-compose stop Rebuild an image # $ docker-compose build Remove containers and networks # $ docker-compose down Stop and remove all (containers, images, volumes, networks) 滅びの呪文 # docker-compose down --rmi all --volumes --remove-orphans</description></item><item><title>Docker Swarm</title><link>https://exaream.dev/container/docker-swarm/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/container/docker-swarm/</guid><description>Docker Swarm # Swarm クラスタを初期化 # docker swarm init [options] Swarm クラスタに node もしくは manager を追加 # docker swarm join [options] managerホスト:ポート Swarm クラスタから node もしくは manager を離脱 # docker swarm leave [options] Swarm クラスタに Stack をデプロイ # docker stack deploy [options] Stack名 Swarm クラスタにデプロイされている Stack 一覧を表示 # docker stack (ls|list) [options] Stack 内で実行されているタスクを表示 # docker stack ps [options] Stack名 Swarm クラスタからStackを削除 # docker stack (rm|remove|down) [options] Stack名.</description></item><item><title>Excel</title><link>https://exaream.dev/tool/excel/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/tool/excel/</guid><description>Excel # 便利 # 表示されているセルの合計(非表示のセルを除く) # 109 は固定値
=SUBTOTAL(109,A1:B10) 検索 # VLOOKUP(検索値,範囲,列位置,FALSE) # e.g.) A1 の値が sample シートの範囲(A1:A10) にある場合 B 列の値を出力
=VLOOKUP(A1,sample!$A$1:$B$10,2,FALSE) 特定の値があるか判定 # =IF(COUNTIF(A1:B10,&amp;#34;aaa&amp;#34;)&amp;gt;0,&amp;#34;Yes&amp;#34;,&amp;#34;No&amp;#34;) 日付・時刻 # 曜日 # e.g.) A1 の日時を日本語の曜日の短縮形で表示。
=TEXT(A1,&amp;#34;aaa&amp;#34;) 第2引数 description aaaa 日本語の曜日 aaa 日本語の曜日の短縮形 dddd 英語の曜日 ddd 英語の曜日の曜日の短縮形 時間の差分 # 時間(差分が24時間未満の場合のみ) # =TEXT(B1-A1,&amp;#34;hh:mm:ss&amp;#34;) 日数 # =DATEDIF(A1,B1,&amp;#34;d&amp;#34;) 週数 # =DATEDIF(A1,B1,&amp;#34;d&amp;#34;)/7 月数 # =DATEDIF(A1,B1,&amp;#34;m&amp;#34;) 年数 # =DATEDIF(A1,B1,&amp;#34;y&amp;#34;) ハイパーリンク # シートへのリンク # B1 に記載されたシート内の A1 へ移動</description></item><item><title>Glossary</title><link>https://exaream.dev/glossary/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/glossary/</guid><description>用語集 # 技術 # バッファ buffer 緩衝記憶装置 # IT分野では、コンピューターが処理しきれないデータを一時的に保持しておくための記憶領域を指し、「緩衝記憶領域」とも呼ばれる。コンピューター内部の入出力装置や制御装置などでは、装置ごとに処理速度の差があるため、装置間でデータをやりとりするとタイムラグが生じる。そこで、処理速度や転送速度の差を緩和させ、それぞれの処理速度に合わせたデータの保管や送信を行う必要があり、バッファはその役目を果たしている。 https://e-words.jp/w/%E3%83%90%E3%83%83%E3%83%95%E3%82%A1.html https://www.otsuka-shokai.co.jp/words/buffer.html 静的解析 # コードを実行せずにおこなう検証。 凝集度 # クラスやメソッドがそのクラスの責任に集中しているかを示す尺度。 凝集度が低いケース：メソッドが、クラスの責任範囲と関連性の低い様々な処理をおこなったり、関連性の低いデータを扱っている場合、修正が複数のクラスにまたがって影響する可能性が高まり、保守性が低下。 結合度 # クラスやメソッドを利用・保守しやすいよう、その内容が整理・分割できているかを示す尺度。 結合度が高いケース：利用する側のクラスやメソッドが、利用される側のクラスやメソッドの内容を把握（依存）している割合が高いほど、保守性やテスト容易性が低下。 ACID # Wikipedia ACID
信頼性のあるトランザクションシステムの持つべき性質 不可分性(atomicity): トランザクションに含まれるタスクが全て実行されるか、あるいは全く実行されないことを保証する性質。 一貫性(consistency): トランザクション開始と終了時にあらかじめ与えられた整合性を満たすことを保証する性質を指す。すなわち、データベースのルール、つまり整合性条件を満たさない状態を起こすようなトランザクションは実行が中断される。日本語では整合性とも呼ばれる。 独立性(isolation): トランザクション中に行われる操作の過程が他の操作から隠蔽されることを指す。日本語では分離性、独立性または隔離性ともいう。 永続性(durability): トランザクション操作の完了通知をユーザが受けた時点で、その操作は永続的となり、結果が失われないことを指す。持続性ともいう。 金融 # 口座振替：公共料金やクレジットカードなどのサービスへの支払い代金が、預金口座から自動で引き落とされる仕組みの決済サービス。 主体：金融機関（定期的かつ自動的） 具体例：水道光熱費, 携帯料金等 手数料：振替の都度、お金を受け取る側が払う 口座振込：自分の口座にある資金を、第三者の口座宛てに払い込むこと。 主体：消費者自ら 具体例：商品代金の支払い等 手数料：振込の都度、お金を送る側が払う 参考 # 口座振替と口座振込の違い https://www.</description></item><item><title>Hugo</title><link>https://exaream.dev/tool/hugo/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/tool/hugo/</guid><description>Hugo # What&amp;rsquo;s Hugo? # Hugo is a fast and flexible static site generator made of Golang.
https://gohugo.io/about/ Preparation # Create a git repository using Github # Repositories &amp;gt; New Repository name: sample Click &amp;ldquo;Create repository&amp;rdquo; Install Hugo on macOS # $ brew install hugo Build a blog using Hugo # $ GITHUB_USERNAME=xxxx $ GIT_REPOSITORY=sample $ hugo new site ${GIT_REPOSITORY} $ cd ${GIT_REPOSITORY} $ echo &amp;#34;# ${GIT_REPOSITORY}&amp;#34; &amp;gt;&amp;gt; README.</description></item><item><title>iTerm2</title><link>https://exaream.dev/mac/iterm2/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/mac/iterm2/</guid><description>iTerm2 # What&amp;rsquo;s iTerm2 # iTerm2 is a terminal emulator for macOS
https://iterm2.com/ Shortcuts # command description command + N New Window command + T New Tab command + return Maximize Window command + (◀ or ▶) Move Tab shift + command + D Split Horizontally with Current Profile command + D Split Vertically with Current Profile command + F Find option + command + F Replace shift + command + F Find in Files shift + command + H Replace in Files How to increase scrollback lines # iTerm2 &amp;gt; Preferences &amp;gt; Profiles Select a profile from Profile Name Click Terminal tab Change Scrollback lines: or check Unlimited scrollback How to input to multiple consoles at the same time # Shell &amp;gt; Broadcast Input &amp;gt; Broadcast input to All Panes in Current Tab How to output console log automatically # $ mkdir -p /Users/`whoami`/iTerm2/ iTerm2 &amp;gt; Preferences &amp;gt; Profiles Select a profile from Profile Name Click Session tab Check Automatically log session input to files in: Check log plain text Input the directory path How to change the background color of iTerm2 for each environment # Add color schemes to iTerm2 by referring to the following URL.</description></item><item><title>MailCatcher</title><link>https://exaream.dev/tool/mailcatcher/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/tool/mailcatcher/</guid><description>MailCatcher # Simple SMTP server made of Ruby. You can check emails of web app on your local environment. Docker container of MailCatcher # docker-compose.yml
mailcatcher: image: schickling/mailcatcher:latest ports: - 1080:1080 docker-compose up -d http://localhost:1080
.env config of Laravel container # .env.local
MAIL_DRIVER=smtp MAIL_HOST=mailcatcher MAIL_PORT=1025 MAIL_USERNAME=null MAIL_PASSWORD=null MAIL_ENCRYPTION=null # Optional configuration MAIL_FROM_ADDRESS=mailcatcher@example.com MAIL_FROM_NAME=&amp;#34;${APP_NAME}&amp;#34; SMTP config of Laravel container # /etc/ssmtp/ssmtp.conf
root=postmaster mailhub=mailcatcher:1025 rewriteDomain=foo-bar-baz.com References # Github Mail Catcher ローカルの開発環境にSMTPを整備する Laravelローカル環境構築 メール送信の設定＋MailCatcher</description></item><item><title>Cron</title><link>https://exaream.dev/cron/main/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/cron/main/</guid><description>Cron # 日時・時刻・インターバルの指定 # 記述方法 # 時，日，月，曜日，実行コマンド 記号による指定 # 記号 内容 * 全範囲指定(ワイルドカード) - 範囲指定 / インターバル指定 , 区切り指定 曜日の指定 # 略語または数字での指定が可能 略語 数字 sun 0 mon 1 tue 2 wed 3 thu 4 fri 5 sat 6 月の指定 # 略語または数字での指定が可能 略語 数字 jan 1 feb 2 mar 3 apr 4 may 5 jun 6 jul 7 aug 8 sep 9 oct 10 nov 11 dec 12 注意事項 # 実行ディレクトリ # cron ジョブ実行時のカレントディレクトリ = ユーザのホームディレクトリ 実行コマンドの指定は「絶対パスを指定」または「実行ディレクトリにcdで移動」すること 環境変数 # cron ジョブ実行時は最低限の環境変数のみセットされた状態、パスが通っていないケースがあるため注意 shell内での指定と異なり、右辺の環境変数が展開されないため注意 # NG PATH=/usr/local/bin:$PATH # OK PATH=/usr/local/bin:/usr/bin:/bin 毎分指定 # 日次のバッチを誤って毎分実行しないよう注意 # NG * 5 * * * /path/to/backup.</description></item><item><title>Shellscript Memo</title><link>https://exaream.dev/shellscript/memo/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/shellscript/memo/</guid><description>Shellscript # Double quotes # Use double quotes when you want to apply line breaks # #! /bin/bash LINES=`cat &amp;lt;&amp;lt;EOF apple banana lemon EOF ` echo ${LINES} # apple banana lemon echo &amp;#34;${LINES}&amp;#34; # apple # banana # lemon Don not use double quotes when using for clause # #! /bin/bash LINES=`cat &amp;lt;&amp;lt;EOF apple banana lemon EOF ` COUNT=0 for i in ${LINES} do echo ${COUNT}&amp;#39;:&amp;#39;${i} COUNT=$(( COUNT + 1 )) done # 0:apple # 1:banana # 2:lemon COUNT=0 for i in &amp;#34;${LINES}&amp;#34; do echo ${COUNT}&amp;#39;:&amp;#39;${i} COUNT=$(( COUNT + 1 )) done # 0:apple banana lemon References # 複数行の文字列をShell変数に格納して、forで回した時の挙動</description></item><item><title>MySQL</title><link>https://exaream.dev/sql/mysql/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/sql/mysql/</guid><description>MySQL # Preparation # Install to macOS # $ brew install mysql Start # $ mysql.server start Starting MySQL ....... SUCCESS! Check the vertion # $ mysql --version mysql Ver 8.0.26 for macos11.3 on x86_64 (Homebrew) Make initial settings # $ mysql_secure_installation パスワード強度検証プラグインの利用有無 パスワード強度の選択 root ユーザのパスワード設定 匿名ユーザの削除 リモートからの root ユーザとしてのログインの禁止 サンプル用 test データベースの削除 $ mysql_secure_installation Securing the MySQL server deployment. Connecting to MySQL using a blank password.</description></item><item><title>Node.js</title><link>https://exaream.dev/javascript/nodejs/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/javascript/nodejs/</guid><description>Node.js # Install Homebrew # Homebrew is the package manager for macOS. https://docs.brew.sh/Installation $ /bin/bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&amp;#34; $ brew -v Homebrew 3.2.13 ... Install nodebrew (using Homebrew) # nodebrew is the package manager for Node.js. You can install multiple versions of Node.js and switch between them etc. $ brew install nodebrew $ which nodebrew /usr/local/bin/nodebrew $ nodebrew -v nodebrew 1.1.0 $ nodebrew setup .</description></item><item><title>PhpMetrics</title><link>https://exaream.dev/php/phpmetrics/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/php/phpmetrics/</guid><description>PhpMetrics # PhpMetrics とは # PHPプログラムの静的解析ツール 結果レポートをHTMLで出力 期待する効果 可読性・メンテナンス性・再利用性・テスト容易性の向上 バグ混入率の低下 解析時の評価指標 # 複雑度(循環的複雑度、経路複雑度) オブジェク指向(凝集度、結合度、抽象化) コード量 etc. インストール # $ composer require phpmetrics/phpmetrics --dev 使用方法 # $ php ./vendor/bin/phpmetrics --report-html=myreport.html /path/to/your/sources/ 参考 # https://phpmetrics.org/ https://github.com/phpmetrics/PhpMetrics</description></item><item><title>PHPUnit</title><link>https://exaream.dev/php/phpunit/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/php/phpunit/</guid><description>PHPUnit # 事前準備 # インストール # composer.json
&amp;#34;require-dev&amp;#34;: { &amp;#34;fzaninotto/faker&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;mikey179/vfsstream&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;mockery/mockery&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;phpunit/phpunit&amp;#34;: &amp;#34;*&amp;#34; }, $ composer install バージョンの確認 # $ ./vendor/bin/phpunit --version 基本 # &amp;lt;?php use Aaa\ClassA; use Bbb\ClassB; use Eee\ExceptionA; use Mockery; use PHPUnit\Framework\TestCase; /** * @coversDefaultClass Aaa\ClassA */ class ClassATest extends TestCase { // Omitted /** * This method is called before class.　TestCaseクラス実行前の処理。 * * @return void */ public static function setUpBeforeClass(): void { parent::setUpBeforeClass(); // static 変数を使用（static メソッドのため） self::$hoge = &amp;#39;some value&amp;#39;; } /** * This method is called before each test.</description></item><item><title>PostgreSQL</title><link>https://exaream.dev/sql/postgresql/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/sql/postgresql/</guid><description>PostgreSQL # PostgreSQL&amp;rsquo;s Information # Table Schema # SELECT col.table_name, col.ordinal_position, -- No. col.column_name, col.data_type, col.character_maximum_length, -- 文字数(文字列型) col.character_octet_length, -- バイト数(文字列型) col.numeric_precision, -- 桁数(数値型) col.numeric_scale, -- 小数部(数値型) col.datetime_precision, -- ミリ秒以下(日付型) col.interval_type, -- インターバルの単位(日付型) col.is_nullable, -- NULLを許可するか否か col.column_default -- 初期値 FROM information_schema.columns col WHERE col.table_name = &amp;#39;sample_table&amp;#39; -- 対象テーブル名を指定 ORDER BY col.table_name, col.ordinal_position</description></item><item><title>Mac Setting</title><link>https://exaream.dev/mac/setting/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/mac/setting/</guid><description>Mac Setting # Safari # Empty Caches # Safari &amp;gt; Preferences
Advanced Check Show Develop menu in menu bar Develop &amp;gt; Empty caches
Proxy Settings # Switch On
Safari &amp;gt; Preferences
Advanced
Change Settings... Select Proxies tab
Check Web Proxy (HTTP) and enter proxy domain : proxy port Check Secure Web Proxy (HTTP) and enter proxy domain : proxy port Click OK Click Apply</description></item><item><title>Git Tool</title><link>https://exaream.dev/git/tool/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/git/tool/</guid><description>Git Tool # git-split-diffs # Display the results of the git diff command side by side like Github. Precondition # npm or yarn Install git-split-diffs # If you use npm
$ npm install -g git-split-diffs or, if you use yarn
$ yarn global add git-split-diffs Add configuration of git-split-diffs to .gitconfig # $ git config --global core.pager &amp;#34;git-split-diffs --color | less -RFX&amp;#34; Check # $ git log -p $ git diff &amp;lt;branch A&amp;gt; &amp;lt;branch B&amp;gt; Additional info # If you want to use light theme</description></item><item><title>Ubuntu</title><link>https://exaream.dev/linux/ubuntu/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/linux/ubuntu/</guid><description>Ubuntu # apt-get # command description apt-get install &amp;lt;package&amp;gt; 指定パッケージのインストールと更新 apt-get update パッケージ・リストを更新 apt-get upgrade インストール済パッケージを更新 apt-get dist-upgrade 追加で必要なパッケージをインストール、不要パッケージを削除、ディストリビューションのバージョンを更新(セキュリティパッチをあてる場合などにも使用) apt-get remove &amp;lt;package&amp;gt; 指定パッケージを削除 apt-get autoremove 未使用パッケージを削除 (設定ファイルは削除しない) apt-get purge &amp;lt;package&amp;gt; 未使用パッケージを削除 (設定ファイルも削除する) apt-get clean パッケージをインストールした際のアーカイブ・ファイル(*.tar.gzなど)を削除 apt-get autoclean 未使用パッケージのアーカイブ・ファイルを削除 apt-cache # command description apt-cache search &amp;lt;query&amp;gt; パッケージを検索 (パッケージ名と説明が &amp;lt;query&amp;gt; の対象) apt-cache policy &amp;lt;query&amp;gt; パッケージを検索 (インストール可能なバージョンの表示) apt-cache madison &amp;lt;query&amp;gt; パッケージを検索 (インストール可能なバージョンの一覧) dpkg # command description dpkg -l &amp;lt;package&amp;gt; インストール済パッケージの一覧を表示、&amp;lt;package&amp;gt; を省略した場合 全パッケージを表示 dpkg -L &amp;lt;package&amp;gt; インストール時のファイルの一覧を表示 References # Ubuntu apt-get まとめ</description></item><item><title>VS Code</title><link>https://exaream.dev/tool/vscode/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.dev/tool/vscode/</guid><description>VS Code (Visual Studio Code) # 設定 # 設定を開く # Macの場合：Code &amp;gt; Preferences... &amp;gt; Settings ファイルを常に新しいタブで開く方法 # workbench.editor.enablePreview　を検索しチェックを解除 プロジェクトを常に新しいウィンドウで開く方法 # window.openFoldersInNewWindow を検索し on を選択 ショートカット # 開く・閉じる # 内容 Mac Windows 設定を開く command + , ctrl + , コマンドパレットを開く command + shift + p ctrl + shift + p 新しいウィンドウを開く command + shift + n ctrl + shift + n ファイル名を指定して開く command + p ctrl + p アクティブなファイルを閉じる command + w ctrl + w 全てのファイル閉じる command + k w ctrl + k w 拡大・縮小 # 内容 Mac Windows 拡大(ズームイン) command + = ctrl + = 縮小(ズームアウト) command + - ctrl + - 全画面表示 command + control + - F11 コピー・切り取り・削除 # 内容 Mac Windows 行末尾のスペースを削除 command + k x ctrl + k x 行のインデントを追加 command + ] ctrl + ] 行のインデントを削除 command + [ ctrl + [ 行のコピー(未選択時) command + c ctrl + c 行の切り取り(未選択時) command + x ctrl + x ファイルの相対パスをコピー shift + option + command + c - ファイルの絶対パスをコピー option + command + c - コメント化/コメント解除 option + shift + a ctrl + / 選択 # 内容 Mac Windows 矩形選択 shift + option + マウス・ドラッグ shift + alt + マウス・ドラッグ 検索 # 内容 Mac Windows プロジェクト全体を検索 command + shift + f ctrl + shift + f 移動 # 内容 Mac Windows カーソル行を下に移動 option + ↓ alt + ↓ カーソル行を下に移動 option + ↑ alt + ↑ ファイル履歴を表示し移動 control + tab ctrl + tab サイドバーにフォーカスを移動 command + 0 ctrl + 0 指定行に移動 control + g ctrl + g 最後に編集した箇所に移動 command + k q ctrl + k q 対応するカッコに移動 command + shift + \ ctrl + shift + ¥ 前に移動(戻る) option + ← alt + ← 次に移動(進む) option + → alt + → 参考 # https://qiita.</description></item><item><title/><link>https://exaream.dev/todo/link/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://exaream.dev/todo/link/</guid><description>Link # アーキテクチャ ID連携の標準化仕様紹介とセキュアな実装のためのアプローチ ~ 2021 良い技術的負債と悪い技術的負債 技術的負債は開発者体験を悪化させる レガシー化したData Pipelineの廃止 ― メルカリのData Architectのお仕事例 機密情報 GitHub上のsensitive dataを削除するための手順と道のり 他社 The Amazon Builders' Library Amazon はソフトウェアをどのように構築し、運用するのか Cloud AWSの強い権限のクレデンシャル管理から転生した件 モブプロ/ペアプロ モブプログラミングを導入し、チーム一丸となってタスクに取り組むようになった話 リソース効率性とフロー効率性について言及 SQL MySQLとインデックスとPHPer Container インフラが苦手でも大丈夫！紙芝居Kubernetes Macで使うVS CodeとRemote Containerの性能を大幅改善 Kubernetesは、ITを「チケットドリブン」から「インテントドリブン」へ変えていく。Cloud Operator Days Tokyo基調講演 Shell ShellSpec - シェルスクリプト用のフル機能のBDDユニットテストフレームワーク 統計 統計学習の指導のために 先生向け 振り返り KPT アンチパターン 〜失敗事例紹介〜 組織 サイバーエージェントとメルカリにみる組織強化システムの構造的分解 Linux よく使うcurlコマンドのオプション PHP PHPのリリース日とサポート期限 Python Python Data Science Handbook 無料公開 Git 大きなGitリポジトリをクローンするときの工夫を図解します Test マイクロサービスの開発とテストファースト／テスト駆動開発 新人研修 新人の方によく展開している有益な情報 2021年のエンジニア新人研修の講義資料を公開しました テスト文字列に「うんこ」と入れるな Tool cronの代替になりそうなジョブ管理ツールのまとめ Workspace Cleanup（Jenkins の workspace お掃除プラグイン） Deep Tech 透明太陽電池 窓ガラスでの発電 京都大学化学研究所の坂本雅典 准教授の解説</description></item></channel></rss>