<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tech Blog</title><link>https://exaream.github.io/tech-blog/</link><description>Recent content on Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>exaream</copyright><lastBuildDate>Sat, 31 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://exaream.github.io/tech-blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Memo</title><link>https://exaream.github.io/tech-blog/go/memo/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/go/memo/</guid><description>Go Memo # 組み込み型 # 型 概要 ゼロ値(初期値) bool 真偽値 false string 文字列 &amp;quot;&amp;quot; int8/int16/int32/int64 符号あり整数 0 uint8/uint16/uint32/uint64 符号なし整数(unsigned) 0 int 32bit委譲の整数, 符号あり 0 uint 32bit委譲の整数, 符号なし 0 byte uint8 の別名 0 rune int32 の別名, unicode のコードポイントを表す 0 uintptr ポインタの値を格納する大きさの符号なし整数 0 float32/float64 浮動小数点数 0 complex64 float32の実数部と虚数部を持つ複素数 (0+0i) complex64 float64の実数部と虚数部を持つ複素数 (0+0i) error エラー nil ゼロ値があるため初期化が不要な例 # package main func main() { // ゼロ値 0 のため初期値の設定は不要 // var sum int = 0 var sum int for i := 1; i &amp;lt;= 10; i++ { sum += 1 } println(sum) } package main import ( &amp;#34;fmt&amp;#34; &amp;#34;strings&amp;#34; ) func main() { words := []string{&amp;#34;dog&amp;#34;, &amp;#34;cat&amp;#34;, &amp;#34;dog&amp;#34;, &amp;#34;fish&amp;#34;, &amp;#34;cat&amp;#34;} counts := map[string]int{} for _, word := range words { // ゼロ値 0 のため初期値の設定は不要 counts[word]++ } fmt.</description></item><item><title>Python Memo</title><link>https://exaream.github.io/tech-blog/python/memo/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/python/memo/</guid><description>Python Memo # Version # Terminal # $ python --version Python 3.9.6 Short option of --version
$ python -V Python 3.9.6 More detailed information
$ python -VV Python 3.9.6 (default, Jul 22 2021, 15:16:20) [GCC 8.3.0] Source code # sys # import sys print(sys.version) # 3.9.6 (default, Jul 22 2021, 15:16:20) # [GCC 8.3.0] print(type(sys.version)) # &amp;lt;class &amp;#39;str&amp;#39;&amp;gt; print(sys.version_info) # sys.version_info(major=3, minor=9, micro=6, releaselevel=&amp;#39;final&amp;#39;, serial=0) print(type(sys.</description></item><item><title>Python OCR</title><link>https://exaream.github.io/tech-blog/python/ocr/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/python/ocr/</guid><description>Python OCR # Overview # How to get text from an image using Tesseract which is an OCR (Optical Character Recognition) engine and Python.
Precondition # Version # macOS: Big Sur 11.4 Docker: 20.10.5, build 55c4c88 docker-compose: 1.29.0, build 07737305 Simple sample # Version # Debian GNU/Linux: 10 (buster) Python: 3.9.6 pyocr: 0.8 opencv-python: 4.5.3.56 Directory structure # python-ocr/ ├── README.</description></item><item><title>Docker</title><link>https://exaream.github.io/tech-blog/infrastructure/docker/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/infrastructure/docker/</guid><description>Docker # Stop # Stop all containers # docker container ps -q | xargs docker container stop or
docker stop $(docker ps -q) Remove # Stop and remove all (containers, images, volumes, networks) 滅びの呪文 # docker-compose down --rmi all --volumes --remove-orphans Remove stopped containers, untagged images, unused volumes, unused networks # docker system prune option description -a 未使用のイメージを含め削除 -f 確認せず削除 docker system prune -af Remove stopped containers # docker container prune Remove all containers # docker container ps -aq | xargs docker container rm -f or</description></item><item><title>Excel</title><link>https://exaream.github.io/tech-blog/tool/excel/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/tool/excel/</guid><description>Excel # 検索 # VLOOKUP(検索値,範囲,列位置,FALSE) # e.g.) A1 の値が sample シートの範囲(A1:A10) にある場合 B 列の値を出力
=VLOOKUP(A1,sample!$A$1:$B$10,2,FALSE) 特定の値があるか判定 # =IF(COUNTIF(A1:B10,&amp;#34;aaa&amp;#34;)&amp;gt;0,&amp;#34;Yes&amp;#34;,&amp;#34;No&amp;#34;) 日付・時刻 # 曜日 # e.g.) A1 の日時を日本語の曜日の短縮形で表示。
=TEXT(A1,&amp;#34;aaa&amp;#34;) 第2引数 description aaaa 日本語の曜日 aaa 日本語の曜日の短縮形 dddd 英語の曜日 ddd 英語の曜日の曜日の短縮形 時間の差分 # 時間(差分が24時間未満の場合のみ) # =TEXT(B1-A1,&amp;#34;hh:mm:ss&amp;#34;) 日数 # =DATEDIF(A1,B1,&amp;#34;d&amp;#34;) 週数 # =DATEDIF(A1,B1,&amp;#34;d&amp;#34;)/7 月数 # =DATEDIF(A1,B1,&amp;#34;m&amp;#34;) 年数 # =DATEDIF(A1,B1,&amp;#34;y&amp;#34;) ハイパーリンク # シートへのリンク # B1 に記載されたシート内の A1 へ移動</description></item><item><title>Git</title><link>https://exaream.github.io/tech-blog/vcs/git/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/vcs/git/</guid><description>Git # 実用的なコマンド # 指定したフォーマットでコミット・ログを表示 # $ git log --graph --date=iso --pretty=format:&amp;#34;[%ad] %h %an : %s&amp;#34; 特定の注釈を含むコミットを検索 # $ git log --oneline --grep &amp;#34;&amp;lt;pattern&amp;gt;&amp;#34; コミット間の変更ファイル一覧を表示 # $ git diff --stat &amp;lt;Commit A&amp;gt; &amp;lt;Commit B&amp;gt; ファイル名のみ表示する場合
$ git diff --stat --name-only &amp;lt;Commit A&amp;gt; &amp;lt;Commit B&amp;gt; タグの一覧を表示 # $ git tag -n Git 設定 # バージョンを確認 # $ git --version 設定の一覧を表示 # 設定適用範囲</description></item><item><title>Glossary</title><link>https://exaream.github.io/tech-blog/glossary/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/glossary/</guid><description>用語集 # 静的解析 # コードを実行せずにおこなう検証。 凝集度 # クラスやメソッドがそのクラスの責任に集中しているかを示す尺度。 凝集度が低いケース：メソッドが、クラスの責任範囲と関連性の低い様々な処理をおこなったり、関連性の低いデータを扱っている場合、修正が複数のクラスにまたがって影響する可能性が高まり、保守性が低下。 結合度 # クラスやメソッドを利用・保守しやすいよう、その内容が整理・分割できているかを示す尺度。 結合度が高いケース：利用する側のクラスやメソッドが、利用される側のクラスやメソッドの内容を把握（依存）している割合が高いほど、保守性やテスト容易性が低下。 参考 # 凝集度・結合度・循環的複雑度 https://qiita.com/oda-kazuki/items/a16b43dc624429de7db3 凝集度 https://ja.wikipedia.org/wiki/%E5%87%9D%E9%9B%86%E5%BA%A6 結合度 https://ja.wikipedia.org/wiki/%E7%B5%90%E5%90%88%E5%BA%A6</description></item><item><title>Hugo</title><link>https://exaream.github.io/tech-blog/tool/hugo/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/tool/hugo/</guid><description>Hugo # What&amp;rsquo;s Hugo? # Hugo is a fast and flexible static site generator made of Golang.
https://gohugo.io/about/ Preparation # Create a git repository using Github # Repositories &amp;gt; New Repository name: sample Click &amp;ldquo;Create repository&amp;rdquo; Install Hugo on macOS # $ brew install hugo Build a blog using Hugo # $ GITHUB_USERNAME=xxxx $ GIT_REPOSITORY=sample $ hugo new site ${GIT_REPOSITORY} $ cd ${GIT_REPOSITORY} $ echo &amp;#34;# ${GIT_REPOSITORY}&amp;#34; &amp;gt;&amp;gt; README.</description></item><item><title>Linux</title><link>https://exaream.github.io/tech-blog/infrastructure/linux/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/infrastructure/linux/</guid><description>Linux Command # 画面操作 # ターミナル操作のショートカット # Mac Windows description control + a ctrl + a カーソルを行頭へ移動 control + e ctrl + e カーソルを行末へ移動 control + f ctrl + f カーソルを前進(右へ移動) control + b ctrl + b カーソルを後退(左へ移動) control + d ctrl + d カーソル上の1文字削除 control + h ctrl + h カーソル後方(左)の1文字削除 control + u ctrl + u カーソルから行頭まで削除 control + k ctrl + k カーソルから行末まで削除 control + w ctrl + w カーソル上の単語1つ分削除 control + y ctrl + y 最後に削除した文字を貼り付け control + p ctrl + p 1つ前のコマンド履歴を表示 control + n ctrl + n 1つ後のコマンド履歴を表示 control + s ctrl + s 画面をロック control + q ctrl + q 画面のロックを解除 control + c ctrl + c 実行中のコマンドを強制終了 control + l(エル) ctrl + l(エル) 画面をクリア tab tab コマンド,ディレクトリ,ファイルの候補を補完 文字コード # 文字コードの値 # 文字コード コマンドで指定する値 remarks Shift_JIS cp932 or sjis cp932 には sjis に含まれていない文字（①, ②, Ⅰ, Ⅱ, ㍉, ㌍, 彅, 髙 etc.</description></item><item><title>MySQL</title><link>https://exaream.github.io/tech-blog/database/mysql/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/database/mysql/</guid><description>MySQL # Preparation # Install to macOS # $ brew install mysql Start # $ mysql.server start Starting MySQL ....... SUCCESS! Check the vertion # $ mysql --version mysql Ver 8.0.26 for macos11.3 on x86_64 (Homebrew) Make initial settings # $ mysql_secure_installation パスワード強度検証プラグインの利用有無 パスワード強度の選択 root ユーザのパスワード設定 匿名ユーザの削除 リモートからの root ユーザとしてのログインの禁止 サンプル用 test データベースの削除 $ mysql_secure_installation Securing the MySQL server deployment. Connecting to MySQL using a blank password.</description></item><item><title>PhpMetrics</title><link>https://exaream.github.io/tech-blog/php/phpmetrics/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/php/phpmetrics/</guid><description>PhpMetrics # PhpMetrics とは # PHPプログラムの静的解析ツール 結果レポートをHTMLで出力 期待する効果 可読性・メンテナンス性・再利用性・テスト容易性の向上 バグ混入率の低下 解析時の評価指標 # 複雑度(循環的複雑度、経路複雑度) オブジェク指向(凝集度、結合度、抽象化) コード量 etc. インストール # $ composer require phpmetrics/phpmetrics --dev 使用方法 # $ php ./vendor/bin/phpmetrics --report-html=myreport.html /path/to/your/sources/ 参考 # https://phpmetrics.org/ https://github.com/phpmetrics/PhpMetrics</description></item><item><title>PHPUnit</title><link>https://exaream.github.io/tech-blog/php/phpunit/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/php/phpunit/</guid><description>PHPUnit # 事前準備 # インストール # composer.json
&amp;#34;require-dev&amp;#34;: { &amp;#34;fzaninotto/faker&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;mikey179/vfsstream&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;mockery/mockery&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;phpunit/phpunit&amp;#34;: &amp;#34;*&amp;#34; }, $ composer install バージョンの確認 # $ ./vendor/bin/phpunit --version 基本 # &amp;lt;?php use Aaa\ClassA; use Bbb\ClassB; use Eee\ExceptionA; use Mockery; use PHPUnit\Framework\TestCase; /** * @coversDefaultClass Aaa\ClassA */ class ClassATest extends TestCase { // Omitted /** * This method is called before class.　TestCaseクラス実行前の処理。 * * @return void */ public static function setUpBeforeClass(): void { parent::setUpBeforeClass(); // static 変数を使用（static メソッドのため） self::$hoge = &amp;#39;some value&amp;#39;; } /** * This method is called before each test.</description></item><item><title>PostgreSQL</title><link>https://exaream.github.io/tech-blog/database/postgresql/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/database/postgresql/</guid><description>PostgreSQL # PostgreSQL&amp;rsquo;s Information # Table Schema # SELECT col.table_name, col.ordinal_position, -- No. col.column_name, col.data_type, col.character_maximum_length, -- 文字数(文字列型) col.character_octet_length, -- バイト数(文字列型) col.numeric_precision, -- 桁数(数値型) col.numeric_scale, -- 小数部(数値型) col.datetime_precision, -- ミリ秒以下(日付型) col.interval_type, -- インターバルの単位(日付型) col.is_nullable, -- NULLを許可するか否か col.column_default -- 初期値 FROM information_schema.columns col WHERE col.table_name = &amp;#39;sample_table&amp;#39; -- 対象テーブル名を指定 ORDER BY col.table_name, col.ordinal_position</description></item><item><title>TODO</title><link>https://exaream.github.io/tech-blog/todo/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/todo/</guid><description>TODO # Topic # Container Docker★ Kubernetes istio English IT English https://qiita.com/Ted-HM/items/7dde25dcffae4cdc7923 TOEIC★ Database PostgreSQL Programing Language Golang★ PHP phpcs Typescript Python Kotlin Framework/Library Laravel CI/CD Jenkins CircleCI Agile Scrum Jira Redmine Team Building Project Management https://qiita.com/br_branch/items/bbbaba835b45e79efa5b VCS Git Github Public Cloud AWS GCP Azure Check Sheet Coding Unit Test/Functional Test Integration Test Tool Excel Soft Skill # Presence Management Power and Influence LinkedIn Resume/CV Interview Topic - In Progress # MySQL Microservices PHPUnit faker★ Topic - Done # Hugo phpmetrics VS Code Improvement # Mermaid Diagram https://mermaid-js.</description></item><item><title>VS Code</title><link>https://exaream.github.io/tech-blog/tool/vscode/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/tool/vscode/</guid><description>VS Code (Visual Studio Code) # 設定 # 設定を開く # Macの場合：Code &amp;gt; Preferences... &amp;gt; Settings ファイルを常に新しいタブで開く方法 # workbench.editor.enablePreview　を検索しチェックを解除 プロジェクトを常に新しいウィンドウで開く方法 # window.openFoldersInNewWindow を検索し on を選択 ショートカット # 開く・閉じる # 内容 Mac Windows 設定を開く command + , ctrl + , コマンドパレットを開く command + shift + p ctrl + shift + p 新しいウィンドウを開く command + shift + n ctrl + shift + n ファイル名を指定して開く command + p ctrl + p アクティブなファイルを閉じる command + w ctrl + w 全てのファイル閉じる command + k w ctrl + k w 拡大・縮小 # 内容 Mac Windows 拡大(ズームイン) command + = ctrl + = 縮小(ズームアウト) command + - ctrl + - 全画面表示 command + control + - F11 コピー・切り取り・削除 # 内容 Mac Windows 行末尾のスペースを削除 command + k x ctrl + k x 行のインデントを追加 command + ] ctrl + ] 行のインデントを削除 command + [ ctrl + [ 行のコピー(未選択時) command + c ctrl + c 行の切り取り(未選択時) command + x ctrl + x ファイルの相対パスをコピー shift + option + command + c - ファイルの絶対パスをコピー option + command + c - コメント化/コメント解除 option + shift + a ctrl + / 選択 # 内容 Mac Windows 矩形選択 shift + option + マウス・ドラッグ shift + alt + マウス・ドラッグ 検索 # 内容 Mac Windows プロジェクト全体を検索 command + shift + f ctrl + shift + f 移動 # 内容 Mac Windows カーソル行を下に移動 option + ↓ alt + ↓ カーソル行を下に移動 option + ↑ alt + ↑ ファイル履歴を表示し移動 control + tab ctrl + tab サイドバーにフォーカスを移動 command + 0 ctrl + 0 指定行に移動 control + g ctrl + g 最後に編集した箇所に移動 command + k q ctrl + k q 対応するカッコに移動 command + shift + \ ctrl + shift + ¥ 前に移動(戻る) option + ← alt + ← 次に移動(進む) option + → alt + → 参考 # https://qiita.</description></item></channel></rss>