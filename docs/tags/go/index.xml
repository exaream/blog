<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Tech</title><link>https://exaream.dev/tags/go/</link><description>Recent content in Go on Tech</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>exaream</copyright><lastBuildDate>Thu, 31 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://exaream.dev/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Check List</title><link>https://exaream.dev/go/check-list/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://exaream.dev/go/check-list/</guid><description>Go Check Sheet # 設計 # パッケージ管理 Go Modules (go.mod) Workspace mode https://zenn.dev/kimuson13/articles/go-workspace-mode-impressions 分割 ファイルを適切に分割 main.go は極力薄くすること パッケージを適切に分割 命名 1単語 アッパーキャメル、スネークなし 気持ちの良い命名は良い設計ができた証拠 長ったらしい説明有頂な名前は設計がうまくいっていない証拠 適切に型定義すること 多くの引数を引き回さないこと
何でもかんでも構造体にしないこと
e.g. go/token.Pos int ソースコード上の場所を表す型　大小を演算子で比較できる token.FileSet は構造体　構造体ではメソッド化が必要になるため面倒 型同士がお互いを知りすぎていると密結合になるため注意
過度の抽象化をおこなわないこと メソッドの数が多すぎるインターフェイス テストの事情を背負いすぎているインターフェイス internal ディレクトリ 公開したくない機能を隠蔽 internal 以下は内部パッケージ internal ディレクトリ以下のパッケージのみ参照可 internal 以下でエクスポートしても外のパッケージから参照不可 大規模データの入力を考慮 処理できる範囲を仕様として明確化 大きすぎる入力はエラーとして処理 (大規模データの入力を想定せずに落ちるのはNG) メモリが溢れないこと 処理に時間がかかりすぎないこと 再帰呼び出ししすぎてスタックオーバーフローをおこさないこと テスト可用性 パッケージ変数は極力使用しないこと t.</description></item><item><title>Go Link</title><link>https://exaream.dev/go/link/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.dev/go/link/</guid><description>Go Link # Go Github Go Spec Go Release Go Download Go の命名規則 Goのロギングライブラリ 2021年冬 私がGoのソースコードを読むときのTips Goの標準ライブラリのコードリーディングのすすめ インタフェースの実装パターン Goのinterfaceをデータ構造から理解する Go First Step The Go Playground A Tour of Go Effective Go Packages Project Layout (Directory Structure) Error handling and Go Context go-safeweb SQL Injection, XSS, XSRF etc. Book # エキスパートたちのGo言語 一流のコードから応用力を学ぶ https://cs.opensource.google/go/go/+/master:src/strings/ https://cs.opensource.google/go/go/+/master:src/errors/ https://cs.opensource.google/go/go/+/master:src/errors/wrap.go;l=104</description></item><item><title>Go Test</title><link>https://exaream.dev/go/test/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.dev/go/test/</guid><description>Go Test # Unit Test # Run # Run all unit tests # $ go test ./... Show detailed information
$ go test ./... -v Disable test cache
$ go test ./... -count=1 Run a method of a unit test # $ go test ./mypkg/ -run TestSample Coverage # Output coverage to a terminal
$ go test -cover ./... Output the coverage profile to a file and view it in a browser</description></item><item><title>Golang latest version</title><link>https://exaream.dev/go/latest/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.dev/go/latest/</guid><description>Golang latest version # Install go1.18beta1 # https://go.dev/doc/tutorial/generics
$ go version go version go1.17.2 darwin/amd64 $ go install golang.org/dl/go1.18beta1@latest $ go1.18beta1 download $ vi ~/.bash_profile alias go=go1.18beta1 $ source ~/.bash_profile $ go version go version go1.18beta1 darwin/amd64 Run the following # $ go mod init sample $ go get golang.org/x/exp https://gotipplay.golang.org/p/ifloU6kyjMt
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;golang.org/x/exp/maps&amp;#34; &amp;#34;golang.org/x/exp/slices&amp;#34; ) func main() { colors := map[string]string{ &amp;#34;White&amp;#34;: &amp;#34;#FFFFFF&amp;#34;, &amp;#34;Black&amp;#34;: &amp;#34;#000000&amp;#34;, &amp;#34;Blue&amp;#34;: &amp;#34;#0000FF&amp;#34;, &amp;#34;Red&amp;#34;: &amp;#34;#FF0000&amp;#34;, &amp;#34;Green&amp;#34;: &amp;#34;#00FF00&amp;#34;, } fmt.</description></item></channel></rss>