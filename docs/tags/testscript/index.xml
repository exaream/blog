<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TestScript on Tech</title><link>https://exaream.dev/tags/testscript/</link><description>Recent content in TestScript on Tech</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>exaream</copyright><lastBuildDate>Sun, 07 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://exaream.dev/tags/testscript/index.xml" rel="self" type="application/rss+xml"/><item><title>Go TestScript</title><link>https://exaream.dev/go/testscript/</link><pubDate>Sun, 07 Aug 2022 00:00:00 +0000</pubDate><guid>https://exaream.dev/go/testscript/</guid><description>Go TestScript # 概要 # TestScript は元々 Go のコンパイラをテストするために作成されたもの。
https://cs.opensource.google/go/go/+/release-branch.go1.19:src/cmd/go/script_test.go シェルスクリプトのように記述でき、ファイルシステム上で動作するものをテストできる。 定義済のコマンドは以下で確認できる。
https://cs.opensource.google/go/go/+/release-branch.go1.19:src/cmd/go/script_test.go 独自のコマンドを追加することができる。 Go のコンパイル時に使用される TestScript は以下で確認できる。
https://cs.opensource.google/go/go/+/master:src/cmd/go/testdata/script/ TestScript は txtar (テキストベースのアーカイブ形式) によって表現されている。
https://pkg.go.dev/golang.org/x/tools/txtar Go 内部のテストコードを使用できるよう、再構成されたものが以下で公開されている。
https://github.com/rogpeppe/go-internal/tree/master/testscript テストコードの書き方 # 定義済コマンドをテストで使用 # testdata/script/TestFoo/hello-world.txt
exec echo &amp;#39;hello world!&amp;#39; stdout &amp;#39;hello world!\n&amp;#39; sample_test.go
package sample_test import ( &amp;#34;path/filepath&amp;#34; &amp;#34;testing&amp;#34; &amp;#34;github.com/rogpeppe/go-internal/testscript&amp;#34; ) var scriptDir = filepath.Join(&amp;#34;testdata&amp;#34;, &amp;#34;script&amp;#34;) func TestFoo(t *testing.T) { t.Parallel() testscript.Run(t, testscript.Params{ Dir: filepath.Join(scriptDir, t.Name()), WorkdirRoot: t.TempDir(), }) } 独自のコマンドを作成してテストで使用 # testdata/script/TestFoo/hello-world.</description></item></channel></rss>