<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Tech</title><link>https://exaream.dev/go/</link><description>Recent content in Go on Tech</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>exaream</copyright><lastBuildDate>Wed, 01 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://exaream.dev/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go TestScript</title><link>https://exaream.dev/go/testscript/</link><pubDate>Sun, 07 Aug 2022 00:00:00 +0000</pubDate><guid>https://exaream.dev/go/testscript/</guid><description>Go TestScript # 概要 # TestScript は元々 Go のコンパイラをテストするために作成されたもの。
https://cs.opensource.google/go/go/+/release-branch.go1.19:src/cmd/go/script_test.go シェルスクリプトのように記述でき、ファイルシステム上で動作するものをテストできる。 定義済のコマンドは以下で確認できる。
https://cs.opensource.google/go/go/+/release-branch.go1.19:src/cmd/go/script_test.go 独自のコマンドを追加することができる。 Go のコンパイル時に使用される TestScript は以下で確認できる。
https://cs.opensource.google/go/go/+/master:src/cmd/go/testdata/script/ TestScript は txtar (テキストベースのアーカイブ形式) によって表現されている。
https://pkg.go.dev/golang.org/x/tools/txtar Go 内部のテストコードを使用できるよう、再構成されたものが以下で公開されている。
https://github.com/rogpeppe/go-internal/tree/master/testscript テストコードの書き方 # 定義済コマンドをテストで使用 # testdata/script/TestFoo/hello-world.txt
exec echo &amp;#39;hello world!&amp;#39; stdout &amp;#39;hello world!\n&amp;#39; sample_test.go
package sample_test import ( &amp;#34;path/filepath&amp;#34; &amp;#34;testing&amp;#34; &amp;#34;github.com/rogpeppe/go-internal/testscript&amp;#34; ) var scriptDir = filepath.Join(&amp;#34;testdata&amp;#34;, &amp;#34;script&amp;#34;) func TestFoo(t *testing.T) { t.Parallel() testscript.Run(t, testscript.Params{ Dir: filepath.Join(scriptDir, t.Name()), WorkdirRoot: t.TempDir(), }) } 独自のコマンドを作成してテストで使用 # testdata/script/TestFoo/hello-world.</description></item><item><title>Go Check List</title><link>https://exaream.dev/go/check-list/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://exaream.dev/go/check-list/</guid><description>Go Check Sheet # References # Style Guide Effective Go Go Code Review Comments Uber Go Style Guide Knowledge プログラミング言語Go完全入門 よくわかるcontextの使い方 Goでの並行処理を徹底解剖！ Goで時刻を扱うチートシート Goにおけるjsonの扱い方を整理・考察してみた ~ データスキーマを添えて Go言語のジェネリクス入門(1) Go言語のジェネリクス入門(2) インスタンス化と型推論 Workspace mode Testing Advanced Testing with Go Goのテーブル駆動テストをわかりやすく書きたい Library multierr testscript Static Analytics goleak errcheck gosec tennvet fieldalignment 設計 # パッケージ管理 # Go Modules (go.mod) 設計 # 分割 パッケージを適切に分割 ファイルを適切に分割 命名 大文字なしの1単語 UpperCamelCase, snake_cake, chain-case は NG 具体性のない命名は NG e.g. common や util などは NG fileutil のように具体性がある命名は許容範囲 標準/準標準パッケージと同じ名前は避けること 気持ちの良い命名は良い設計ができた証拠 冗長な命名は設計がうまくいっていない証拠 適切に型定義すること 多くの引数を引き回さないこと 何でもかんでも構造体にしないこと e.</description></item><item><title>Go Link</title><link>https://exaream.dev/go/link/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.dev/go/link/</guid><description>Go Link # Style Guide # Uber Go Style Guide Uber Go Style Guide(Japanese) Video # Go Conference # 2022 Spring Track A 2022 Spring Track B 2021 Autumn Track A 2021 Autumn Track B 2021 Spring Track A 2021 Spring Track B Article # Go Github Go Spec Go Release Go Download Go の命名規則 Goのロギングライブラリ 2021年冬 私がGoのソースコードを読むときのTips Goの標準ライブラリのコードリーディングのすすめ インタフェースの実装パターン Goのinterfaceをデータ構造から理解する Go First Step The Go Playground A Tour of Go Effective Go Standard library Project Layout (Directory Structure) Error handling and Go Context go-safeweb SQL Injection, XSS, XSRF etc.</description></item><item><title>Go Test</title><link>https://exaream.dev/go/test/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.dev/go/test/</guid><description>Go Test # Unit Test # Run # Run all unit tests # $ go test ./... Show detailed information
$ go test ./... -v Disable test cache
$ go test ./... -count=1 Run a method of a unit test # $ go test ./mypkg/ -run TestSample Coverage # Output coverage to a terminal
$ go test -cover ./... Output the coverage profile to a file and view it in a browser</description></item><item><title>Go Word</title><link>https://exaream.dev/go/word/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://exaream.dev/go/word/</guid><description> Go Word # Mutex:「相互排他」を表す英語 &amp;ldquo;mutual exclusion&amp;rdquo; の略。(「Go言語による並行処理」P49 3.2.2参照)</description></item></channel></rss>