<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Tech Blog</title><link>https://exaream.github.io/tech-blog/docker/</link><description>Recent content in Docker on Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>exaream</copyright><lastBuildDate>Wed, 01 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://exaream.github.io/tech-blog/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker Memo</title><link>https://exaream.github.io/tech-blog/docker/memo/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/docker/memo/</guid><description>Docker Memo # Dockerfile # command description FROM ビルドするイメージのベースイメージ RUN イメージをビルドする際、コンテナで実行するコマンドを定義 COPY ホスト側からコンテナ側にファイルやディレクトリをコピー ADD COPY の機能に加え、アーカー部の自動展開やURLを指定してファイルやディレクトリをコンテナに追加。OSのベースイメージ作成時のような特殊なケースで活用 CMD コンテナがフォアグラウンドで実行するコマンドを定義 ENTRYPOINT コンテナを実行可能ファイルとして使用する際に定義する際に定義するコマンド。CMD と ENTRYPOINT は併用可能 ARG docker image build 時に利用する変数 ENV コンテナ内の環境変数を定義 EXPOSE コンテナが公開するポート VOLUME ホストや他のコンテナからマウントできるポイントを作成 LABEL イメージに追加するメタデータ STOPSIGNAL コンテナに送られて終了するシステムコール信号を設定 HEALTHCHECK コンテナ内でコマンドを実行し、その結果をヘルスチェック(死活監視)として利用 USER コンテナ実行時のコンテナユーザー。イメージビルド時、USER 定義後の RUN もそのユーザで実行される WORKDIR コンテナ内の作業ディレクトリ ONBUILD コンテナ内で実行するコマンドを定義するが、定義したイメージでは実行されない。ONBUILD を定義したベースイメージを利用するイメージのビルド時に実行される Image # Dockerfile から Docker イメージをビルド # $ docker image build [options] (Dockerfileを配置したディレクトリのパス|URL) Docker Hub にホストされている Docker イメージを検索 # $ docker search [options] 検索キーワード Inspection # Get instance&amp;rsquo;s information # $ docker inspect &amp;lt;CONTAINER ID|NAME&amp;gt; Get an instance’s IP address # $ docker inspect --format=&amp;#39;{{range .</description></item><item><title>Docker Swarm</title><link>https://exaream.github.io/tech-blog/docker/docker-swarm/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/docker/docker-swarm/</guid><description>Docker Swarm # Swarm クラスタを初期化 # docker swarm init [options] Swarm クラスタに node もしくは manager を追加 # docker swarm join [options] managerホスト:ポート Swarm クラスタから node もしくは manager を離脱 # docker swarm leave [options] Swarm クラスタに Stack をデプロイ # docker stack deploy [options] Stack名 Swarm クラスタにデプロイされている Stack 一覧を表示 # docker stack (ls|list) [options] Stack 内で実行されているタスクを表示 # docker stack ps [options] Stack名 Swarm クラスタからStackを削除 # docker stack (rm|remove|down) [options] Stack名.</description></item><item><title>docker-compose</title><link>https://exaream.github.io/tech-blog/docker/docker-compose/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://exaream.github.io/tech-blog/docker/docker-compose/</guid><description>Docker Compose # Basic operation # Run containers # カレントディレクトリの docker-compose.yml に記載したコンテナ群を起動 初回起動時にコンテナ群をつなぐユーザ定義・ブリッジ・ネットワークも自動生成 フォアグラウンドモードで起動する場合(ターミナルにコンテナログを出力) $ docker-compose up バックグラウンドモードで起動する場合 $ docker-compose up -d Stop containers # フォアグラウンドモードで起動した場合 ターミナルで Ctrl+C 押下 バックグラウンドモードで起動した場合 $ docker-compose stop Rebuild an image # $ docker-compose build Remove containers and networks # $ docker-compose down Stop and remove all (containers, images, volumes, networks) 滅びの呪文 # docker-compose down --rmi all --volumes --remove-orphans</description></item></channel></rss>