[{"id":0,"href":"/tech-blog/go/memo/","title":"Go Memo","section":"Go","content":"Go Memo #  macOS でパスを通す方法 #  echo \u0026#34;export GOPATH=$HOME/go\u0026#34; \u0026gt;\u0026gt; ~/.bash_profile echo \u0026#34;export PATH=$PATH:$GOPATH/bin\u0026#34; \u0026gt;\u0026gt; ~/.bash_profile source ~/.bash_profile コンパイル, バイナリ #  コンパイルして実行 #  バイナリ（実行可能ファイル）の生成なし\n$ go run main.go $ go run . $ go run pkgname コンパイルしてバイナリを生成 #  バイナリ（実行可能ファイル）の生成あり\n$ go build main.go $ go build . $ go build pkgname 静的解析によるミスの検出 #  バグと思われるミスを検出 #  go test 実行時に自動で実行される The Go Playground でも実行される\n$ go vet main.go $ go vet . $ go vet pkgname エラー処理のミスを検出 #  $ go get github.com/kisielk/errcheck $ errcheck ./... セキュリティのチェック #  $ curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest $ gosec ./... Linterのセットを使ってチェック #  Staticcheck #  https://staticcheck.io/docs/\n$ go install honnef.co/go/tools/cmd/staticcheck@latest $ staticcheck ./... GolangCI-Lint #  https://golangci-lint.run/\n$ brew install golangci-lint $ brew upgrade golangci-lint or $ go get github.com/golangci/golangci-lint/cmd/golangci-lint@v1.42.0 $ golangci-lint run ./... $ golangci-lint run dir1 dir2/... dir3/file1.go reviewdog #  PRレビューで静的解析ツールを使用\n$ brew install reviewdog/tap/reviewdog $ brew upgrade reviewdog/tap/reviewdog or go install github.com/reviewdog/reviewdog/cmd/reviewdog@latest golint ./... リファクタリング #   gomvpkg パッケージ名の変更ができるツール  https://golang.org/x/tools/cmd/gomvpkg   gorename 識別子の名前を変更するツール  https://golang.org/x/tools/cmd/gorename   eg exampleベースのリファクタリングツール  https://golang.org/x/tools/cmd/eg https://rakyll.org/eg/    Debug #   Delve Go専用のデバッガ, goroutine や channelにも対応  https://github.com/derekparker/delve    コードのフォーマット #   コードの書式を整形  $ go fmt main.go $ go fmt . $ go fmt pkgname 組み込み型 #  言語に備わっているため最初から型のこと\n   型 説明 ゼロ値(初期値)     bool 真偽値 false   string 文字列 \u0026quot;\u0026quot;   int8/int16/int32/int64 整数(符号あり) 0   uint8/uint16/uint32/uint64 整数(符号なし=unsigned) 0   int 整数(符号あり, 32bit以上) 0   uint 整数(符号なし, 32bit以上) 0   byte 整数(uint8 の別名) 0   rune 整数(int32 の別名) 0   uintptr 整数(符号なし, ポインタの値を格納する大きさ) 0   float32/float64 浮動小数点数 0   complex32 複素数(float32の実数部と虚数部を持つ) (0+0i)   complex64 複素数(float64の実数部と虚数部を持つ) (0+0i)   error エラー nil    変数定義 #  // 変数定義と代入が同時 var n int = 100 // 変数定義と代入が別 var n int n = 100 // 型を省略(型推論により自動的に int 型を定義) var n = 100 // var を省略, 関数内でのみ使用可能 n := 100 // まとめて記述する方法 var ( n = 100 m = 200 ) ゼロ値 #   ゼロ値とはGoの変数に設定されている初期値のこと。 明示的な初期化をせずに使用可能。  ゼロ値があるため初期化が不要な例 #  package main func main() { // ゼロ値 0 のため初期値の設定は不要 \t// var sum int = 0 \tvar sum int for i := 1; i \u0026lt;= 10; i++ { sum += 1 } println(sum) } package main import ( \u0026#34;fmt\u0026#34; \u0026#34;strings\u0026#34; ) func main() { words := []string{\u0026#34;dog\u0026#34;, \u0026#34;cat\u0026#34;, \u0026#34;dog\u0026#34;, \u0026#34;fish\u0026#34;, \u0026#34;cat\u0026#34;} counts := map[string]int{} for _, word := range words { // ゼロ値 0 のため初期値の設定は不要 \tcounts[word]++ } fmt.Println(counts) // map[dog:2 cat:2 fish:1] } 定数 #   定数とは値が変わらないもののこと。 コンパイル時から値が変わらないもの。 リテラルで記述されることが多い。  リテラル #   数字の区切り: 桁を区切る場合 _ を使用 (可読性の向上のため) 2進数・8進数・16進数: 数字の前にプレフィックスを付与    種別 値 説明      nilリテラル nil 無しを示す特別な値    真偽値リテラル true 真     false 偽    数値リテラル 1234 整数     123_456 整数 (カンマの変わりに _ を使用) 例は 123,456 と同義    0777 8進数     0o755 8進数 接頭辞は 0O も可    0x89ab 16進数 接頭辞は 0X も可    0b1111 2進数 接頭辞は 0B も可    123.4 小数     1.23e4 浮動小数点数 1.23E4 も可    1.23i 虚数    文字列リテラル abc     ルーンリテラル a 文字(rune)       定数式 #   定数のみからなる演算式 コンパイル時に計算     種類 例 演算結果     四則演算 100 + 200 300   シフト演算 1 \u0026laquo; 2 4   文字列結合 \u0026ldquo;Hello, \u0026quot; + \u0026ldquo;世界\u0026rdquo; \u0026ldquo;Hello, 世界\u0026rdquo;   関係演算/論理演算 !(10 == 20) true    名前付き定数 #   定数に名前をつけて定義  // 型のある定数 const n int = 100 // 型のない定数 const m = 100 // 定数式の使用 const s = \u0026#34;Hello, \u0026#34; + \u0026#34;世界\u0026#34; // まとめて記述 const ( x = 100 y = 200 ) 定数の型 #   型を明治しない場合, 定数は型を持たず, デフォルトの型を持つ     種類 例 デフォルトの型     整数 100 int   浮動小数点数 1.5 float64   複素数 1+4i complex128   ルーン \u0026lsquo;A\u0026rsquo;, \u0026lsquo;世\u0026rsquo;, \u0026lsquo;エ\u0026rsquo; rune   文字列 \u0026ldquo;hoge\u0026rdquo; string   真偽値 true, false bool    定数のデフォルトの型 #   型推論ではデフォルトの型が推論される 型が指定されている変数への代入はその型になる 変数や型のある定数との演算はそれらの型になる  キャストできない場合はコンパイルエラーになる    型定義の右辺の省略 #  名前付き定数定義の右辺は省略可\n グループ化された名前付き定数で使用 2つ目以降の名前付き定数定義の右辺が省略可 2つ目以降の定数定義の右辺は1つ目の右辺と同じ値  func main() { const ( a = 1 + 2 b c d ) fmt.Println(a, b, c, d) // 3 3 3 3 } iota #   連続した定数を作るための仕組み グループ化された名前付き定数の定義で使用 0 から始まり1ずつ加算  func main() { const ( a = iota b c d ) fmt.Println(a, b, c, d) // 0 1 2 3 } func main() { const ( a = 1 \u0026lt;\u0026lt; iota // 式の中でも使用可能 \tb c d ) fmt.Println(a, b, c, d) // 1 2 4 8 } 演算子 #  算術演算 #     演算子 説明 備考     +x, -x 符号    x + y 加算    x - y 減算    x * y 乗算(掛け算)    x / y 除算(割り算)    x % y 除算の余り     代入演算 #     演算子 説明 備考     x = y 変数への代入    x := y 変数の初期化と代入    x++ 1の加算と代入 x = x + 1 と同義   x-- 1の加算と代入 x = x - 1 と同義   x += y 加算と代入 x = x + y と同義   x -= y 減算と代入 x = x - y と同義   x /= y 除算(割り算)と代入 x = x / y と同義   x %= y 除算(割り算)の余りの演算と代入 x = x % y と同義    ビット演算 #     演算子 説明 例     x \u0026amp; y 論理積(AND)    x | y 論理和(OR)    x ^ y 排他的論理和(XOR)    x \u0026amp;^ y x AND (NOT y)    x \u0026lt;\u0026lt; y 左に算術シフト    x \u0026gt;\u0026gt; y 右に算術シフト    x \u0026amp;= y 論理積(AND)の演算と代入 x = x \u0026amp; y と同義   x |= y 論理和(OR)の演算と代入 x = x | y と同義   x ^= y 排他的論理和(XOR)の演算と代入 x = x ^ y と同義   x \u0026amp;^= y x AND (NOT y)の演算と代入 x = x \u0026amp;^ y と同義   x \u0026lt;\u0026lt;= y 左に算術シフトと代入 x = x \u0026lt;\u0026lt; y と同義   x \u0026gt;\u0026gt;= y 右に算術シフトと代入 x \u0026gt;\u0026gt; y と同義    論理演算 #     演算子 説明 備考     x \u0026amp;\u0026amp; y x かつ y (AND)    x || y x または y (OR)    !x x が true の場合 false, false の場合 true (NOT)     比較演算 #     演算子 説明 備考     x == y x と y が等しい    x != y x と y が等しくない    x \u0026lt; y x が y より小さい    x \u0026lt;= y x は y 以下    x \u0026gt; y x は y より大きい    x \u0026gt;= y x は y 以上     アドレス演算 #     演算子 説明 備考     \u0026amp;x ポインタを取得    *x ポインタが指す値を取得     チャネル演算 #     演算子 説明 備考     ch \u0026lt;- x チャネル ch に x を送信    x =\u0026lt;- ch チャネル ch から x に受信     制御構文 #  条件分岐 if #  if x == 1 { println(\u0026#34;x は 1\u0026#34;) } else if x == 2 { println(\u0026#34;x は 2\u0026#34;) } else { println(\u0026#34;x は 1 でも 2 でもない\u0026#34;) } go の if 文の特徴\n// () は不要 if a == 0 { } // エラー (式の後に { なしの改行は不可) if a == 0 { } // エラー (1行での記述は不可) if (a == 0) println(a) 条件分岐 switch #   break は不要 case に式を使用可能  switch age { case 0, 1, 2: // 0 または 1 または 2 の場合 \tprintln(\u0026#34;baby\u0026#34;) // 何もしなければ break \t// 次のケースに進みたい場合のみ fallthrough を記述 case age \u0026gt;= 3 \u0026amp;\u0026amp; age \u0026lt;= 12: // 式を使用する場合 \tprintln(\u0026#34;child\u0026#34;) case age \u0026gt;= 13 \u0026amp;\u0026amp; age \u0026lt;= 19: // 式を使用する場合 \tprintln(\u0026#34;teenager\u0026#34;) case age \u0026gt; 20: // 式を使用する場合 \tprintln(\u0026#34;adult\u0026#34;) default: println(\u0026#34;default\u0026#34;) } 繰り返し(ループ) for #  // 初期値; 継続条件; 更新文 if i := 0; i \u0026lt; 100; i++ { } // 継続条件のみ if i \u0026lt;= 100 { } // 無限ループ for { } // range を使用した繰り返し for i, v := range []int{1, 2, 3} { } break によるループの抜け出し #  func main() { var i int for { if i%2 == 1 { break } i++ } } ラベル指定の break\nfunc main() { var i int LOOP: for { if i%2 == 1 { break LOOP } i++ } } 奇数と偶数\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { for i := 1; i \u0026lt;= 100; i++ { if i%2 == 0 { fmt.Printf(\u0026#34;%d even\\n\u0026#34;, i) } else { fmt.Printf(\u0026#34;%d odd\\n\u0026#34;, i) } } for i := 1; i \u0026lt;= 100; i++ { switch { case i%2 == 0: fmt.Printf(\u0026#34;%d even\\n\u0026#34;, i) default: fmt.Printf(\u0026#34;%d odd\\n\u0026#34;, i) } } } おみくじ\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;time\u0026#34; ) func main() { t := time.Now().UnixNano() // current time \trand.Seed(t) n := rand.Intn(6) // 0〜5  switch n + 1 { case 6: fmt.Println(\u0026#34;大吉\u0026#34;) case 5, 4: fmt.Println(\u0026#34;中吉\u0026#34;) case 3, 2: fmt.Println(\u0026#34;小吉\u0026#34;) default: fmt.Println(\u0026#34;凶\u0026#34;) } } コンポジット型 #  複数のデータ型が集まって1つのデータ型になっているもの\n   型の種類 説明 ゼロ値 例     構造体 型の異なるデータ型を集めたデータ型 フィールドがすべてゼロ値    配列 同じ型のデータを集めて並べたデータ型 要素がすべてゼロ値    スライス 配列の一部を切り出したデータ型 nil    マップ キーと値をマッピングさせたデータ型 nil     構造体の例\nvar person struct { name string age int } person := struct { name string age int }{ name: \u0026#34;Gopher\u0026#34;, age: 20, } fmt.Println(person.name) 配列の特徴と例\n 要素の型はすべて同じ 要素数が違えば別の型として扱われる 要素数は変更できない（要素数は固定長） 型は型リテラルで記述することが多い  // ゼロ値で初期化 var ns1 [5]int // 配列リテラルで初期化 var ns2 [5]{10, 20, 30, 40, 50} // 要素数を値から推論 ns3 := [...]int{10, 20, 30, 40, 50} // 要素の 5番目 50, 10番目 100, それ以外が0の要素数11の配列 ns4 := [...]int{5: 50, 10: 100} fmt.Println(ns4[5]) // 5番目の値 50 fmt.Println(len(ns4)) // 要素数 11 スライスの例\n// ゼロ値は nil var ns1 []int // 長さと要素を指定 ns1 = make([]int, 3, 10) // type, length, capacity // スライス・リテラルで初期化 // 要素数は指定しなくてOK // 自動で配列は作成される var ns2 = []int{10, 20, 30, 40, 50} // 要素の 5番目 50, 10番目 100, それ以外が0の要素数11のスライス ns3 := []int{5: 50, 10: 100} ns := []int{10, 20, 30, 40, 50} // 要素にアクセス println(ns[3]) // 40 // 長さ println(len(ns)) // 容量 println(cap(ns)) // 要素の追加 // 要素が足りない場合は背後の配列が確保される ns = append(ns, 60, 70) コンポジット型を要素としてもつコンポジット型 #   スライスの要素がスライスの場合（多次元スライス）  例：[][]int   マップの値がスライスの場合  例：map[string][]int   構造体のフィールドの型が構造体  struct { A struct { N int } } ユーザ定義型 #  ユーザ定義型の定義の方法 #  type で名前をつけて新しい型を定義する\ntype 型名 基底型\n// 組み込み型を基にする type MyInt int // 他パッケージの型を基にする type MyWriter io.Writer // 型リテラルを基にする type Person struct { Name string } 基底型とユーザ定義型の相互キャスト\u0008が可能 #  キャストなしの演算は不可\ntype MyInt int var n int = 100 m := MyInt(n) n = int(m) 型なし定数から明示的なキャストは不要 #  デフォルトの型からユーザ定義型へキャストできる場合\n// 10秒を表す（time.Duration型） d := 10 * time.Second type Duration int64 組み込み関数 #     function description     print 表示   println 表示(末尾の改行付き)   make コンポジット型の初期化   new 指定した型のメモリの確保   len スライスなどの長さを返却   cap スライスなどの容量を返却   copy スライスをコピー   delete マップから指定したキーのエントリーを削除   complex 複素数型を作成   imag 複素数の虚部を取得   real 複素数の実数部を取得   panic パニックを実行   recover パニックから回復    関数 #  関数の定義 #  func add(x int, y int) int { return x + y } func swap(x, y int) (int, int) { return y, x } x, y := swap(10, 20) // 戻り値の格納を省略したい場合は _ (ブランク変数)を使用 x, _ := swap(10, 20) 名前付き戻り値 #   名前付き戻り値は返却する値がわかりにくくなるため, あまり使わないこと  func swap(x, y int) (x2, y2 int) { y2, x2 = x, y return } 無名関数 #   無名関数を変数に格納したり戻り値として使用することも可能 無名関数と同じスコープ内の変数を無名関数内で使用可能（バグを生みやすいため要注意）  package main func main() { msg := \u0026#34;Hello, world\u0026#34; func() { println(mst) // 無名関数の外の変数を参照可能 \t}() // 無名関数を定義し即呼び出し } 関数型 #   変数への代入 引数に渡して使用 戻り値として返却  fs := make([]func() string, 2) // string 型を返却する関数 // 関数を作成 fs[0] = func() string { return \u0026#34;hoge\u0026#34; } fs[1] = func() string { return \u0026#34;fuga\u0026#34; } for _, f := range fs { // 関数を実行 \tfmt.Println(f()) } 無名関数のよくあるバグ #  fs := make([]func(), 3) for i := range fs { fs[i] = func() { fmt.Println(i) } } // 上記のループを抜けた時点での i の値は 2 のため // 以下のループで毎回 2 が出力される for _, f := range fs { f() } // 期待値 // 0 // 1 // 2  // 実行結果 // 2 // 2 // 2 修正方法1\nfs := make([]func(), 3) for i := range fs { i := i // ここを修正 ループのスコープの変数を格納 \tfs[i] = func() { fmt.Println(i) } } for _, f := range fs { f() } // 実行結果 // 0 // 1 // 2 修正方法2\nfs := make([]func(), 3) for i := 0; i \u0026lt; len(fs); i++ { func(i int) { fmt.Println(i) }(i) } // 実行結果 // 0 // 1 // 2 値のコピー #  p1 := struct { age int name string }{age: 10, name: \u0026#34;Gopher\u0026#34;} p2 := p1 // コピー（変数への代入は実際にはコピー） p2.age = 20 println(p1.age, p1.name) // 10 Gopher println(p2.age, p2.name) // 20 Gopher package main import \u0026#34;fmt\u0026#34; type Person struct { Age int Name string } func main() { p := Person{Age: 10, Name: \u0026#34;Gopher\u0026#34;} f(p) // p　をコピーして関数に渡している \tfmt.Println(p) // main関数内の p には影響なし } func f(p2 Person) { p2.Age = 100 } ポインタ #   変数の格納先を表す値（メモリ上の番地のようなもの） 値で渡される型の値に対して破壊的な操作を加える際に利用 （破壊的な操作 = 関数を出てもその影響が残ること）  func f(xp *int) { // int のポインタ型 \t*xp = 100 // * でポインタの指す先に値を入れる } func main() { var x int // 0 \tf(\u0026amp;x) // \u0026amp; でポインタを取得し引き数として渡す \tprintln(x) // 100 } 内部でポインタを用いられているデータ型 #  以下の型はポインタを用いる必要がない場合が多い\n コンポジット型の一部  スライス マップ チャネル    メソッド #   レシーバと紐付けられた関数  データとそれに対する操作を紐付けるために使用 ドットでメソッドにアクセス    type Hex int func (h Hex) String() string { return fmt.Sprintf(\u0026#34;%x\u0026#34;, int(h)) } var hex Hex = 100 fmt.Println(hex.String()) // 64 レシーバ #   メソッドに関連付けられた変数  メソッド呼び出し時は通常の引き数と同様の扱いとなり, コピーが発生 ポインタを用いることでレシーバへの変更を呼び出し元に伝えることが可能 * レシーバが構造体の場合    type T int func (t *T) f() { println(\u0026#34;hi\u0026#34;) } func main() { var v T = 1 // 以下の2行は同じ意味 \t// (型Tがメソッドを持っているわけではない) \t(\u0026amp;v).f() // ポインタをレシーバとして渡し v に対するメソッド f の振る舞いを実行 \tv.f() // 上の行のシンタックスシュガー(簡略化した記述方法) } package main import \u0026#34;fmt\u0026#34; type person struct { name string age int } // レシーバとして構造体のポインタを渡し // 構造体に対して破壊的変更をおこなう func (p *person) rename(name string) { p.name = name } func main() { var p = person{name: \u0026#34;Foo\u0026#34;, age: 20} fmt.Println(p.name) // Foo \tp.rename(\u0026#34;Bar\u0026#34;) fmt.Println(p.name) // Bar } package main type MyInt int // レシーバとして構造体のポインタを渡し // 構造体に対して破壊的変更をおこなう func (n *MyInt) Inc() { *n++ } func main() { var n MyInt println(n) // 0 \tn.Inc() println(n) // 1 } ポインタ型のメソッドリスト #  type T struct{} func (t T) f() {} func main() { (T{}).f() // T \t(\u0026amp;T{}).f() // *T \t(*\u0026amp;T{}).f() // T } type T struct{} func (t *T) g() {} func main() { (T{}).g() // 実行不可 \t(\u0026amp;T{}).g() (*\u0026amp;T{}).g() } レシーバとして使うことができる型 #    type で定義した型(ユーザ定義の型)\n  ポインタ型(レシーバに変更を与えたい場合)\n  内部にポインタを持つ型(マップやスライスなど)\n  レシーバに対して append する場合はレシーバとしてポインタを渡すこと\n  メソッド値 #  type Hex int func (h Hex) String() string { return fmt.Sprintf(\u0026#34;%x\u0026#34;, int(h)) } func main() { var h Hex = 100 // String() を実行するのではなく Stringメソッドを \t// f に格納するため String の後に () がついていない \tf := h.String // 変数.メソッド名 型は「func() string」 \tfmt.Println(f()) // String() を実行 } メソッド式 #   メソッドを表す式 レシーバを第1引き数とした関数になる  type Hex int func (h Hex) String() string { return fmt.Sprintf(\u0026#34;%x\u0026#34;, int(h)) } func main() { var h Hex = 100 f := Hex.String // 変数の型.メソッド名 レシーバの値を決定していない状態でメソッドを参照 \tfmt.Printf(\u0026#34;%T\\n%s\\n\u0026#34;, f, f(h)) // レシーバを第1引き数とした関数 } パッケージ #  パッケージとは #   関数・変数・定数・型を意味のある単位でまとめたもの 複数のファイルで構成可能  型の定義とメソッドの定義が別ファイルに記述可 同じディレクトリ内でパッケージが混在するのはNG import 文はフィルごとに記述    パッケージの種類 #   main パッケージ  main 関数が存在するパッケージ プログラムの起点(エントリポイント)となるパッケージ 実行可能なGoプログラムの場合は必ず存在   標準パッケージ  Go が最初から用意しているパッケージ 100以上のパッケージが存在   サードパーティパッケージ  第三者(自分を含む)が開発したパッケージ インターネット上に公開されている場合が多い インストールすることで使用可能 ライブラリとも呼ばれている    パッケージのインポート #   他のパッケージに用意された機能(変数・関数・定数など)を使用可  $ go get \u0026lt;pkgname\u0026gt; e.g.\n$ go get github.com/xxx/xxx パッケージ名のエイリアス #   インポートパスの左側にエイリアスを記述 パッケージが他のパッケージと衝突している場合にエイリアスを使用 インポートパスとパッケージ名が異なる場合にエイリアスを使用(バージョンの場合など)  import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; mylog \u0026#34;github.com/foo/log\u0026#34; // パッケージが他のパッケージと衝突している場合 \tbar \u0026#34;github.com/foo/bar/v2\u0026#34; // インポートパスとパッケージ名が異なる場合 ) パッケージ外へのエクスポート #   先頭大文字にした識別子がエクスポートの対象 (=他パッケージから参照可)  var Foo string // exported var bar string // unexported GOPATH #   ソースコードやビルドされたファイルを配置するパス GOPATH の確認方法  $ go env GOPATH tree -L $GOPATH go ├── bin └── pkg ├── mod └── sumdb └── sum.golang.org ディレクトリ/ファイル #  パスを結合 #  path := filepath.Join(\u0026#34;dir\u0026#34;, \u0026#34;main.go\u0026#34;) 相対パスを取得 #  relativePath, err := filepath.Rel(base_path, target_path) 相対パスから絶対パスを取得 #  absolutePath, err := filepath.Abs(relative_path) ディレクトリ #  ディレクトリ名を取得 #  dirName := filepath.Dir(path) ディレクトリを作成 #  err := os.Mkdir(\u0026#34;foo\u0026#34;, 0755) ディレクトリを再帰的に作成 #  err := os.MkdirAll(\u0026#34;foo/bar\u0026#34;, 0755) ディレクトリ名を変更 #  err := os.Rename(\u0026#34;before\u0026#34;, \u0026#34;after\u0026#34;) ディレクトリを移動 #   osRename() で移動 パーテーションをまたぐ場合は移動不可  err := os.Rename(\u0026#34;foo/bar/baz\u0026#34;, \u0026#34;foo/baz\u0026#34;) ディレクトリの権限を変更 #  err := os.Chmod(\u0026#34;foo\u0026#34;, 0755) ディレクトリを削除 #  err := os.Remove(\u0026#34;foo\u0026#34;) ディレクトリを再帰的に削除 #   ディレクトリ内のサブディレクトリやファイルも削除  err := os.RemoveAll(\u0026#34;foo\u0026#34;) ファイル #  ファイルを作成 #  fileObj, err := os.Create(\u0026#34;foo.txt\u0026#34;) ファイルに入力 #  byteCount, err := fileObj.WriteString(\u0026#34;Hello\\n\u0026#34;) ファイルの情報を取得 #  fileInfo, err := os.Stat(file_name) // or fileInfo, err := file_obj.Stat() fileInfo.Name() // ファイル名 fileInfo.Size() // ファイルサイズ fileInfo.Mode() // ファイルモード fileInfo.ModTime() // 最終更新日時 fileInfi.IsDir() // ディレクトリか否か ファイル名を取得 #  fileName := filepath.Base(path) ファイルの拡張子を取得 #  fileExt := filepath.Ext(path) ファイルの拡張子を除外したファイル名を取得 #  fileStem := filepath.Base(path[:len(path)-len(filepath.Ext(path))]) ファイル名を変更 #  err := os.Rename(\u0026#34;foo.txt\u0026#34;, \u0026#34;bar.txt\u0026#34;) ファイルを移動 #  err := os.Rename(\u0026#34;foo/bar/baz.txt\u0026#34;, \u0026#34;foo/baz.txt\u0026#34;) ファイルの権限を変更 #  err := os.Chmod(\u0026#34;foo.txt\u0026#34;, 0644) 日付・時刻 #  現在日時を取得 #  t := time.Now() fmt.Println(t) // 2021-08-27 23:44:43.784975 +0900 JST m=+0.000236593 タイムゾーンを指定し日時を取得 #  local := time.Date(2021, 1, 2, 3, 4, 5, 6, time.Local) fmt.Println(local) // 2021-01-02 03:04:05.000000006 +0900 JST utc := time.Date(2021, 1, 2, 3, 4, 5, 6, time.UTC) fmt.Println(utc) // 2021-01-02 03:04:05.000000006 +0000 UTC タイムゾーンを変換 #  t := time.Date(2021, 1, 2, 3, 4, 5, 6, time.Local) fmt.Println(t) // 2021-01-02 03:04:05.000000006 +0900 JST utc := t.UTC() fmt.Println(utc) // 2021-01-01 18:04:05.000000006 +0000 UTC local := utc.Local() fmt.Println(local) // 2021-01-02 03:04:05.000000006 +0900 JST const ymdhis string = \u0026#34;2006-01-02 15:04:05\u0026#34; now := time.Now() // UTC (協定世界時) utc, err := time.LoadLocation(\u0026#34;UTC\u0026#34;) if err != nil { log.Println(\u0026#34;Failed to load location UTC.\u0026#34;) } fmt.Println(utc.String()) // UTC fmt.Println(now.In(utc).Format(ymdhis)) // 2021-01-01 18:04:05 // JST (日本標準時) jst, err := time.LoadLocation(\u0026#34;Asia/Tokyo\u0026#34;) if err != nil { log.Println(\u0026#34;Failed to load location Asia/Tokyo.\u0026#34;) } fmt.Println(jst.String()) // Asia/Tokyo fmt.Println(now.In(jst).Format(ymdhis)) // 2021-01-02 03:04:05 Local -\u0026gt; UTC\nconst ymdhis string = \u0026#34;2006-01-02 15:04:05\u0026#34; t, err := time.ParseInLocation(ymdhis, \u0026#34;2021-01-02 03:04:05\u0026#34;, time.Local) if err != nil { log.Println(\u0026#34;Faild to parse local time.\u0026#34;) } t.In(time.UTC) UTC -\u0026gt; Local\nconst ymdhis string = \u0026#34;2006-01-02 15:04:05\u0026#34; t, err := time.ParseInLocation(ymdhis, \u0026#34;2021-01-02 03:04:05\u0026#34;, time.UTC) if err != nil { log.Println(\u0026#34;Faild to parse time of UTC.\u0026#34;) } t.In(t.Local) 年月日・時分秒・ナノ秒を取得 #  t := time.Date(2021, 1, 2, 3, 4, 5, 6, time.Local) fmt.Println(t.Year()) // 2021 fmt.Println(t.Month()) // January fmt.Println(int(t.Month())) // 1 fmt.Println(t.Day()) // 2 fmt.Println(t.Weekday()) // Saturday fmt.Println(t.YearDay()) // 2 fmt.Println(t.Hour()) // 3 fmt.Println(t.Minute()) // 4 fmt.Println(t.Second()) // 5 fmt.Println(t.Nanosecond()) // 6 年月日を取得 #  t := time.Date(2021, 1, 2, 3, 4, 5, 6, time.Local) year, month, day := t.Date() fmt.Println(year) // 2021 fmt.Println(month) // January fmt.Println(day) // 2 時分秒を取得 #  t := time.Date(2021, 1, 2, 3, 4, 5, 6, time.Local) hour, min, sec := t.Clock() fmt.Println(hour) // 3 fmt.Println(min) // 4 fmt.Println(sec) // 5 UNIXタイム・秒・ミリ秒・ナノ秒を取得 #  t := time.Date(2021, 1, 2, 3, 4, 5, 6, time.Local) fmt.Println(t.Unix()) // 1609524245 fmt.Println(t.UnixNano() / int64(time.Millisecond)) // 1609524245000 fmt.Println(t.UnixNano()) // 1609524245000000006 時・分・秒・ミリ秒以下の切り捨て #  Trancate() での切り捨ては UTC で行われるとのこと\nt := time.Date(2021, 1, 2, 3, 4, 5, 678900000, time.UTC) fmt.Println(t) // 2021-01-02 03:04:05.6789 +0000 UTC (切り捨て前) fmt.Println(t.Truncate(time.Hour * 24)) // 2021-01-02 00:00:00 +0000 UTC (切り捨て 時間) fmt.Println(t.Truncate(time.Hour)) // 2021-01-02 03:00:00 +0000 UTC (切り捨て 分) fmt.Println(t.Truncate(time.Minute)) // 2021-01-02 03:04:05 +0000 UTC (切り捨て 秒) fmt.Println(t.Truncate(time.Second)) // 2021-02-03 04:05:06 +0000 UTC (切り捨て ミリ秒以下) t = time.Date(2021, 1, 2, 3, 4, 5, 678900000, time.Local) fmt.Println(t.Truncate(time.Hour * 24)) // 2021-01-01 09:00:00 +0900 JST (UTC で切り捨て済) 日時の追加(単位を使用) #  t1 := time.Date(2021, 1, 2, 3, 4, 5, 678900000, time.UTC) fmt.Println(t1) // 2021-01-02 03:04:05.6789 +0000 UTC t2 := t1.Add(time.Minute * 2) // 2分追加 fmt.Println(t2) // 2021-01-02 03:06:05.6789 +0000 UTC 日時の追加(追加する年・月・日を指定) #  t1 := time.Date(2021, 1, 2, 3, 4, 5, 678900000, time.UTC) fmt.Println(t1) // 2021-01-02 03:04:05.6789 +0000 UTC t2 := t1.AddDate(1, 2, 3) // 1年・2ヶ月・3日追加 fmt.Println(t2) // 2022-03-05 03:04:05.6789 +0000 UTC 日時の前後比較 #  // t1 \u0026lt; t2 t1 := time.Date(2021, 1, 2, 3, 4, 5, 678900000, time.UTC) t2 := time.Date(2021, 1, 2, 3, 4, 5, 678910000, time.UTC) fmt.Println(t1.Before(t2)) // true fmt.Println(t2.Before(t1)) // false fmt.Println(t1.After(t2)) // fase fmt.Println(t2.After(t1)) // true 日時の同値比較 #  // t1 == t2 t1 := time.Date(2021, 1, 2, 3, 4, 5, 678900000, time.UTC) t2 := time.Date(2021, 1, 2, 3, 4, 5, 678900000, time.UTC) fmt.Println(t1.Equal(t2)) // true 現在時刻までの経過時間を取得 #  t := time.Date(2021, 1, 2, 3, 4, 5, 678900000, time.Local) d := time.Since(t) // or time.Now().Sub(t) fmt.Println(d) // 5800h26m17.806336s 曜日を日本語に変換 #  weekdays := [...]string{\u0026#34;日\u0026#34;, \u0026#34;月\u0026#34;, \u0026#34;火\u0026#34;, \u0026#34;水\u0026#34;, \u0026#34;木\u0026#34;, \u0026#34;金\u0026#34;, \u0026#34;土\u0026#34;} now := time.Now() weekday := now.Weekday() fmt.Println(weekday) // =\u0026gt;\u0026#34;Tuesday\u0026#34; fmt.Println(weekdays[weekday]) // =\u0026gt;\u0026#34;火\u0026#34; IPアドレス #  IPアドレスからホスト名を取得 #  host, err := net.LookupAddr(ip) Struct #  https://www.yoheim.net/blog.php?q=20170902\n構造体で、値メソッドとポインタメソッドを使い分ける\nGo Modules #  ローカル・パッケージのインポート #  sample/ ├── foo/ │ └── bar.go ├── go.mod ├── go.sum ├── main.go go.mod\nmodule sample go 1.16 foo/bar.go\npackage sample import \u0026#34;fmt\u0026#34; func IsAvailable() { fmt.Println(\u0026#34;The local package is available.\u0026#34;) } main.go\npackage main import \u0026#34;sample\u0026#34; func main() { sample.IsAvailable() } メモ #  スライスの例\nvar ns []int マップの例\nvar m map[string]int // make で初期化 m = make(map[string]int) // 容量を指定可 m = make(map[string]int, 10) // リテラルで初期化 m := make(map[string]int{\u0026#34;x\u0026#34;: 10, \u0026#34;y\u0026#34;: 20}) // 空の場合 m := map[string]int{} // キーをしていしてアクセス println(m[\u0026#34;x\u0026#34;]) // キーを指定して入力 m[\u0026#34;x\u0026#34;] = 30 // 存在を確認 n, ok := m[\u0026#34;z\u0026#34;] println(z, ok) // キーを指定して削除 delete(m, \u0026#34;z\u0026#34;) // 削除されていることを確認 n, ok := m[\u0026#34;z\u0026#34;] println(n, ok) // ゼロ値と false を返却   キーと値の型を指定 キーには == で比較できる型以外はNG。（スライスは不可。たぶん長さが異なる等があるため。）  キーとして構造体やポインタも指定可。構造体の要素がスライスの場合はNG。    References #   プログラミング言語Go完全入門 Slice Tricks https://www.tohoho-web.com/ex/golang.html https://ashitani.jp/golangtips/tips_file.html https://qiita.com/hnishi/items/a9217249d7832ed2c035 https://qiita.com/fetaro/items/31b02b940ce9ec579baf https://qiita.com/tchnkmr/items/f3c94abb3e3a47e993ab  "},{"id":1,"href":"/tech-blog/go/test/","title":"Go Test","section":"Go","content":"Go Test #  Unit Test #  Run #  Run all unit tests #  $ go test ./... Show detailed information\n$ go test ./... -v Disable test cache\n$ go test ./... -count=1 Run a method of a unit test #  $ go test ./mypkg/ -run TestSample Coverage #  $ go test ./... -cover Clean test cache #  If you see (cached) in results of unit tests\n$ go clean -testcache Setup and shutdown #  func TestMain(m *testing.M) { setup() code := m.Run() shutdown() os.Exit(code) } func setup() { // Voluntary method name \t// Your code } func shutdown() { // Voluntary method name \t// Your code } Run subtests in parallel #  func TestSample(t *testing.T) { t.Parallel() // Run main test in parallel \tt.Logf(\u0026#34;Start: %s\u0026#34;, time.Now()) tests := []struct { name string code string msg string }{ {\u0026#34;1\u0026#34;, \u0026#34;0001\u0026#34;, \u0026#34;foo\u0026#34;}, {\u0026#34;2\u0026#34;, \u0026#34;0002\u0026#34;, \u0026#34;bar\u0026#34;}, {\u0026#34;3\u0026#34;, \u0026#34;0003\u0026#34;, \u0026#34;baz\u0026#34;}, } for _, test := range tests { t.Run(test.name, func(t *testing.T) { // Run subtests \tt.Parallel() // Run subtests in parallel \tif msg := mypkg.Sample(test.code); msg != test.msg { t.Errorf(\u0026#34;The message must be %s: %s\u0026#34;, test.msg, msg) } }) } t.Logf(\u0026#34;End: %s\u0026#34;, time.Now()) } "},{"id":2,"href":"/tech-blog/python/memo/","title":"Python Memo","section":"Python","content":"Python Memo #  Install macOS #  Check the default version of Python on macOS #  $ python --version Python 2.7.16 $ which python /usr/bin/python Install the latest version using Homebrew #   brew update Update Homebrew itself brew install Install package  $ brew update $ brew install python Add Python\u0026rsquo;s path #  $ vi ~/.bash_profile export PATH=\u0026#34;/usr/local/opt/python/libexec/bin:$PATH\u0026#34; $ source ~/.bash_profile Check that the latest version is available #  $ python --version Python 3.9.7 $ which python /usr/local/opt/python/libexec/bin/python If you want to update Python on macOS in the future #   brew upgrade Update if there is an update for the installed package  $ brew update $ brew upgrade python Version #  Terminal #  $ python --version Python 3.9.6 Short option of --version\n$ python -V Python 3.9.6 More detailed information\n$ python -VV Python 3.9.6 (default, Jul 22 2021, 15:16:20) [GCC 8.3.0] Source code #  sys #  import sys print(sys.version) # 3.9.6 (default, Jul 22 2021, 15:16:20)  # [GCC 8.3.0] print(type(sys.version)) # \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; print(sys.version_info) # sys.version_info(major=3, minor=9, micro=6, releaselevel=\u0026#39;final\u0026#39;, serial=0) print(type(sys.version_info)) # \u0026lt;class \u0026#39;sys.version_info\u0026#39;\u0026gt; print(sys.version_info[0]) # 3 print(sys.version_info[1]) # 9 print(sys.version_info[2]) # 6 print(sys.version_info.major) # 3 print(sys.version_info.minor) # 9 print(sys.version_info.micro) # 6 platform #  import platform print(platform.python_version()) # 3.9.6 print(type(platform.python_version())) # \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; print(platform.python_version_tuple()) # (\u0026#39;3\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;6\u0026#39;) print(type(platform.python_version_tuple())) # \u0026lt;class \u0026#39;tuple\u0026#39;\u0026gt; Package #  $ pip list    option option description     -o --outdated List outdated packages.   -u --uptodate List update packages.   -e --editable List editable projects.    --format \u0026lt;list_format\u0026gt; Select the output format among: columns (default), freeze, or json.    --not-required List packages that are not dependencies of installed packages.    $ pip freeze pip list --format freeze equals pip freeze --all\n$ pip show \u0026lt;installed package\u0026gt; e.g.)\n$ pip show numpy Argument #  sys.argv #  sample.py\nimport sys args = sys.argv print(args) print(args[1]) print(args[2]) Run\n$ python simple.py aaa 123 [\u0026#39;sample.py\u0026#39;, \u0026#39;aaa\u0026#39;, \u0026#39;123\u0026#39;] aaa argparse #  Simple sample #  sample.py\nimport argparse description = \u0026#39;A description of this program.\u0026#39; parser = argparse.ArgumentParser(description=description) parser.add_argument(\u0026#39;foo\u0026#39;, type=str, help=\u0026#39;First argument.\u0026#39;) parser.add_argument(\u0026#39;bar\u0026#39;, type=int, help=\u0026#39;Second argument.\u0026#39;) args = parser.parse_args() print(args) print(args.foo) print(args.bar) Run\n$ python sample.py aaa 123 Namespace(foo=\u0026#39;aaa\u0026#39;, bar=123) aaa 123 Check help using -h or ---help\n$ python sample.py --help usage: sample.py [-h] foo bar A description of this program. positional arguments: foo First argument. bar Second argument. optional arguments: -h, --help show this help message and exit Advanced sample #  sample.py\nimport argparse description = \u0026#39;A description of this program.\u0026#39; parser = argparse.ArgumentParser(description=description) help = \u0026#39;A required named argument.\u0026#39; parser.add_argument(\u0026#39;--named_arg1\u0026#39;, type=str, required=True, help=help) help = \u0026#39;An optional named argument.\u0026#39; parser.add_argument(\u0026#39;--named_arg2\u0026#39;, type=int, help=help) help = \u0026#39;True is specified automatically if you set this.\u0026#39; parser.add_argument(\u0026#39;--flag1\u0026#39;, action=\u0026#39;store_true\u0026#39;, help=help) help = \u0026#39;False is specified automatically if you set this.\u0026#39; parser.add_argument(\u0026#39;--flag2\u0026#39;, action=\u0026#39;store_false\u0026#39;, help=help) args = parser.parse_args() print(args) print(args.named_arg1) print(args.named_arg2) print(args.flag1) print(args.flag2) Run\n$ python sample.py --named_arg1 aaa --named_arg2 123 --flag1 --flag2 Namespace(named_arg1=\u0026#39;aaa\u0026#39;, named_arg2=123, flag1=True, flag2=False) aaa 123 True False File/Directory #  Move to current directory #  import os os.getcwd() Get an absolute path #  import os absolute_path = os.path.abspath(path) Check if it is an absolute path #  import os os.path.isabs(path) Get a relative path #  import os relative_path = os.path.relpath(path) Get a file\u0026rsquo;s directory #  import os dir_name = os.path.dirname(file_path) Get a file name #  import os file_name = os.path.basename(file_path) Get a file\u0026rsquo;s stem #  import os file_stem = os.path.splitext(file_name)[0] # sample.png -\u0026gt; sample Check if a file or a directory exists #  import os path = \u0026#34;/foo/bar/sample.png\u0026#34; os.path.exists(path) import os path = \u0026#34;/foo/bar/sample.png\u0026#34; os.path.isfile(path) import os path = \u0026#34;/foo/bar/\u0026#34; os.path.isdir(path) References #   https://docs.python.org/ja/3.9/library/argparse.html https://qiita.com/kzkadc/items/e4fc7bc9c003de1eb6d0 https://www.delftstack.com/ja/howto/python/python-get-filename-without-extension-from-path/ https://note.nkmk.me/python-os-basename-dirname-split-splitext/ https://note.nkmk.me/python-sys-platform-version-info/ https://pip.pypa.io/en/stable/cli/pip_list/  "},{"id":3,"href":"/tech-blog/python/ocr/","title":"Python OCR","section":"Python","content":"Python OCR #  Overview #  How to get text from an image using Tesseract which is an OCR (Optical Character Recognition) engine and Python.\nPrecondition #  Version #   macOS: Big Sur 11.4 Docker: 20.10.5, build 55c4c88 docker-compose: 1.29.0, build 07737305  Simple sample #  Version #   Debian GNU/Linux: 10 (buster) Python: 3.9.6 pyocr: 0.8 opencv-python: 4.5.3.56  Directory structure #  python-ocr/ ├── README.md ├── img │ ├── .gitkeep │ └── sample.jpg ├── setup │ ├── Dockerfile │ └── docker-compose.yml └── simple.py Source #   https://github.com/exaream/python-ocr  Dockerfile\nFROMpython:latestRUN apt-get updateRUN apt-get -y install \\  tesseract-ocr* \\  libgl1-mesa-dev \\  vimRUN apt-get cleanRUN pip install --upgrade pipRUN pip install \\  pillow \\  pyocr \\  # cv2 opencv-python \\  opencv-contrib-pythonWORKDIR/opt/ENTRYPOINT [\u0026#34;/usr/bin/tail\u0026#34;, \u0026#34;-f\u0026#34;, \u0026#34;/dev/null\u0026#34;]docker-compose.yml\nversion: \u0026#39;3\u0026#39; services: python-ocr: build: context: ../ dockerfile: setup/Dockerfile container_name: python-ocr volumes: - ../:/opt simple.py\nimport os import pyocr import sys from PIL import Image if len(sys.argv) != 2: print(\u0026#34;Please input an image file name in the first argument.\u0026#34;) exit() img_dir = os.path.dirname(__file__) + \u0026#39;/img/\u0026#39; img_file_name = os.path.basename(sys.argv[1]) img_path = img_dir + img_file_name img_obj = Image.open(img_path) builder = pyocr.builders.TextBuilder(tesseract_layout = 6) ocr_engine = pyocr.get_available_tools()[0] langs = ocr_engine.get_available_languages() text = ocr_engine.image_to_string(img_obj, lang=\u0026#39;jpn\u0026#39;, builder=builder) print(langs) print(text) Preparation #  pytyon-ocr directory on your host machine\ndocker-compose -f setup/docker-compose.yml up -d --build docker exec -it python-ocr bash Run #  docker container\ncd /opt/ python simple.py sample.jpg Advanced sample #   grayscale threshold processing. named argument  Version #   Same as \u0026ldquo;simple sample\u0026rdquo; above.  Directory structure #  python-ocr/ ├── README.md ├── img │ ├── .gitkeep │ └── sample.jpg ├── library │ ├── base.py │ ├── cv.py │ └── ocr.py ├── main.py ├── setup │ ├── Dockerfile │ └── docker-compose.yml └── simple.py Source #   https://github.com/exaream/python-ocr  base.py\nimport os from typing import NoReturn class Base: arg_parser = None img_dir = \u0026#39;\u0026#39; def __init__(self) -\u0026gt; NoReturn: self.set_img_dir() def get_file_name(self, file_path: str) -\u0026gt; str: return os.path.basename(file_path) # Get file name without extension. def get_file_stem(self, file_path: str) -\u0026gt; str: file_name = self.get_file_name(file_path) return os.path.splitext(file_name)[0] def is_file(self, file_path: str) -\u0026gt; bool: return os.path.isfile(file_path) def set_img_dir(self, img_dir: str = \u0026#39;\u0026#39;) -\u0026gt; NoReturn: if img_dir != \u0026#39;\u0026#39;: self.img_dir = img_dir else: dir = os.path.dirname(os.path.abspath(__file__)) + \u0026#39;/../img/\u0026#39; self.img_dir = os.path.abspath(dir) def get_img_dir(self) -\u0026gt; str: return self.img_dir cv.py\nimport cv2 # OpenCV (Open Source Computer Vision Library) from typing import NoReturn class ComputerVision: def get_obj(self, img_path: str) -\u0026gt; cv2: return cv2.imread(img_path) def get_grayscale_obj(self, obj: cv2) -\u0026gt; cv2: return cv2.cvtColor(obj, cv2.COLOR_BGR2GRAY) # Thresholding # Convert colors other than black (if a RBG value is greater than a threshold) to white RGB(255,255,255). def get_threshold_obj(self, obj: cv2, threshold: int = 170) -\u0026gt; cv2: return cv2.threshold(obj, threshold, 255, cv2.THRESH_BINARY)[1] def write_obj_to_img(self, obj: cv2, img_path: str) -\u0026gt; NoReturn: cv2.imwrite(img_path, obj) ocr.py\nimport pyocr from PIL import Image from pyocr.builders import TextBuilder from typing import NoReturn class OpticalCharacterRecognition: ocr_engine = None def __init__(self) -\u0026gt; NoReturn: self.__set_ocr_engine() def get_img_obj(self, img_path: str) -\u0026gt; Image: return Image.open(img_path) def get_available_languages(self) -\u0026gt; list: return self.ocr_engine.get_available_languages() def get_text_by_img_obj(self, img_obj: Image, builder: TextBuilder, lang: str = \u0026#39;eng\u0026#39;) -\u0026gt; str: return self.ocr_engine.image_to_string(img_obj, lang=lang, builder=builder) def get_builder(self, tesseract_layout: int = 3) -\u0026gt; TextBuilder: return TextBuilder(tesseract_layout=tesseract_layout) def __set_ocr_engine(self) -\u0026gt; NoReturn: self.ocr_engine = pyocr.get_available_tools()[0] main.py\nimport argparse from library import base, cv, ocr # Initialize classes. sample_base = base.Base() sample_cv = cv.ComputerVision() sample_ocr = ocr.OpticalCharacterRecognition() langs = sample_ocr.get_available_languages() # Get arguments. arg_parser = argparse.ArgumentParser() arg_parser.add_argument(\u0026#39;--img\u0026#39;, type=str, required=True) args = arg_parser.parse_args() # Set image paths. img_file_name = sample_base.get_file_name(args.img) img_file_stem = sample_base.get_file_stem(args.img) img_dir = sample_base.get_img_dir() + \u0026#39;/\u0026#39; img_org_path = img_dir + img_file_name img_gray_path = img_dir + img_file_stem + \u0026#39;-gray.png\u0026#39; img_threshold_path = img_dir + img_file_stem + \u0026#39;-threshold.png\u0026#39; if sample_base.is_file(img_org_path) == False: print(\u0026#34;The file doesn\u0026#39;t exist: \u0026#34; + img_org_path) exit() # Get CV (Computer Vision Library) object. cv_obj = sample_cv.get_obj(img_org_path) # Apply grayscale to the image. cv_obj = sample_cv.get_grayscale_obj(cv_obj) sample_cv.write_obj_to_img(cv_obj, img_gray_path) # Apply Threshold processing to the image. cv_obj = sample_cv.get_threshold_obj(cv_obj) sample_cv.write_obj_to_img(cv_obj, img_threshold_path) # Get text by the processed image. img_obj = sample_ocr.get_img_obj(img_threshold_path) builder = sample_ocr.get_builder() text = sample_ocr.get_text_by_img_obj(img_obj, builder=builder, lang=\u0026#39;jpn\u0026#39;) print(langs) print(text) Run #  Run below if the docker container is stopped.\npytyon-ocr directory on your host machine\ndocker-compose -f setup/docker-compose.yml up -d docker exec -it python-ocr bash docker container\ncd /opt/ python main.py --img sample.jp References #   dockerhub python pyocr Tesseract tesseract-ocr  "},{"id":4,"href":"/tech-blog/docker/","title":"Docker Memo","section":"Tech Blog","content":"Docker Memo #  Stop #  Stop all containers #  docker container ps -q | xargs docker container stop or\ndocker stop $(docker ps -q) Remove #  Stop and remove all (containers, images, volumes, networks) 滅びの呪文 #  docker-compose down --rmi all --volumes --remove-orphans Remove stopped containers, untagged images, unused volumes, unused networks #  docker system prune    option description     -a 未使用のイメージを含め削除   -f 確認せず削除    docker system prune -af Remove stopped containers #  docker container prune Remove all containers #  docker container ps -aq | xargs docker container rm -f or\ndocker ps -aq | xargs docker rm -f or\ndocker rm -f $(docker ps -aq) Remove all images (after all containers were removed) #  docker images -aq | xargs docker image rm -f or\ndocker images -aq | xargs docker rmi -f or\ndocker rmi -f $(docker images -aq) Remove untagged images #  docker images -fq \u0026#34;dangling=true\u0026#34; | xargs docker image rm Remove unused volumes #  docker volume prune Remove unused networks #  docker network prune Log #  How to check log #  最新の30件を確認\ndocker logs -f --tail=30 Other #  How to mount a directory in host server #  docker run -v [absolute path in host]:[absolute path in container] [image name]:[tag] [command] References #   https://qiita.com/gold-kou/items/44860fbda1a34a001fc1  "},{"id":5,"href":"/tech-blog/tool/excel/","title":"Excel","section":"Tool","content":"Excel #  検索 #  VLOOKUP(検索値,範囲,列位置,FALSE) #  e.g.) A1 の値が sample シートの範囲(A1:A10) にある場合 B 列の値を出力\n=VLOOKUP(A1,sample!$A$1:$B$10,2,FALSE) 特定の値があるか判定 #  =IF(COUNTIF(A1:B10,\u0026#34;aaa\u0026#34;)\u0026gt;0,\u0026#34;Yes\u0026#34;,\u0026#34;No\u0026#34;) 日付・時刻 #  曜日 #  e.g.) A1 の日時を日本語の曜日の短縮形で表示。\n=TEXT(A1,\u0026#34;aaa\u0026#34;)    第2引数 description     aaaa 日本語の曜日   aaa 日本語の曜日の短縮形   dddd 英語の曜日   ddd 英語の曜日の曜日の短縮形    時間の差分 #  時間(差分が24時間未満の場合のみ) #  =TEXT(B1-A1,\u0026#34;hh:mm:ss\u0026#34;) 日数 #  =DATEDIF(A1,B1,\u0026#34;d\u0026#34;) 週数 #  =DATEDIF(A1,B1,\u0026#34;d\u0026#34;)/7 月数 #  =DATEDIF(A1,B1,\u0026#34;m\u0026#34;) 年数 #  =DATEDIF(A1,B1,\u0026#34;y\u0026#34;) ハイパーリンク #  シートへのリンク #  B1 に記載されたシート内の A1 へ移動\n=HYPERLINK(\u0026#34;#\u0026#34;\u0026amp;B1\u0026amp;\u0026#34;!A1\u0026#34;,B1) Webへのリンク #  =HYPERLINK(\u0026#34;https://sample.com/\u0026#34;,\u0026#34;Sample\u0026#34;) シート #  シート名 #  =RIGHT(CELL(\u0026#34;filename\u0026#34;,A1),LEN(CELL(\u0026#34;filename\u0026#34;,A1))-FIND(\u0026#34;]\u0026#34;,CELL(\u0026#34;filename\u0026#34;,A1))) シート名の一覧 #  1) VBA を使用\n Alt+ F11 で VBE 画面を表示 Alt を押下したまま I → M の順に押下し標準モジュールを挿入 白画面に以下を貼り付け  Sub test() Dim i As Long For i = 1 To Sheets.Count Range(\u0026#34;A\u0026#34; \u0026amp; i).Value = Worksheets(i).Name Next i End Sub Alt+ F11 で通常画面を表示 シート名の一覧を作成したいシートでAlt+ FBから マクロ を表示させ test を実行  2) 4.0マクロ関数を使用\n上部メニューの 挿入 \u0026gt; 名前 \u0026gt; 定義 から名前欄に任意の名前（仮に「シート一覧」）を記載 参照範囲欄に以下を記載し OK押下  =MID(GET.WORKBOOK(1),FIND(\u0026#34;]\u0026#34;,GET.WORKBOOK(1))+1,31)\u0026amp;T(NOW()) シート名を出力したいセルに以下を記載し下へコピー  =IF(COLUMNS(シート一覧)\u0026lt;ROW(A1),\u0026#34;\u0026#34;,INDEX(シート一覧,ROW(A1))) 隣接したセルの値に加算 #  そのセルの1つ上のセルの数字に 1 を加算 #  =MAX(INDIRECT(ADDRESS(1,COLUMN())\u0026amp;\u0026#34;:\u0026#34;\u0026amp;ADDRESS(ROW()-1,COLUMN())))+1 そのセルの左隣のセルの数字に 1 を加算 #  $A$1 の箇所に「基準になる左端のセル」を指定\n=MAX(INDIRECT(ADDRESS(ROW(),$A$1)\u0026amp;\u0026#34;:\u0026#34;\u0026amp;ADDRESS(ROW(),COLUMN()-1)))+1 その他 #  数値を漢数字に変換 #  =NUMBERSTRING(A2,1) 桁数に満たない場合 任意の文字で埋める #  e.g.) 10桁ゼロ詰め\nA1 の値が 1234 の場合, 1234aaaaaa と出力\n=A1\u0026amp;LEFT(REPT(\u0026#34;a\u0026#34;,\u0026#34;10\u0026#34;), 10-LEN(A1)) "},{"id":6,"href":"/tech-blog/git/","title":"Git Memo","section":"Tech Blog","content":"Git Memo #  実用的なコマンド #  指定したフォーマットでコミット・ログを表示 #  $ git log --graph --date=iso --pretty=format:\u0026#34;[%ad] %h %an : %s\u0026#34; 特定の注釈を含むコミットを検索 #  $ git log --oneline --grep \u0026#34;\u0026lt;pattern\u0026gt;\u0026#34; コミット間の変更ファイル一覧を表示 #  $ git diff --stat \u0026lt;Commit A\u0026gt; \u0026lt;Commit B\u0026gt; ファイル名のみ表示する場合\n$ git diff --stat --name-only \u0026lt;Commit A\u0026gt; \u0026lt;Commit B\u0026gt; タグの一覧を表示 #  $ git tag -n Git 設定 #  バージョンを確認 #  $ git --version 設定の一覧を表示 #  設定適用範囲\n system: システム全体に適用 global: ユーザー単位で適用（ユーザーのホームディレクトリ直下の設定ファイルを参照） local: Gitリポジトリ単位で適用（.git ディレクトリ直下の設定ファイルを参照）  $ git config --system --list $ git config --global --list $ git config --local --list 適用範囲を指定しない場合 --local と同様に Gitリポジトリ内の設定を表示\n$ git config --list Gitリポジトリの管理するディレクトリ外で以下を実行した場合 エラーが発生\n$ git config --local --list fatal: --local can only be used inside a git repository --list オプションの短縮版\n$ git config --system -l $ git config --global -l $ git config --local -l 設定ファイルを直接編集 #  $ git config --system --edit $ git config --global --edit $ git config --local --edit --edit オプションの短縮版\n$ git config --system -e $ git config --global -e $ git config --local -e どの設定ファイルに記載された設定が適用されているか確認 #  $ git config --show-origin user.name $ git config --show-origin user.email $ git config --show-origin core.autocrlf ユーザー名/メールアドレスを設定 #   \u0026ndash;global オプションを付けないと、該当のリポジトリのみ有効な設定になる  $ git config --global user.name \u0026lt;username\u0026gt; $ git config --global user.email \u0026lt;mailaddress\u0026gt; 出力をカラーリングするよう設定 #  $ git config --global color.ui auto コマンドにエイリアスを設定 #  $ git config --global alias.\u0026lt;aliasname\u0026gt; \u0026lt;commandname\u0026gt; 不要なファイルを管理対象外 #   .gitignore に記載されたファイル名は、Gitの管理対象外 .gitignore ファイル自体をコミットしておくこと  $ echo \u0026lt;file name\u0026gt; \u0026gt;\u0026gt; .gitignore 空ディレクトリを管理対象 #   Gitでは空ディレクトリは管理対象外 空ディレクトリを管理対象にする場合、任意のファイルを配置 慣例的に .gitkeep というファイルを使用  $ cd \u0026lt;directory name\u0026gt; $ touch .gitkeep プロキシサーバを経由してhttp接続 #  $ git config --global http.proxy \u0026lt;プロキシサーバのアドレス\u0026gt;:\u0026lt;プロキシサーバのポート番号\u0026gt;  .gitconfig ファイルの http の項目に次の設定を直接追加することもできる  [http]proxy = \u0026lt;プロキシサーバのアドレス\u0026gt;:\u0026lt;プロキシサーバのポート番号\u0026gt;ユーザ認証の必要なプロキシサーバを経由してhttp接続 #  $ git config --global http.proxy http://\u0026lt;ユーザ名\u0026gt;:\u0026lt;パスワード\u0026gt;@\u0026lt;プロキシサーバのアドレス\u0026gt;:\u0026lt;プロキシサーバのポート番号\u0026gt;  .gitconfig ファイルの http の項目に次の設定を直接追加することもできる  [http]proxy = http://\u0026lt;ユーザ名\u0026gt;:\u0026lt;パスワード\u0026gt;@\u0026lt;プロキシサーバのアドレス\u0026gt;:\u0026lt;プロキシサーバのポート番号\u0026gt;基本操作 #  リポジトリを作成 #  $ git init ファイルやディレクトリをインデックスに登録 #  $ git add . $ git add *.txt インデックスに追加されたファイルをコミット #  $ git commit 変更されたファイルの一覧を表示 #  $ git status 変更されたファイルの差分を表示 #  $ git diff コミットログを表示 #  $ git log コミットログを表示 #  git log コマンドで参照したコミットやHEADを指定\n$ git show \u0026lt;commit\u0026gt; ファイルやディレクトリ名の変更や移動 #  $ git mv \u0026lt;old file name\u0026gt; \u0026lt;new file name\u0026gt; 管理対象ではないファイルを削除 #   -n ： 削除されるファイルを確認 -f ： 実際にファイルを削除 -x ： .gitignore に指定されたファイルも削除  $ git clean 手元で変更したインデックスに登録されていないファイルを元に戻す #  $ git checkout -- \u0026lt;file\u0026gt; インデックスに登録したファイルの取り消し #  $ git reset HEAD -- \u0026lt;file\u0026gt; 以前にコミットしたことのあるファイルだけをすべてインデックスに登録 #  $ git add -u コミットログ操作 #  コミットログを表示 #  $ git log 各コミットログを1行で表示\n$ git log --oneline git log の主なオプション #     オプション 内容     -n 件数を指定して表示   \u0026ndash;relative-date 相対フォーマット (“3 days ago” など) で日付を表示   \u0026ndash;oneline 1行で表示   \u0026ndash;pretty フォーマットを指定して表示. オプションは oneline, short, full, fuller, fomat(独自指定)   \u0026ndash;graph ブランチやマージの履歴をアスキーグラフで表示    git log --pretty のフォーマット #     置換文字列 内容     %H コミットのハッシュ   %h コミットのハッシュ (短縮版)   %T ツリーのハッシュ   %t ツリーのハッシュ (短縮版)   %P 親のハッシュ   %p 親のハッシュ (短縮版)   %an Author の名前   %ae Author のメールアドレス   %ad Author の日付 (-date= オプションに従った形式)   %ar Author の相対日付   %cn Committer の名前   %ce Committer のメールアドレス   %cd Committer の日付   %cr Committer の相対日付   %s 件名    git log の日付フォーマット #     フォーマット 内容     relative 相対時間 (3 days ago)   local ローカルタイムゾーン   iso ISO 8601 フォーマット   rfc RFC 2822 フォーマット   short YYYY-MM-DD   raw %s %z   default 標準    直前のコミットの内容を修正 #  現在のブランチの先頭のコミットに上書き 入力画面が表示されるのでコミットログを確認して保存\n$ git commit --amend 入力画面が表示されず即上書き保存\ngit commit --amend --no-edit 直前のコミットのコメントだけを修正 #  インデックスにファイルを登録していない状態で再コミット\n入力画面が表示されるのでコメントを修正して保存\n$ git commit --amend 過去のコミットの内容を修正 #   指定したコミットより後のコミットを指定すると、コミットの一覧が表示される その中から修正したいコミットを見つけてその行の pick の文字を edit に変更して保存・終了する  $ git rebase -i \u0026lt;commit\u0026gt; 修正したいファイルを編集、保存した後に --amend オプションを指定してコミット  $ git commit --amend --continue オプションを指定し rebase を実行  $ git rebase --continue 過去のコミットのコメントを修正 #   指定したコミットより後のコミットを指定すると、コミットの一覧が表示される その中から修正したいコミットを見つけてその行の pick の文字を edit に変更して保存・終了する  $ git rebase -i \u0026lt;commit\u0026gt; 修正したいファイルを編集、保存した後に --amend オプションを指定してコミット コメントの入力画面が表示されるので、コメントを修正  $ git commit --amend --continue オプションを指定し rebase を実行  $ git rebase --continue rebase を途中で中止 #  $ git rebase --abort HEADの移動履歴を表示 #  過去に HEAD が指していたコミットの一覧を表示(削除したコミットや rebase 等によってまとめられたコミットなども表示)\n$ git reflog ブランチの先頭の移動履歴 #  過去にそのブランチの先頭が指していたコミットの一覧\n$ git reflog \u0026lt;branch name\u0026gt; 直前のコミットを取り消し #  $ git reset --hard HEAD~ rebase を取り消し #   HEADの移動履歴から rebase 直前のコミットを確認  $ git reflog 見つけたハッシュ値を \u0026lt;commit\u0026gt; で指定して reset を実行  $ git reset --hard \u0026lt;commit\u0026gt; 直前の reset を取り消し #  reset 前のコミットは ORIG_HEAD という名前で参照できるので、これを指定して reset を実行\n$ git reset --hard ORIG_HEAD ブランチを間違えてしまったコミットを移動 #  \u0026lt;commit\u0026gt; で指定したコミットを現在のブランチにコピー\n$ git cherry-pick \u0026#34;\u0026lt;commit\u0026gt;\u0026#34; 特定のコメントを含むコミットを検索 #  \u0026lt;pattern\u0026gt; で指定した文字がコミットログに含まれるコミット\n$ git log --grep \u0026#34;\u0026lt;pattern\u0026gt;\u0026#34; ブランチ操作 #  ローカル・ブランチの一覧を表示 #  $ git branch 特定の文字列を含むブランチをローカル・ブランチから検索 #  $ git branch --list \u0026#39;sample-*\u0026#39; or\n$ git branch -l \u0026#39;sample-*\u0026#39; ローカル・ブランチとリモート・ブランチの一覧を表示 #  $ git branch --all or\n$ git branch -a 特定の文字列を含むブランチをローカル・ブランチとリモート・ブランチから検索 #  $ git branch --all --list \u0026#39;sample-*\u0026#39; or\n$ git branch -a -l \u0026#39;sample-*\u0026#39; ブランチを作成 #  $ git branch \u0026lt;branch name\u0026gt; ブランチ名を変更 #  $ git branch -m \u0026lt;old branch\u0026gt; \u0026lt;new branch\u0026gt; ブランチを削除 #  $ git branch -d \u0026lt;branch name\u0026gt; ブランチを強制的に削除 #  HEAD にマージされていないコミットがあるブランチを強制的に削除\n$ git branch -D \u0026lt;branch name\u0026gt; ブランチを切り替え #  $ git checkout \u0026lt;branch\u0026gt; ブランチの作成と切り替えを一度に実行\n$ git checkout -b \u0026lt;branch\u0026gt; ブランチをマージ #  $ git merge \u0026lt;branch\u0026gt; fast-forwardなマージであってもマージコミットを作成\nブランチが存在したという情報を残したいときに有用\n$ git merge --no-ff \u0026lt;branch\u0026gt; リモート操作 #  既存のリモートリポジトリを複製 #  $ git clone \u0026lt;url\u0026gt; リモートリポジトリを追加 #  $ git remote add \u0026lt;name\u0026gt; \u0026lt;url\u0026gt; リモートリポジトリの一覧を表示 #  $ git remote リモートリポジトリのブランチからローカルリポジトリのブランチを作成 #  $ git checkout \u0026lt;branch\u0026gt; リモートリポジトリにブランチを作成 / ブランチに変更内容を反映 #   repository や refspec は省略可 repository には remote add コマンドで追加したリポジトリ名以外にURLを直接指定可 repository を省略した場合, 追跡しているリモートリポジトリを指定 refspec はブランチ名などを指定可 refspec を省略した場合, デフォルトではすべてのブランチが対象  $ git push \u0026lt;repository\u0026gt; \u0026lt;refspec\u0026gt; リモートリポジトリのブランチの変更内容を確認 #   リモートリポジトリでの変更内容を確認したいがローカルリポジトリには反映させたくない場合に fetchを実行 repository や refspec は省略可 repository には remote add コマンドで追加したリポジトリ名以外にURLを直接指定可 repository を省略した場合, 追跡しているリモートリポジトリを指定 refspec はブランチ名などを指定可 refspec を省略した場合, デフォルトではすべてのブランチが対象  $ git fetch \u0026lt;repository\u0026gt; \u0026lt;refspec\u0026gt; リモートリポジトリから削除されたブランチをローカルリポジトリでも削除 #  $ git fetch --prune or\n$ git remote prune \u0026lt;repository\u0026gt; リモートリポジトリのブランチの変更内容をローカルリポジトリのブランチに反映 #   pull = fetch + merge repository や refspec は省略可 repository には remote add コマンドで追加したリポジトリ名以外にURLを直接指定可 repository を省略した場合, 追跡しているリモートリポジトリを指定 refspec はブランチ名などを指定可 refspec を省略した場合, デフォルトではすべてのブランチが対象  $ git pull \u0026lt;repository\u0026gt; \u0026lt;refspec\u0026gt; リモートリポジトリのブランチを削除 #  $ git push --delete \u0026lt;repository\u0026gt; \u0026lt;branch name\u0026gt; リモートリポジトリにタグを作成 #  $ git push \u0026lt;repository\u0026gt; \u0026lt;tag name\u0026gt; リモートリポジトリのタグを削除 #  $ git push --delete \u0026lt;repository\u0026gt; \u0026lt;tag name\u0026gt; 登録済みのリモートリポジトリのアドレスを変更 #  指定した名前で登録されているリモートリポジトリのアドレスを のアドレスに変更\n$ git remote set-url \u0026lt;name\u0026gt; \u0026lt;newurl\u0026gt; 登録済みのリモートリポジトリの名前を変更 #  $ git remote rename \u0026lt;old\u0026gt; \u0026lt;new\u0026gt; サブモジュール(submodule)操作 #  サブモジュールの設定 #  .gitmodules というファイルを作成して以下の内容を記述\n[submodule \u0026#34;\u0026lt;submodule name\u0026gt;\u0026#34;] path = \u0026lt;directory name\u0026gt; url = \u0026lt;url\u0026gt; e.g.)\n[submodule \u0026#34;themes/hugo-book\u0026#34;] path = themes/hugo-book url = https://github.com/alex-shpak/hugo-book サブモジュールを含めて既存のリモートリポジトリを複製 #  $ git clone --recursive \u0026lt;url\u0026gt; サブモジュールを後から複製 #  git submodule update --init --recursive タグ操作 #  ローカルのタグの一覧を表示 #  タグ名のみ\n$ git tag タグ名と注釈\n -n 表示する注釈の行数  $ git tag -n1 リモートのタグの一覧を表示 #  リモート・リポジトリ origin のタグの一覧を取得\n$ git ls-remote --tags origin リモートのタグを取得 fetch #  $ git fetch --all --tags タグ付け (タグを作成) #  現在のコミットにタグ付け #  注釈なし\n$ git tag \u0026lt;tag name\u0026gt; 注釈付き\n$ git tag -m \u0026#34;\u0026lt;tag message\u0026gt;\u0026#34; \u0026lt;tag name\u0026gt; $ git tag --message \u0026#34;\u0026lt;tag message\u0026gt;\u0026#34; \u0026lt;tag name\u0026gt; 注釈付き (viが起動)\n$ git tag -a \u0026lt;tag name\u0026gt; $ git tag --annotate \u0026lt;tag name\u0026gt; 後からコミットにタグ付け #  指定したコミット, 注釈付き\n$ git tag -m \u0026#34;\u0026lt;tag message\u0026gt;\u0026#34; \u0026lt;tag name\u0026gt; \u0026lt;commit\u0026gt; $ git tag --message \u0026#34;\u0026lt;tag message\u0026gt;\u0026#34; \u0026lt;tag name\u0026gt; \u0026lt;commit\u0026gt; 指定したコミット, 注釈付き (viが起動)\n$ git tag -a \u0026lt;tag name\u0026gt; -m \u0026lt;tag message\u0026gt; \u0026lt;commit\u0026gt; $ git tag --annotate \u0026lt;tag name\u0026gt; --message \u0026lt;tag message\u0026gt; \u0026lt;commit\u0026gt; タグを削除 #  まだプッシュしていないタグは削除可\n$ git tag -d \u0026lt;tag name\u0026gt; $ git tag --delete \u0026lt;tag name\u0026gt; タグを共有 #  リモート・リポジトリ origin にプッシュ\n$ git push origin \u0026lt;tag name\u0026gt; すべてのタグをリモート・リポジトリ origin にプッシュ\n$ git push origin --tags タグをチェックアウト #  $ git checkout \u0026lt;tag name\u0026gt; タグをチェックアウトすると同時にブランチを作成\n$ git checkout \u0026lt;tag name\u0026gt; -b \u0026lt;branch name\u0026gt; その他 #  特定のディレクトリやファイルのみチェックアウト #  mkdir work \u0026amp;\u0026amp; cd $_ git init . git sparse-checkout init --cone git sparse-checkout set \u0026lt;target path of directory or file\u0026gt; git sparse-checkout list git remote add origin \u0026lt;remote url\u0026gt; git pull origin \u0026lt;branch name\u0026gt; ls -al \u0026lt;target path of directory or file\u0026gt; HEAD~ と HEAD^ の違い #   ^ (キャレット): n番目の親 ~ (チルダ): 最初の親のみに続くn世代前の祖先  https://git-scm.com/docs/git-rev-parse#_specifying_revisions\nG H I J \\ / \\ / D E F \\ | / \\ \\ | / | \\|/ | B C \\ / \\ / A A = = A^0 B = A^ = A^1 = A~1 C = = A^2 D = A^^ = A^1^1 = A~2 E = B^2 = A^^2 F = B^3 = A^^3 G = A^^^ = A^1^1^1 = A~3 H = D^2 = B^^2 = A^^^2 = A~2^2 I = F^ = B^3^ = A^^3^ J = F^2 = B^3^2 = A^^3^2 References #   https://qiita.com/gold-kou/items/7f6a3b46e2781b0dd4a0 https://qiita.com/jesus_isao/items/63557eba36819faa4ad9 https://backlog.com/ja/git-tutorial/reference/ https://qiita.com/harukasan/items/9149542584385e8dea75 https://qiita.com/kawasaki_dev/items/41afaafe477b877b5b73  "},{"id":7,"href":"/tech-blog/glossary/","title":"Glossary","section":"Tech Blog","content":"用語集 #  静的解析 #   コードを実行せずにおこなう検証。  凝集度 #   クラスやメソッドがそのクラスの責任に集中しているかを示す尺度。 凝集度が低いケース：メソッドが、クラスの責任範囲と関連性の低い様々な処理をおこなったり、関連性の低いデータを扱っている場合、修正が複数のクラスにまたがって影響する可能性が高まり、保守性が低下。  結合度 #   クラスやメソッドを利用・保守しやすいよう、その内容が整理・分割できているかを示す尺度。 結合度が高いケース：利用する側のクラスやメソッドが、利用される側のクラスやメソッドの内容を把握（依存）している割合が高いほど、保守性やテスト容易性が低下。  参考 #   凝集度・結合度・循環的複雑度 https://qiita.com/oda-kazuki/items/a16b43dc624429de7db3 凝集度 https://ja.wikipedia.org/wiki/%E5%87%9D%E9%9B%86%E5%BA%A6 結合度 https://ja.wikipedia.org/wiki/%E7%B5%90%E5%90%88%E5%BA%A6  "},{"id":8,"href":"/tech-blog/tool/hugo/","title":"Hugo","section":"Tool","content":"Hugo #  What\u0026rsquo;s Hugo? #   Hugo is a fast and flexible static site generator made of Golang.\nhttps://gohugo.io/about/  Preparation #  Create a git repository using Github #   Repositories \u0026gt; New Repository name: sample Click \u0026ldquo;Create repository\u0026rdquo;  Install Hugo on macOS #  $ brew install hugo Build a blog using Hugo #  $ GITHUB_USERNAME=xxxx $ GIT_REPOSITORY=sample $ hugo new site ${GIT_REPOSITORY} $ cd ${GIT_REPOSITORY} $ echo \u0026#34;# ${GIT_REPOSITORY}\u0026#34; \u0026gt;\u0026gt; README.md Initialize git #  $ git init If you want to change the configrations of git\n$ git config --local --list $ git config --local user.name xxxx $ git config --local user.email xxxx $ git add . $ git commit -m \u0026#34;Build a site using hugo\u0026#34; $ git branch -M main $ git remote add origin https://github.com/${GITHUB_USERNAME}/${GIT_REPOSITORY}.git $ git push -u origin main Add .gitignore #  $ vi .gitignore Add a line break on the last line.\n.gitignore\npublic/ resources/_gen/ .DS_Store *.swp $ git add . $ git commit -m \u0026#34;Add .gitignore\u0026#34; Add Hugo\u0026rsquo;s theme #  $ git submodule add https://github.com/alex-shpak/hugo-book themes/hugo-book $ git add . $ git commit -m \u0026#34;Add a theme as a submodule\u0026#34; Change config.toml #  config.toml\nbaseURL = \u0026#34;/sample/\u0026#34; # Write your git repository as a directory languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;Sample\u0026#34; publishDir = \u0026#34;docs\u0026#34; theme = \u0026#34;hugo-book\u0026#34; # Add a line break on the last line.  $ git add . $ git commit -m \u0026#34;Change config.toml\u0026#34; Add a page of hello world #  contents/hello-world.md\n--- date: 2021-01-01 lastmod: [\u0026#34;lastmod\u0026#34;] title: \u0026#34;Hello world\u0026#34; tags: [\u0026#34;Foo\u0026#34;,\u0026#34;Bar\u0026#34;] --- # Hello world! $ git add . $ git commit -m \u0026#34;Add a page of hello world\u0026#34; Generate static contents #  $ hugo Execute the following instead above one if you want to minify static contents\n$ hugo --minify $ git add . $ git commit -m \u0026#34;Generate static contents\u0026#34; Check on your local environment #  $ hugo server --minify -p 3000 Access the following URL using a browser.\n$ echo http://localhost:3000/${GIT_REPOSITORY}/hello-world/ Push to Github #  $ git push -u origin main Github Pages #  Access the following URL using a browser.\n$ echo https://github.com/${GITHUB_USERNAME}/${GIT_REPOSITORY}/settings/pages  Source: \u0026gt; Branch: main \u0026gt; /docs Click \u0026ldquo;Save\u0026rdquo;  Access the following URL using a browser after a few minute.\n$ echo https://${GITHUB_USERNAME}.github.io/${GIT_REPOSITORY}/hello-world/ Left Menu #  TODO: Bundle menu mode is deprecated and will be removed.  config.toml\n[params] BookMenuBundle = \u0026#39;/menu\u0026#39; content/menu/index.md\n--- headless: true --- - **Sample** - [Hello world]({{\u0026lt; ref \u0026#34;hello-world\u0026#34; \u0026gt;}})  - Please write your link here as above. Breadcrumb #  layouts/partials/docs/breadcrumb.html\n\u0026lt;ol class=\u0026#34;breadcrumb\u0026#34;\u0026gt; {{ template \u0026#34;breadcrumbnav\u0026#34; (dict \u0026#34;p1\u0026#34; . \u0026#34;p2\u0026#34; .) }} \u0026lt;/ol\u0026gt; {{ define \u0026#34;breadcrumbnav\u0026#34; }} {{ if .p1.Parent }} {{ template \u0026#34;breadcrumbnav\u0026#34; (dict \u0026#34;p1\u0026#34; .p1.Parent \u0026#34;p2\u0026#34; .p2 ) }} {{ else if not .p1.IsHome }} {{ template \u0026#34;breadcrumbnav\u0026#34; (dict \u0026#34;p1\u0026#34; .p1.Site.Home \u0026#34;p2\u0026#34; .p2 ) }} {{ end }} \u0026lt;li{{ if eq .p1 .p2 }} class=\u0026#34;active\u0026#34;{{ end }}\u0026gt; \u0026lt;a href=\u0026#34;{{ .p1.Permalink }}\u0026#34;\u0026gt;{{ .p1.Title }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} layouts/partials/docs/inject/content-before.html\n{{ partial \u0026#34;docs/breadcrumb\u0026#34; . }} assets/_custom.scss\n/* Breadcrumb */ .breadcrumb { padding: 8px 15px; margin-bottom: 20px; list-style: none; background-color: var(--gray-100); border-radius: 4px; ol { display: block; list-style-type: decimal; margin-block-start: 1em; margin-block-end: 1em; margin-inline-start: 0px; margin-inline-end: 0px; padding-inline-start: 40px; } li { display: inline-block; } li+li:before { padding: 0 5px; color: #ccc; content: \u0026#34;/\\00a0\u0026#34;; } a { color: var(--color-link); } } Multilingual Mode #  Change config.toml #  Add the following to config.toml\ndefaultContentLanguage = \u0026#34;en\u0026#34; defaultContentLanguageInSubdir = true [languages] [languages.en] languageName = \u0026#34;English\u0026#34; languageCode = \u0026#34;en\u0026#34; # contentDir = \u0026#34;content/en\u0026#34; weight = 1 #[languages.en.params] # key1 = value1 [languages.ja] languageName = \u0026#34;日本語\u0026#34; languageCode = \u0026#34;ja\u0026#34; # contentDir = \u0026#34;content/ja\u0026#34; weight = 2 #[languages.ja.params] # key1 = value1 Customize a select box of languages #  layouts/partials/docs/languages.html\nOverwrite themes/hugo-book/layouts/partials/docs/languages.html.\n\u0026lt;!-- Merge home and current page translations --\u0026gt; {{ $bookTranslatedOnly := default false .Site.Params.BookTranslatedOnly }} {{ $translations := dict }} {{ if (eq $bookTranslatedOnly false ) }} {{ range .Site.Home.AllTranslations }} {{ $translations = merge $translations (dict .Language.Lang .) }} {{ end }} {{ end }} {{ range .Translations }} {{ $translations = merge $translations (dict .Language.Lang .) }} {{ end }} \u0026lt;div class=\u0026#34;book-languages\u0026#34; tabindex=\u0026#34;0\u0026#34; aria-haspopup=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li class=\u0026#34;flex align-center\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;{{ \u0026#34;svg/translate.svg\u0026#34; | relURL }}\u0026#34; class=\u0026#34;book-icon\u0026#34; alt=\u0026#34;Languages\u0026#34; /\u0026gt; {{ $.Site.Language.LanguageName }} \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul class=\u0026#34;book-languages-list\u0026#34;\u0026gt; {{ range .Site.Languages }}{{ with index $translations .Lang }} {{ if (ne $.Site.Language .Language) }} \u0026lt;li\u0026gt;  \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34; class=\u0026#34;flex align-center\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;{{ \u0026#34;svg/translate.svg\u0026#34; | relURL }}\u0026#34; class=\u0026#34;book-icon\u0026#34; alt=\u0026#34;Languages\u0026#34; /\u0026gt; {{ .Language.LanguageName }} \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }}{{ end }}{{ end }}  \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; layouts/partials/docs/search.html\nOverwrite themes/hugo-book/layouts/partials/docs/search.html\nto put a select box of languages above a search box.\n{{ partial \u0026#34;docs/languages\u0026#34; . }}  {{ if default true .Site.Params.BookSearch }} \u0026lt;div class=\u0026#34;book-search\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;book-search-input\u0026#34; placeholder=\u0026#34;{{ i18n \u0026#34;Search\u0026#34; }}\u0026#34; aria-label=\u0026#34;{{ i18n \u0026#34;Search\u0026#34; }}\u0026#34; maxlength=\u0026#34;64\u0026#34; data-hotkeys=\u0026#34;s/\u0026#34; /\u0026gt; \u0026lt;div class=\u0026#34;book-search-spinner hidden\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;ul id=\u0026#34;book-search-results\u0026#34;\u0026gt;\u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; {{ end }} assets/_custom.scss\n/* Multilingual Mode */ .book-languages { .book-languages-list { bottom: 74%; } .book-languages-list a { padding: .3rem 1rem; } } .book-menu-content { .book-languages { img { height: 1em; width: 1em; margin-inline-end: .5rem; } .book-languages-list { padding: 0; bottom: 68%; } .book-languages-list a { padding: 0 1rem; } } } Tags of a page #  layouts/partials/docs/tags.html\n\u0026lt;h2\u0026gt;Tags\u0026lt;/h2\u0026gt; {{ with .Params.tags }} \u0026lt;ul class=\u0026#34;tags\u0026#34;\u0026gt; {{- range . -}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ \u0026#34;/tags/\u0026#34; | relLangURL }}{{ . | urlize }}\u0026#34;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; {{- end -}} \u0026lt;/ul\u0026gt; {{ end }} layouts/partials/docs/inject/toc-before.html\nOverwrite themes/hugo-book/layouts/partials/docs/inject/toc-before.html\n{{ partial \u0026#34;docs/tags\u0026#34; . }} layouts/partials/docs/toc.html\nOverwrite themes/hugo-book/layouts/partials/docs/toc.html\n{{ partial \u0026#34;docs/inject/toc-before\u0026#34; . }} \u0026lt;h2\u0026gt;Table of Contents\u0026lt;/h2\u0026gt; {{ .TableOfContents }} {{ partial \u0026#34;docs/inject/toc-after\u0026#34; . }} assets/_custom.scss\n/* Table of Contents */ .book-toc-content { ul.tags { padding-inline-start: 0; li { line-height: 2; list-style: none; } } } Syntax Highlighting #  https://gohugo.io/content-management/syntax-highlighting/\ne.g) If you write the following in sample.md file of your article. ```go {linenos=table,hl_lines=[\u0026#34;4-5\u0026#34;,9],linenostart=1} package main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func main() { fmt.Println(\u0026#34;The time is\u0026#34;, time.Now()) } ```\nYou can see the following syntax highlighting on the web page.\n1 2 3 4 5 6 7 8 9 10  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func main() { fmt.Println(\u0026#34;The time is\u0026#34;, time.Now()) }   Mermaid Diagram #  https://mermaid-js.github.io/mermaid/#/\ne.g) If you write the following in sample.md file of your article\n{{\u0026lt;mermaid\u0026gt;}} graph LR A[Square Rect] -- Text --\u0026gt; B((Circle)) A --\u0026gt; C(Round Rect) B --\u0026gt; D{Rhombus} C --\u0026gt; D {{\u0026lt;/mermaid\u0026gt;}} You can see the following diagram on the web page.  mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) graph LR A[Square Rect] -- Text -- B((Circle)) A -- C(Round Rect) B -- D{Rhombus} C -- D References #   https://gohugo.io/about/ https://gohugo.io/content-management/multilingual/ https://gohugo.io/content-management/syntax-highlighting/ https://mermaid-js.github.io/mermaid/#/  "},{"id":9,"href":"/tech-blog/linux/memo/","title":"Linux Memo","section":"Linux","content":"Linux Memo #  コマンド入力履歴 #  history コマンドの主なオプション #     option description     整数値 履歴の末尾から指定した行数分を表示   -c 履歴一覧からすべての項目を削除   -d 番号 指定した番号の履歴項目を削除   -a 履歴ファイルに現在のセッションの履歴を追加   -n 履歴ファイルからまだ読み込まれていない行を全て読み込み   -r 履歴ファイルを読み込み、内容を履歴一覧に追加   -w 現在の履歴を履歴ファイルに上書き    コマンド入力履歴を表示 #  履歴を末尾から10件分表示\n$ history 10 コマンドライン上で !番号 と入力することで指定したコマンドを実行\n例) 履歴の末尾から5件目のコマンドを実行する場合\n!5 履歴の件数が多い場合 head コマンドで冒頭のみ表示\n$ history | head コマンド入力履歴を削除 #  指定した番号の履歴を削除 例) 5番の履歴を削除\n$ history -d 5 全ての履歴を削除\n$ history -c 現在のコマンド入力履歴を履歴ファイルに上書き #  例) 現在の履歴を sample.txt に上書き\n$ history -w sample.txt 履歴ファイルを読み込み #  例) sample.txt　の内容を履歴として読み込み\n$ history -r sample.txt 画面操作 #  ターミナル操作のショートカット #     Mac Windows description     control + a ctrl + a カーソルを行頭へ移動   control + e ctrl + e カーソルを行末へ移動   control + f ctrl + f カーソルを前進(右へ移動)   control + b ctrl + b カーソルを後退(左へ移動)   control + d ctrl + d カーソル上の1文字削除   control + h ctrl + h カーソル後方(左)の1文字削除   control + u ctrl + u カーソルから行頭まで削除   control + k ctrl + k カーソルから行末まで削除   control + w ctrl + w カーソル上の単語1つ分削除   control + y ctrl + y 最後に削除した文字を貼り付け   control + p ctrl + p 1つ前のコマンド履歴を表示   control + n ctrl + n 1つ後のコマンド履歴を表示   control + s ctrl + s 画面をロック   control + q ctrl + q 画面のロックを解除   control + c ctrl + c 実行中のコマンドを強制終了   control + l(エル) ctrl + l(エル) 画面をクリア   tab tab コマンド,ディレクトリ,ファイルの候補を補完    文字コード #  文字コードの値 #     文字コード コマンドで指定する値 remarks     Shift_JIS cp932 or sjis cp932 には sjis に含まれていない文字（①, ②, Ⅰ, Ⅱ, ㍉, ㌍, 彅, 髙 etc.）を含む。   EUC-JP euc-jp -   UTF-8 utf-8 -    文字コードを設定 #  .vimrc 以下を記述し :wq で保存。\n:set encoding=utf-8 :set fileencodings=utf-8,cp932,sjis,euc-jp    long short description     encoding enc vim の内部で使用されるエンコーディングを指定。   fileencoding fenc 編集時のバッファファイルのエンコーディングを指定。encodingと異なる値が設定されていた場合、ファイルの読み書き時に文字コードを変換。fenc が空の場合、変換なし。   fileencodings fencs 既存ファイル編集時の変換予定の文字コードを指定。カンマ区切りで複数記述可。    vim 内部で使用される文字コードを確認 #  :set encoding? or\n:se enc? ファイルの文字コードを確認 #  :set fileencoding? or\n:se fenc? ファイルの文字コードの自動判別設定を確認 #  :set fileencodings? or\n:se fencs? 指定の文字コードでファイルを開き直し #  :edit ++encoding=コマンドで指定する文字コードの値 or\n:e ++enc=コマンドで指定する文字コードの値 ファイルの文字コードを変換 #  以下を実行後に :w で保存すること。\n:set fileencoding=コマンドで指定する文字コードの値 or\n:set fenc=コマンドで指定する文字コードの値 ファイルの文字コードを変換し保存 #  :setlocal fileencoding=コマンドで指定する文字コードの値 or\n:setl fenc=コマンドで指定する文字コードの値 改行コード #  改行コードの設定 #  .vimrc 以下を記述し :wq で保存。\n:set fileformats=unix,dos,mac 改行コードの値 #     改行コード コマンドで指定する値 remarks     LF(Line Feed) \\n unix Unix, Linux, Mac(OS10以降), Android   CR(Carriage Return) \\r mac 古いMac(OS9以前)   CRLF(Carriage Return/Line Feed) \\r\\n dos Windows    改行コードを指定 #  以下を実行後に :w で保存すること。\n:set fileformat=コマンドで指定する改行コードの値 or\n:se ff=コマンドで指定する改行コードの値 改行コードを指定し保存 #  :setlocal fileformat=コマンドで指定する改行コードの値 or\n:setl ff=コマンドで指定する改行コードの値 ディスク容量 #  df コマンドとは #  ディスクの空き領域(free スペース)のサイズを集計して表示\ndf コマンドの主なオプション #     option option description     -h --human-readable サイズに応じて人間が読みやすい単位に変換して表示   -H --si イズに応じて人間が読みやすい単位に変換して表示、ただし 1024単位ではなく 1000単位の値を使用   -Bサイズ --block-size=サイズ 指定したサイズの倍数で表示、サイズは数値または単位で指定   -k  --block-size=1K と同じ   -m  --block-size=1M と同じ   -P --portability POSIX出力形式（サイズではなくブロックで表示）   -i --inodes ブロック使用量の代わりにiノード情報を表示   -T --print-type 各ファイルシステムの種類を合わせて表示   -t種類 --type=種類 対象とするフォーマットの種類を指定(e.g.「-txfs」でXFSフォーマットの場所のみ表示)   -x種類 --exclude-type=種類 対象としないフォーマットの種類を指定   -a --all ダミーファイルシステムを含めて表示   -l --local ローカルファイルシステムのみを表示    --total 全体の合計も表示    --sync 使用量の情報を得る前にsyncを実行    --no-sync 使用量の情報を得る前にsyncの実行なし（デフォルト）    ディスクの空き容量を表示 #  df メガ(1024×1024バイト)単位で表示\ndf -BM メガ(1000×1000バイト)単位で表示\ndf -BMB フォーマットの種類も合わせて表示\ndf -T XFSでフォーマットされているパーティションの空き領域と合計を表示\ndf -txfs --total ディスクの空き容量を表示(場所を指定して集計) #  カレントディレクトリを含むパーティションの空き領域を表示\ndf . /usr を含むパーティションの空き領域を表示\ndf /usr ディスクの空き容量を読みやすいサイズ表記で表示 #  df -h 空き領域の合計もあわせて表示\ndf -h --total 日付・時刻 #  TOMORROW=`date \u0026#39;+%Y%m%d\u0026#39; --date \u0026#39;1 day\u0026#39;` YESTERDAY=`date \u0026#39;+%Y%m%d\u0026#39; --date \u0026#39;-1 day\u0026#39;` echo ${TOMORROW} echo ${YESTERDAY} date コマンドの主なオプション #     format description     %H 時 (00～23)   %I 時 (01～12)   %k 時 ( 0～23)   %l 時 ( 1～12)   %M 分 (00～59)   %p AM あるいは PM のロケール(国や地域に合わせた文字列)   %r 12時間形式の時刻 (HH:mm:ss [AP]M)   %s 1970-01-01 00:00:00 UTC からの秒数   %S 秒 (00～61)   %T 24時間形式の時刻 (HH:mm:ss)   %a ロケールによる省略形の曜日の名前 (Sun～Sat)   %A ロケールによる完全に表記した曜日の名前(Sunday～Saturday)   %b ロケールによる省略形の月の名前 (Jan～Dec)   %B ロケールによる完全に表記した月の名前(January～December)   %c ロケールによる日付と時刻 (Sat Nov 04 12:02:33 EST 1989)   %d 日(月内通算日数) (01～31)   %D 日付 (MM/DD/YY)   %j 年内通算日数 (001～366)   %m 月 (01～12)   %w 週のうちの曜日(0～6)で0が日曜日に対応   %x ロケールによる日付の表現 (MM/DD/YY)   %y 西暦の下2けた (00～99)   %Y 年 (1970～)    タイムゾーンを確認 #  $ date +%Z JST $ date +\u0026#34;%Z %z\u0026#34; JST +0900 検索 #  grep コマンドの使用方法 #  grep 検索したい文字列 検索したいテキストファイル 任意のコマンドの実行結果に対して検索\nコマンド | grep 検索したい文字列 複数のパターンを指定\ngrep -e 検索したい文字列1 -e 検索したい文字列2 検索したいテキストファイル 指定したディレクトリ配下を再帰的に検索, 検索結果に行番号を表示\ngrep -rn -e \u0026#39;pattern\u0026#39; /dir/ grep コマンドの主なオプション #     option option description     -e 'パターン' --regexp='パターン' パターンを指定して検索   -f --file=ファイル ファイルに記載したパターン(1行1パターン)を読み込み検索に使用   -i --ignore-case アルファベットの大文字と小文字を区別せず検索   -w --word-regexp 単語全体でパターンと一致するものを検索   -x --line-regexp 行全体がパターンと一致するものを検索   -G --basic-regexp 基本正規表現(BRE)を検索に使用   -E --extended-regexp 拡張正規表現(ERE)を検索に使用   -P --perl-regexp Perl互換正規表現(PCRE)を検索に使用   -v --invert-match パターンに一致しない行を表示   -s --no-messages エラーメッセージを非表示   -q --quiet --silent 結果を非表示(主にシェルスクリプトなどで判定用に使用   -L --files-without-match 一致するものが含まれていないファイルのファイル名のみ表示   -l --files-with-matches 一致するものが含まれているファイルのファイル名のみ表示   -c --count 一致するものが含まれている回数のみ表示   -m 回数 --max-count=回数 パターンが指定した回数に達したら処理を終了   -o --only-matching 一致した箇所だけを表示(通常は行単位で表示)   -n --line-number 行番号を併せて表示(「行番号付きで表示」を参照)   -b --byte-offset パターンが何文字目にあるかを併せて表示   -H --with-filename ファイル名を併せて表示   -h --no-filename ファイル名を表示しない(複数ファイル指定時)    --color=WHEN 見つかったパターンを目立たせる(WHEN部分にはalways、never、autoを指定)   -B 行数 --before-context=行数 一致した行の前の行も表示(「前後の行も表示」を参照)   -A 行数 --after-context=行数 一致した行の後の行も表示(「前後の行も表示」を参照)   -C 行数,-行数 --context=行数 一致した行の前後の行も表示   -r --recursive ディレクトリを指定した場合はサブディレクトリ内のファイルも含め検索    タイムスタンプでの検索 #  現在〜2日前(48時間前) #  find ./ -mtime -2 2日前(48時間前〜72時間前) #  find ./ -mtime 2 2日前(72時間前)〜過去 #  find ./ -mtime +1 e.g) 特定のディレクトリ内の30日以前のCSV拡張子のファイルを削除\nfind ./ -type f -name \u0026#39;*.csv\u0026#39; -mtime +30 | xargs rm -f find コマンドの主なオプション #     option description     -mmin ファイルのデータの最終更新日時（分指定）   -mtime ファイルのデータの最終更新日時（日指定）   -amin ファイルのデータの最終アクセス日時（分指定）   -atime ファイルのデータの最終アクセス日時（日指定）   -cmin ファイルのデータとステータスの最終更新日時（分指定）   -ctime ファイルのデータとステータスの最終更新日時（日指定）   -daystart 00:00am 基準    一覧表示 #  タイムスタンプ降順で一覧表示(隠しファイル含む) #  ls -alt タイムスタンプ昇順で一覧表示(隠しファイル含む) #  ls -altr ls コマンドの主なオプション #     option description     -a 先頭 . の隠しファイルも表示   -A 先頭 . の隠しファイル, 現在のディレクトリ ., 親ディレクトリ .. も表示   -l(エル) 詳細情報を表示   -t タイムタンプ降順で表示   -tr タイムタンプ昇順で表示    移動・名称変更 #  ※ 基本的にファイルもディレクトリも操作は同じ\n1つのファイルを移動 #  e.g) ファイル sample.txt を ディレクトリ ./dir/ に移動\nmv sample.txt ./dir/ 複数のファイルを移動 #  e.g) ファイル sample1.txt と sample2.txt を ディレクトリ ./dir/ に移動\nmv sample1.txt sample2.txt ./dir/ ファイルの名称を変更(リネーム) #  ファイル before.txt を after.txt に変更\nmv before.txt after.txt mv コマンドの主なオプション #     option option description     -v --verbose 実行内容を表示   -i --interactive 移動元と移動先が同名の場合, 上書きする前に確認   -b --backup=方法 移動元と移動先が同名の場合, 上書きされるファイル(移動先)のバックアップを作成｜   -S --suffix=接尾語 バックアップ作成時の接尾語を指定   -n --noclobber 移動元と移動先が同名の場合, 上書きせず停止   -u --update 移動元のファイルが移動先ファイルより新しいか新規ファイルの場合のみ上書き    削除 #  1ファイルを削除 #  $ rm sample.txt 複数ファイルを削除 #  $ rm sample-1.txt sample-2.txt sample-3.txt カレントディレクトリの全ファイルを確認しながら削除 #  $ rm -i * rm コマンドの主なオプション #     option option description     -f --force 削除前の確認なし(指定したファイルが存在しない場合もエラー表示なし)   -i --interactive 削除前に確認   -v --verbose 経過を表示   -d --directory unlink でディレクトリを削除   -r,-R --recursive ディレクトリを再帰的に削除(ファイルを含む)    --preserve-root / の削除なし (/ を特別なものとして扱う, デフォルト)    --no-preserve-root / の削除あり (/ を特別なものとして扱わない)    空ディレクトリを削除 #  $ rmdir dir 多階層の空ディレクトリを削除\n$ rmdir -p dir1/dir2/dir3 rmdir コマンドの主なオプション #     option option description      --ignore-fail-on-non-empty 空ディレクトリでない場合のエラーのみ無視(エラーメッセージの表示なし)   -p --parents 必要に応じて親ディレクトリも削除   -v --verbose 経過を表示    コピー #  ※ 基本的にファイルもディレクトリも操作は同じ\nファイルをコピー #  cp -ip original.txt copy.txt ディレクトリごとファイルをコピー #  cp -ipr original-dir copy-dir ファイルをコピーする際にバックアップを作成 #  cp -b --suffix=_$(date +%Y%m%d%H%M%S) original.txt copy.txt cp コマンドの主なオプション #     option option description     -v --verbose 実行内容を表示   -i --interactive コピー元とコピー先が同名の場合, 上書きする前に確認   -b --backup=方法 コピー元とコピー先が同名の場合, 上書きされるファイル(コピー先)のバックアップを作成｜   -S --suffix=接尾語 バックアップ作成時の接尾語を指定   -u --update コピー元のファイルがコピー先ファイルより新しいか新規ファイルの場合だけコピー   -r --recursive コピー元にディレクトリを指定した場合 再帰的にコピー   -p --preserve コピー元のパーミッションと所有者とタイムスタンプを保持（\u0026ndash;preserve=mode,ownership,timestampsと同じ）   -s --symbolic-link シンボリック・リンクを作成    ネットワーク上のホスト間のSSHを利用したコピー #  scp [option] [転送元ユーザー名@][転送元ホスト名:]転送元ファイルパス 転送先ユーザ名@転送先ホスト名:転送先パス scp コマンドの主なオプション #     option description     -r 転送元のディレクトリ全体を再帰的にコピー   -v 転送の進行情報を表すメーターやデバッグ・メッセージを表示   -q 転送の進行情報を表すメーターを非表示   -C 通信を圧縮   -p 転送元の最終更新日時・最終アクセス日時・パーミッションを転送先に保持   -P ポート番号 転送先のポート番号を指定   -i 秘密鍵ファイル 秘密鍵ファイルを指定    ディレクトリとファイルの構成を表示 #  tree コマンド\u0008のインストール (macOS) #  $ brew install tree tree コマンドのバージョンを確認 #  $ tree --version 階層を指定 #  e.g. カレントディレクトリ配下の3階層まで表示する場合\n$ tree -L 3 ファイル名のパターンを指定 #  $ tree -P \u0026#39;*.js\u0026#39; 除外するファイル名のパターンを指定 #  $ tree -I \u0026#39;*.log\u0026#39; ディレクトリのみを表示 #  $ tree -d tree コマンドの主なオプション #     option option description     -a  ドット始まりのディレクトリを含めて表示   -d  ディレクトリのみ表示   -l  シンボリックをたどって表示   -f  カレントディレクトリまたは指定したディレクトリからのパスをつけてファイルやディレクトリを表示   -L 整数  表示するディレクトリの階層(深さ), 1以上の整数を指定   -P パターン  パターンにマッチしたファイルのみ表示   -l パターン  パターンにマッチしないファイルのみ表示    --prune 表示対象ファイルが存在しないディレクトリを除外して表示    --filelimit エントリ数 指定した数を超えるエントリを持つディレクトリの内部は非表示(\u0026ndash;filelimit 10 の場合, 表示内容が10イないのディレクトリの内部のみを表示)   -o ファイル名  treeコマンドの結果を指定ファイルに出力    ln ディレクトリやファイルのリンクを作成 #  ハードリンクとシンボリックリンク #   シンボリックリンクでファイルの「別名」なら、ハードリンクはファイルの「本名」。 ハードリンクの場合、元ファイルもリンクもどちらも「本名」。両者は同等。  ディレクトリのシンボリックリンクを作成 #  ln -s ディレクトリ名 リンク名 ファイルのシンボリックリンクを作成 #  ln -s ファイル名 リンク名 指定したディレクトリ内にシンボリックリンクを作成 #  ln -s ファイル1 ファイル2・・・ ディレクトリ名 ディレクトリのハードリンクを作成 #  ln ディレクトリ名 リンク名 ファイルのハードリンクを作成 #  ln ファイル名 リンク名 ln コマンドの主なオプション #     option option description     -s --symbolic ハードリンクの代わりにシンボリックリンクを作成   -d,-F --directory ディレクトリのハードリンクを作成(スーパーユーザのみ)   -f --force リンクファイルと同名のファイルがある場合も強制的に上書き   -i --interactive 上書きする場合に確認   -n --no-dereference リンク作成場所として指定したディレクトリがシンボリックリンクだった場合、参照先にリンクを作成するのではなく、シンボリックリンクそのものを置き換え(-fと組み合わせて使用)   -L --logical 対象がシンボリックリンクの場合リンクを巡る   -P --physical シンボリック自体のハードリンクを作成   -r --relative 相対パスのシンボリックリンクを作成   -T --no-target-directory リンク先を常に通常ファイルとして扱う   -t ディレクトリ名 --target-directory=ディレクトリ名 指定したディレクトリにリンクを作成   -b --backup=方法 上書きされるバックアップを作成。numbered または t の場合は番号の添字。simple または never の場合はファイルの末尾に ~ または -S オプションか環境変数で指定した文字をつけるシンプルなバックアップ(-b と同じ)。existing または nil の場合はすでにあるファイルに従う(ない場合は simple と同じ)   -S 接尾辞 --suffix=接尾辞 バックアップファイル作成時にファイル末尾に付与する文字を指定(未指定の場合は ~ または環境変数 SIMPLE_BACKUP_SUFFIX)   -v --verbose 経過を表示    mkdir ディレクトリの作成 #  多階層のディレクトリを作成 #  mkdir -p /dir/subdir/{subsubdir-1,subsubdir-2,subsubdir-3} dir └── subdir ├── subsubdir-1 ├── subsubdir-2 └── subsubdir-3 作成したディレクトリに作業場所を移動 #  mkdir -p /dir/subdir/subsubdir/ \u0026amp;\u0026amp; cd $_ ファイルの作成 #  空ファイルを作成 #  touch sample.txt ファイルのタイムスタンプを変更 #  e.g) ファイルのタイムスタンプ(最終更新日)を「2021-01-01 01:25:30」に変更\ntouch --date=\u0026#34;2021-01-01 01:25:30\u0026#34; sample.txt or\ntouch -t 202101012530.30 sample.txt    short option long option description     -t \u0026lt;time\u0026gt; - [[CC]YY]MMDDhhmm[.ss] 形式で日時を指定   -d -date=日付文字列 文字列で日時を指定   -r \u0026ndash;reference=ファイル名 指定したファイルと同じ日時を指定    cat ファイル内容の表示 #  cat コマンドとは #  ファイルを連結するためのコマンドだが、ファイルの内容を簡単に表示する際に使用されている。 cat = conCATenate (つなぐ, 連結する)\nファイルの内容を行番号付きで表示 #  $ cat -n sample.txt 複数のファイルを連結して 1つのファイルに出力 #  $ cat before1.txt before2.txt \u0026gt; after.txt cat コマンドの主なオプション #     option option description     -n \u0026ndash;number 行番号を付与   -b \u0026ndash;number-nonblank 行番号を付与(空白行以外)   -s -squeeze-blank 連続した空行を1行として表示   -v \u0026ndash;show-nonprinting タブ, 改行, 改ページ以外の非表示文字を表示   -t  非表示文字を表示(タブを ^|, 用紙送りを ^L として表示   -E \u0026ndash;show-ends 行の最後に $ を表示   -A \u0026ndash;show-all 全ての非表示文字を表示(-vET と同じ)   -e  タブを除く全ての非表示文字を表示(-vE と同じ)    less ファイル内容の表示 #  ファイル内容を1画面に表示(編集なし) #  less sample.txt 行番号も表示\nless -N sample.txt ファイル内容表示時のショートカット #  less コマンド\n   command description     d 半画面前進(下へ移動)   u 半画面後退(上へ移動)   g 先頭行へ移動   G 最終行へ移動   v vi コマンドで編集   q 終了   / 前方(下方向)へ検索 (n 下方向, N 上方向)   ? 後方(上方向)へ検索 (n 下方向, N 上方向)    ファイル内容の編集 #  ファイルの作成と編集 vi sample.txt\n入力モードへの切り替え #     command description     i 現在のカーソル位置に入力   A 現在のカーソル位置の行末に入力   O 1つ上の行に文字を入力   o 1つ下の行に文字を入力    入力モードからコマンドモードへの切り替え #     command description     esc 入力モードからコマンドモードへ切り替え    コマンドモードの操作 #     command description     x 1文字削除   dd 1行削除   d100d 100行削除   y 行コピー   y100y 100行コピー   p コピーした行の貼り付け   G 最終行へ移動   100G 100行目へ移動   / 前方(下方向)へ検索   ? 後方(上方向)へ検索   :q! ファイルを保存せずに終了(閉じる)   :wq ファイルを保存して終了(閉じる)   :w ファイルを保存のみ(viは終了しない状態)    ファイル内容の行数・並べ替え・重複 #  ファイルの行数 #  ファイルの行数を出力 #  wc -l sample.txt ファイルの空行の行数を出力 #  grep -c \u0026#39;^$\u0026#39; sample.txt 指定した文字と一致しない行数を出力 #  grep -c -v \u0026#39;hoge\u0026#39; sample.txt ファイル内容の並べ替え #  並べ替えた結果を出力 #  sort sample.txt 並べ替え重複行は1行目のみを出力 #  sort -u sample.txt sort --unique sample.txt 並べられているか確認 #  sort -c sort --check ファイル内容の重複 #  重複行は1行目のみを出力 #  uniq sample.txt 重複する行のみ出力 #  uniq -d sample.txt ファイル内容の正規表現での確認 #  正規表現と一致する行数を確認 #  e.g.) 半角数字10桁のみの行数\ngrep -c -E \u0026#39;^[0-9]{10}$\u0026#39; sample.txt 圧縮・解凍・暗号解除 #  zip コマンドでの圧縮 #  zip圧縮後に元ファイルを削除\nzip -rm after.zip before.file パスワード付き zip ファイルの作成\nzip -e -r after.zip before/ zip コマンドでの展開 #  $ unzip sample.zip zip ファイルの暗号解除 #  $ zipcloak -d sample.zip encrypted_data.zip の暗号を解除し decrypted_data.zip に保存\n$ zipcloak -d -O decrypted_data.zip encrypted_data.zip zipcloak コマンドの主なオプション #     option option description     -d --decrypt 暗号を解除 (間違ったパスワードを入力した場合、zip ファイルを元のまま上書き。   -O ZIPファイル名 --output-file ZIPファイル名 暗号を解除したZIPファイルの保存先を指定。 (元のZIPファイルはそのまま残る。)   -b ```パス \u0026ndash;temp-path``` 一時作業用のディレクトリを指定。   -q --quiet 動作中のメッセージを非表示。    tarコマンドでの圧縮 #  tar コマンドでファイルのアーカイブを作成し gzip 形式に圧縮\n$ tar -czvf after.tar.gz before.txt カレントディレクトリの全ファイルをまとめたアーカイブを作成し gzip 形式に圧縮\n$ tar -czvf after.tar.gz * tar コマンドでの展開(解凍) #  gzip 形式で圧縮されたアーカイブを tar コマンドで展開\n$ tar -xzvf sample.tar.gz tar コマンドの主なオプション #     option option description     -c --create 新しいアーカイブを作成   -r --append アーカイブの最後にファイルを追加   -A --catenate, --concatenate アーカイブに tarアーカイブを追加   -u --update アーカイブのファイルを更新 (アーカイブ内の同名ファイルより新しいものだけを追加)   -d --diff, --compare アーカイブとファイルシステムを比較    --delete アーカイブから削除   -t --list アーカイブの内容の一覧を表示   -x --extract, --get アーカイブからファイルを抽出    tar コマンドの共通のオプション #     option option description     -z --gzip アーカイブを gzip 形式で圧縮。gzip 形式で圧縮されたアーカイブを展開。拡張子は .tar.gz または .tgz。   -j --bzip2 アーカイブを bzip2 形式で圧縮。bzip2 形式で圧縮されたアーカイブを展開。拡張子は .tar.bz2。   -Z --compress, --uncompress アーカイブを compress 形式で圧縮。compress 形式で圧縮されたアーカイブを展開。拡張子は .tar.Z。   -W --verify アーカイブを書き出した後に検証。   -v --verbose 処理したファイルを詳しく出力。    CSV #  CSVファイルの各行のカラム数が指定した数(以下の例では 10)と一致しない行数を確認 #  cat sample.csv | awk -F \u0026#39;,\u0026#39; \u0026#39;{print NF}\u0026#39; | grep -c -v 10 CSVファイルの特定のカラム(以下の例では10カラム目)のみを抽出 #  cut -d \u0026#39;,\u0026#39; -f 10 sample.csv \u0026gt; specific_column.csv システム情報/バージョン #  システム情報を確認 #  uname -a カーネルのバージョン情報を確認 #  cat /proc/version OSのバージョン情報を確認 #  cat /etc/os-release OSのバージョン情報を確認(ディストリビューション別) #  ※RHEL=Red Hat Enterprise Linux\n   command RHEL※ CentOS Fedora Amazon Linux Oracle Linux Debian Ubuntu SUSE Linux     cat /etc/system-release Yes Yes Yes Yes Yes      cat /etc/redhat-release Yes Yes Yes  Yes      cat /etc/centos-release  Yes         cat /etc/fedora-release   Yes        cat /etc/oracle-release     Yes      cat /etc/debian_version      Yes Yes    cat /etc/lsb-release       Yes    cat /etc/SuSE-release        Yes    OSのバージョン情報確認コマンドを確認 #  ls -l /etc/*release ディスク使用量を確認 #  du コマンドとは #   ディスク使用量を集計し表示 アクセス権限のないファイルやディレクトリは集計対象外  du コマンドの主なオプション #  集計 #     option option description     -S \u0026ndash;separate-dirs サブディレクトリのサイズを含めずに集計   -s \u0026ndash;summarize 指定したディレクトリの合計のみ表示(サブディレクトリの行は非表示)   -d深さ \u0026ndash;max-depth=深さ 集計するディレクトリの深さを指定   -P \u0026ndash;no-dereference シンボリックをたどらずに集計(デフォルト)   -L \u0026ndash;dereference 全てのシンボリックをたどって集計   -D,-H \u0026ndash;dereference-args コマンドラインで指定されたシンボリックのみたどって集計   -x \u0026ndash;one-file-system 異なるファイルシステム(パーティーション)にあるディレクトリをスキップして集計   -l \u0026ndash;count-links ハードリンクがある場合、その個数分のサイズを数える    \u0026ndash;exclude=パターン パターンと一致するファイルを除外して集計   -Xファイル \u0026ndash;exclude-from=ファイル ファイルに含まれるパターンに一致するファイルを除外して集計    \u0026ndash;files0-from=ファイル ファイルに指定されたリスト(NULL区切り)を対象に集計、- を指定した場合は標準入力から読み込み    表示 #     option option description     -h \u0026ndash;human-readable サイズに応じて人間が読みやすい単位に変換して表示   -H \u0026ndash;si イズに応じて人間が読みやすい単位に変換して表示、ただし 1024単位ではなく 1000単位の値を使用   -Bサイズ \u0026ndash;block-size=サイズ 指定したサイズの倍数で表示、サイズは数値または単位で指定   -k  \u0026ndash;block-size=1K と同じ   -m  \u0026ndash;block-size=1M と同じ    \u0026ndash;apparent-size ディスク使用量ではなく実際のサイズを表示   -b \u0026ndash;bytes 実際のサイズをバイト単位で表示（ --apparent-size または --block-size=1 に相当）   -c \u0026ndash;total 全体の合計も表示   -0 \u0026ndash;null 改行ではなく NULL で区切って表示    \u0026ndash;time 集計対象となったファイルの最終更新時間を対象ごとに表示    \u0026ndash;time=表示 表示の値に指定した atime access use ctime status の時間を表示    \u0026ndash;time-style=スタイル 時間の表示スタイルとして full-iso long-iso iso +FORMAT を指定、+FORMAT は date コマンドのフォーマット指定と共通    特定ディレクトリ配下でディスク使用量が大きい順に表示 #  du -hs /path/to/target/directory/* | sort -hr | head -10 カレントディレクトリ直下のファイルやディレクトリのディスク使用量とその合計を表示 #  $ du -cs * 集計するディレクトリの深さを指定 #  e.g. ルートディレクトリとその直下のディスク容量を1階層まで表示\n(他のパーティーションにあるファイルは対象外)\n-x 1つのファイルシステムのみを集計\n$ du -d1 -x / 並べ替え #  sort コマンドとは #   テキストファイルを行単位で並べ替えるコマンド  sort コマンドの主なオプション #  並べ替え関連 #     option option description     -f --ignore-case 大文字／小文字を区別せずに並べ替え   -V --version-sort 自然な（バージョン）数字順で並べ替え   -n --numeric-sort 文字列を数値と見なして並べ替え   -h --human-numeric-sort 人が読むことのできる形式の数値で並べ替え(e.g. 5K, 1.2G etc.)   -g --general-numeric-sort 一般的な数値として並べ替え   -M --month-sort 月名で並べ替え   -d --dictionary-order データが空白と英数字のみ含まれていると仮定して並べ替え   -b --ignore-leading-blanks 先頭の空白を無視して並べ替え   -i --ignore-nonprinting 表示可能な文字だけを対象に並べ替え   -R --random-sort キーのランダムハッシュ順に並べ替え    --random-source=ファイル ランダムソースのファイルを設定    --sort=指定 並べ替えの方法を指定 (general-numeric、human-numeric、month、numeric、random、version)   -r --reverse 逆順で並べ替え   -k 指定 --key=指定 所と並べ替え種別を指定する (-k 5なら5列目、-k 5n なら5列目を数値として並べ替え。複数指定する場合は -k オプションを複数回指定)   -t 文字 --field-separator=文字 フィールドの区切り文字を指定（デフォルトは空白文字）    その他 #     option option description     ````-m``` --merge 並べ替えられたファイルをマージ (並べ替え自体は行わない)   ````-c``` --check, --check=diagnose-first 並べ替えられているかどうかを確認   ````-C``` --check=quiet, --check=silent -c と同様だがメッセージは出力しない（スクリプト内の判定行などで使用）   ````-u``` --unique 同一行は1つ目だけを出力（-c と併せて使用した場合、厳密に順序を確認）   ````-z``` --zero-terminated 最後に NULL 文字を出力   ````-o ファイル名``` --output=ファイル名 結果を出力するファイル名を指定（デフォルトは標準出力）    --files0-from=F NULL文字で区切られたファイル名のリストを指定（--files0-from=- とした場合、ファイル名を標準入力から読み込み    --debug 並べ替えに使用されている行の一部に注釈を付けて、不確かな使用方法について標準エラー出力に警告を表示    指定した列で並べ替え #  区切り文字を , として 5列目の項目で並べ替え\nsort -k 5 -t , sample.csv 区切り文字を , として 5列目の項目を数字として並べ替え\nsort -k 5n -t , sample.csv その他 #  ログイン中のユーザー #  LOGIN_USER=`who am i | awk -F \u0026#39; \u0026#39; \u0026#39;{print $1}\u0026#39;` echo $LOGIN_USER References #   Linux基本コマンドTips インフラエンジニアとしてよく使うコマンド集 インフラエンジニアじゃなくても押さえておきたいSSHの基礎知識 viの文字コードについて vimによる日本語文字コード自動判別と文字コード変換 grepでこういう時はどうする? Man page of GREP gzip ファイルを操作 【 tree 】コマンド――ディレクトリをツリー状に表示する  "},{"id":10,"href":"/tech-blog/mysql/","title":"MySQL Memo","section":"Tech Blog","content":"MySQL Memo #  Preparation #  Install to macOS #  $ brew install mysql Start #  $ mysql.server start Starting MySQL ....... SUCCESS! Check the vertion #  $ mysql --version mysql Ver 8.0.26 for macos11.3 on x86_64 (Homebrew) Make initial settings #  $ mysql_secure_installation  パスワード強度検証プラグインの利用有無 パスワード強度の選択 root ユーザのパスワード設定 匿名ユーザの削除 リモートからの root ユーザとしてのログインの禁止 サンプル用 test データベースの削除  $ mysql_secure_installation  Securing the MySQL server deployment. Connecting to MySQL using a blank password. VALIDATE PASSWORD COMPONENT can be used to test passwords and improve security. It checks the strength of password and allows the users to set only those passwords which are secure enough. Would you like to setup VALIDATE PASSWORD component? ### パスワード強度検証プラグインの利用 Press y|Y for Yes, any other key for No: y ### y と入力  There are three levels of password validation policy: LOW Length \u0026gt;= 8 MEDIUM Length \u0026gt;= 8, numeric, mixed case, and special characters STRONG Length \u0026gt;= 8, numeric, mixed case, special characters and dictionary file ### パスワード検証ポリシーの選択 Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 2　### 2 と入力  Please set the password for root here. New password: ### rootユーザー用のパスワードを入力  Re-enter new password: ### rootユーザー用のパスワードを再入力  Estimated strength of the password: 100 Do you wish to continue with the password provided? (Press y|Y for Yes, any other key for No) : y　### y と入力 By default, a MySQL installation has an anonymous user, allowing anyone to log into MySQL without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. ### 匿名ユーザーの削除 Remove anonymous users? (Press y|Y for Yes, any other key for No) : y ### y と入力 Success. Normally, root should only be allowed to connect from \u0026#39;localhost\u0026#39;. This ensures that someone cannot guess at the root password from the network. ### リモートからの root ログインの拒否 Disallow root login remotely? (Press y|Y for Yes, any other key for No) : y ### y と入力 Success. By default, MySQL comes with a database named \u0026#39;test\u0026#39; that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. ### test データベースの削除 Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y　### y と入力  - Dropping test database... Success. - Removing privileges on test database... Success. Reloading the privilege tables will ensure that all changes made so far will take effect immediately. ### 特権テーブルの即時適用 Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y　### y と入力 Success. All done! ログイン #  e.g) rootユーザーでのログイン\n$ mysql -uroot -p Enter password: ### 設定したパスワードを入力 MySQLの情報 #  バージョン #  SELECT VERSION(); タイムゾーン #  SHOW VARIABLES LIKE \u0026#39;%time_zone%\u0026#39;; 文字コード #  SHOW VARIABLES LIKE \u0026#39;%character\\_set\\_%\u0026#39;; SHOW VARIABLES LIKE \u0026#39;collation%\u0026#39;; データベース/テーブル/カラムの一覧 #  データベースの一覧 #  SHOW DATABASES; SELECT DISTINCT table_schema AS database_name FROM information_schema.tables WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) ORDER BY table_schema; テーブルの一覧 #  USE sample_database; SHOW TABLES; SHOW TABLES FROM sample_database; SELECT table_schema AS database_name, table_name FROM information_schema.tables WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) AND table_type = \u0026#39;BASE TABLE\u0026#39; ORDER BY table_schema, table_type, table_name; テーブルごとの自動採番 AUTO_INCREMENT の一覧 #  SELECT table_schema AS database_name, table_name, auto_increment FROM information_schema.tables WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) AND table_type = \u0026#39;BASE TABLE\u0026#39; ORDER BY table_schema, table_name; テーブルごとのカラムの一覧（カンマ区切り） #  SELECT table_schema AS database_name, table_name, GROUP_CONCAT(column_name) AS column_names FROM information_schema.columns WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) GROUP BY table_schema, table_name テーブルの物理名と論理名（テーブル・コメント）の一覧 #  SELECT table_schema AS databae_name, table_name, table_comment FROM information_schema.tables WHERE table_schema = \u0026#39;sample_database\u0026#39; ORDER BY table_schema, table_name; カラムの物理名と論理名（カラム・コメント）の一覧 #  SELECT table_schema AS databae_name, table_name, column_name, column_comment FROM information_schema.columns ORDER BY table_schema, table_name; 特定のカラムを含むテーブルの一覧 #  SELECT table_schema AS databae_name, table_name, column_name, column_comment FROM information_schema.columns WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) AND column_name LIKE \u0026#39;%sample_column%\u0026#39; ORDER BY table_schema, table_name, column_name; ビューの一覧 #  SELECT table_schema AS database_name, table_name AS view_name FROM information_schema.tables WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) AND table_type = \u0026#39;VIEW\u0026#39; ORDER BY table_schema, table_name; テーブルのキー情報の一覧 #  テーブルごとのプライマリーキー制約の一覧 #  SELECT table_schema AS database_name, table_name, column_name AS primary_key FROM information_schema.KEY_COLUMN_USAGE WHERE constraint_name = \u0026#39;PRIMARY\u0026#39;; テーブルごとのユニークキー制約の一覧 #  SELECT table_schema AS database_name, table_name, GROUP_CONCAT(column_name) AS unique_keys FROM information_schema.KEY_COLUMN_USAGE WHERE position_in_unique_constraint = 1 GROUP BY table_schema, table_name; テーブルごとの外部キー制約の一覧 #  SELECT table_schema AS database_name, table_name, GROUP_CONCAT( CONCAT( column_name, \u0026#39;=\u0026#39;, referenced_table_name, \u0026#39;.\u0026#39;, referenced_column_name ) ) AS referenced FROM information_schema.KEY_COLUMN_USAGE WHERE referenced_table_name IS NOT NULL GROUP BY table_schema, table_name; テーブルごとのプライマリーキー・ユニークキー・外部キー一覧 #  SELECT table_info.*, primary_info.primary_key, unique_info.unique_keys, reference_info.referenced FROM ( SELECT table_schema AS database_name, table_name FROM information_schema.tables WHERE table_type = \u0026#39;BASE TABLE\u0026#39; ) AS table_info LEFT JOIN ( SELECT table_schema AS database_name, table_name, GROUP_CONCAT(column_name) AS unique_keys FROM information_schema.KEY_COLUMN_USAGE WHERE position_in_unique_constraint = 1 GROUP BY table_schema, table_name ) AS unique_info ON table_info.database_name = unique_info.database_name AND table_info.table_name = unique_info.table_name LEFT JOIN ( SELECT table_schema AS database_name, table_name, column_name AS primary_key FROM information_schema.KEY_COLUMN_USAGE WHERE constraint_name = \u0026#39;PRIMARY\u0026#39; ) AS primary_info ON table_info.database_name = primary_info.database_name AND table_info.table_name = primary_info.table_name LEFT JOIN ( SELECT table_schema AS database_name, table_name, GROUP_CONCAT( CONCAT( column_name, \u0026#39;=\u0026#39;, referenced_table_name, \u0026#39;.\u0026#39;, referenced_column_name ) ) AS referenced FROM information_schema.KEY_COLUMN_USAGE WHERE referenced_table_name IS NOT NULL GROUP BY table_schema, table_name ) AS reference_info ON table_info.database_name = reference_info.database_name AND table_info.table_name = reference_info.table_name データ容量の一覧 #  データベースごとのサイズの一覧 #  SELECT table_schema AS database_name, CONCAT( SUM(data_length + index_length) / (1024 * 1024), \u0026#39; MB\u0026#39; ) AS db_size FROM information_schema.tables GROUP BY table_schema ORDER BY table_schema; データベースごとのテーブル数の一覧 #  SELECT table_schema AS database_name, COUNT(*) AS table_count FROM information_schema.tables WHERE table_type = \u0026#39;BASE TABLE\u0026#39; GROUP BY table_schema; テーブルごとのサイズの一覧 #  SELECT table_schema AS database_name, table_name, CONCAT( (data_length + index_length) / (1024 * 1024), \u0026#39; MB\u0026#39; ) AS table_size FROM information_schema.tables WHERE table_type = \u0026#39;BASE TABLE\u0026#39; AND table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) ORDER BY table_schema, (data_length + index_length) DESC, table_name; テーブルごとのレコード数の一覧 #  SELECT table_schema AS database_name, table_name, table_rows FROM information_schema.tables AS `target` WHERE table_type = \u0026#39;BASE TABLE\u0026#39; AND table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) ORDER BY table_schema, table_rows DESC, table_name; データベース/テーブルごとの件数/容量/カラム/キー情報/文字コード/AUTO_INCREMENTの一覧 #  SELECT table_info.table_schema AS database_name, database_info.table_count, database_info.db_size, table_info.table_name, table_info.table_rows, table_info.table_size, columns_info.column_names, key_info.primary_key, key_info.unique_keys, key_info.referenced, table_info.auto_increment, table_info.table_collation AS character_info FROM ( -- 全テーブル情報  SELECT *, CONCAT( (data_length + index_length) / (1024 * 1024), \u0026#39; MB\u0026#39; ) AS table_size FROM information_schema.tables WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) AND table_type = \u0026#39;BASE TABLE\u0026#39; ) AS table_info LEFT JOIN ( -- データベースの容量とテーブル数  SELECT table_schema AS database_name, CONCAT( SUM(data_length + index_length) / (1024 * 1024), \u0026#39; MB\u0026#39; ) AS db_size, SUM( CASE WHEN table_type = \u0026#39;BASE TABLE\u0026#39; THEN 1 ELSE 0 END ) AS table_count FROM information_schema.tables GROUP BY table_schema ) AS database_info ON table_info.table_schema = database_info.database_name LEFT JOIN ( -- テーブルごとのカラム  SELECT table_schema AS database_name, table_name, GROUP_CONCAT(column_name) AS column_names FROM information_schema.columns WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) GROUP BY table_schema, table_name ) AS columns_info ON table_info.table_schema = columns_info.database_name AND table_info.table_name = columns_info.table_name LEFT JOIN ( -- テーブルのキー情報（プライマリーキー、ユニークキー、外部キー）  SELECT table_info.*, primary_info.primary_key, unique_info.unique_keys, reference_info.referenced FROM ( SELECT table_schema AS database_name, table_name FROM information_schema.tables WHERE table_type = \u0026#39;BASE TABLE\u0026#39; ) AS table_info LEFT JOIN ( SELECT table_schema AS database_name, table_name, GROUP_CONCAT(column_name) AS unique_keys FROM information_schema.KEY_COLUMN_USAGE WHERE position_in_unique_constraint = 1 GROUP BY table_schema, table_name ) AS unique_info ON table_info.database_name = unique_info.database_name AND table_info.table_name = unique_info.table_name LEFT JOIN ( SELECT table_schema AS database_name, table_name, column_name AS primary_key FROM information_schema.KEY_COLUMN_USAGE WHERE constraint_name = \u0026#39;PRIMARY\u0026#39; ) AS primary_info ON table_info.database_name = primary_info.database_name AND table_info.table_name = primary_info.table_name LEFT JOIN ( SELECT table_schema AS database_name, table_name, GROUP_CONCAT( CONCAT( column_name, \u0026#39;=\u0026#39;, referenced_table_name, \u0026#39;.\u0026#39;, referenced_column_name ) ) AS referenced FROM information_schema.KEY_COLUMN_USAGE WHERE referenced_table_name IS NOT NULL GROUP BY table_schema, table_name ) AS reference_info ON table_info.database_name = reference_info.database_name AND table_info.table_name = reference_info.table_name ) AS key_info ON table_info.table_schema = key_info.database_name AND table_info.table_name = key_info.table_name ORDER BY table_info.table_schema, table_info.table_name; データベース #  データベースの新規作成 #   CHARACTER SET 文字コード  utf8mb4 絵文字にも対応。   COLLATE 照合順序  utf8mb4_bin: 全ての区別あり（大文字小文字/全角半角の区別あり） utf8mb4_general_ci: 大文字小文字の区別なし utf8mb4_unicode_ci: 大文字小文字/全角半角の区別なし     CREATE DATABASE sample_db DEFAULT CHARACTER SET = utf8mb4 DEFAULT COLLATE = utf8mb4_bin; データベースの文字コードの変更 #  ALTER DATABASE sample_db DEFAULT CHARACTER SET = utf8mb4; ユーザー #  ユーザーの新規作成 #  CREATE USER \u0026#39;sample_user\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;sample_password\u0026#39;; ユーザーのパスワードの設定 #  ログイン中ユーザーのパスワードの設定 #  -- ログイン中のユーザーを確認 SELECT CURRENT_USER(); -- パスワードを設定 SET PASSWORD = PASSWORD(\u0026#39;sample_password\u0026#39;); 特定のユーザーのパスワードの設定 #  SET PASSWORD FOR \u0026#39;sample_user\u0026#39;@\u0026#39;localhost\u0026#39; = PASSWORD(\u0026#39;sample_password\u0026#39;); ユーザーの権限の設定 #  データベース権限 #  sample_user に sample_db の全テーブルの全ての権限を付与\nGRANT ALL ON sample_db.* TO \u0026#39;sample_user\u0026#39;@\u0026#39;localhost\u0026#39;; sample_user に sample_db の全テーブルの参照/新規登録の権限を付与\nGRANT SELECT, INSERT ON sample_db.* TO \u0026#39;sample_user\u0026#39;@\u0026#39;localhost\u0026#39;; テーブル権限 #  sample_user に sample_db の sample_table の参照権限を付与\nGRANT SELECT ON sample_db.sample_table TO \u0026#39;sample_user\u0026#39;@\u0026#39;localhost\u0026#39;; sample_user の既存の権限を変更せずに 1時間あたりの発行可能クエリ数を制限  MAX_QUERIES_PER_HOUR count クエリ数 MAX_UPDATES_PER_HOUR count 更新件数 MAX_CONNECTIONS_PER_HOUR count コネクション数（同時接続の最大数を制限）  (結果がクエリーキャッシュから得られたクエリーは、MAX_QUERIES_PER_HOUR 制限に対してカウントされません。) count が 0 (デフォルト) である場合、これは、このアカウントに対する制限が存在しないことを示します。  GRANT USAGE ON *.* TO \u0026#39;sample_user\u0026#39;@\u0026#39;localhost\u0026#39; WITH MAX_QUERIES_PER_HOUR 100; カラム権限 #  カラム権限で付与される権限 INSERT, SELECT, UPDATE の後にカッコで囲まれた 1つ以上のカラムを指定\nGRANT SELECT (sample_column_1, sample_column_2), UPDATE (sample_column_1) ON sample_db.sample_table TO \u0026#39;sample_user\u0026#39;@\u0026#39;localhost\u0026#39;; 権限 #  ユーザーごとの権限の一覧 #  SELECT grantee AS user, is_grantable AS is_grantable, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.user_privileges GROUP BY grantee, is_grantable ORDER BY grantee; データベースごとの権限の一覧 #  SELECT grantee AS user, table_schema AS db, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.schema_privileges GROUP BY grantee, table_schema ORDER BY grantee, table_schema; テーブルごとの権限の一覧 #  SELECT grantee AS user, table_schema AS db, table_name AS `table`, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.table_privileges GROUP BY grantee, table_schema, table_name ORDER BY grantee, table_schema, table_name; カラムごとの権限の一覧 #  SELECT grantee AS user, table_schema AS db, table_name AS `table`, column_name AS `column`, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.column_privileges GROUP BY grantee, table_schema, table_name, column_name ORDER BY grantee, table_schema, table_name, column_name; ユーザーごと・データベースごと・テーブルごと・カラムごとの権限の一覧 #  SELECT * FROM ( SELECT grantee AS user, is_grantable AS is_grantable, \u0026#39;-\u0026#39; AS db, \u0026#39;-\u0026#39; AS `table`, \u0026#39;-\u0026#39; AS `column`, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.user_privileges GROUP BY grantee, is_grantable UNION ALL SELECT grantee AS user, is_grantable AS is_grantable, table_schema AS db, \u0026#39;-\u0026#39; AS `table`, \u0026#39;-\u0026#39; AS `column`, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.schema_privileges GROUP BY grantee, is_grantable, table_schema UNION ALL SELECT grantee AS user, is_grantable AS is_grantable, table_schema AS db, table_name AS `table`, \u0026#39;-\u0026#39; AS `column`, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.table_privileges GROUP BY grantee, is_grantable, table_schema, table_name UNION ALL SELECT grantee AS user, is_grantable AS is_grantable, table_schema AS db, table_name AS `table`, column_name AS `column`, GROUP_CONCAT(privilege_type) AS privileges FROM information_schema.column_privileges GROUP BY grantee, is_grantable, table_schema, table_name, column_name ) AS authority ORDER BY user, db, `table`, `column`; 日付・時刻 #  MySQL Reference Manual - Date and Time Functions\n現在時刻 #  SELECT NOW(); -- 2020-01-05 13:30:10 現在時刻の時刻のみ #  SELECT CURRENT_TIME(); -- 13:30:10 今日 #  SELECT CURRENT_DATE(); -- 2020-01-05 昨日 #  SELECT CURRENT_DATE() - INTERVAL 1 DAY; -- 2020-01-04 明日 #  SELECT CURRENT_DATE() + INTERVAL 1 DAY; -- 2020-01-06 1週間前 #  SELECT CURRENT_DATE() - INTERVAL 7 DAY; -- 2019-12-29 1週間後 #  SELECT CURRENT_DATE() + INTERVAL 7 DAY; -- 2020-01-12 当月1日 #  SELECT DATE_FORMAT(CURRENT_DATE(), \u0026#39;%Y-%m-01\u0026#39;); -- 2020-01-01 当月末日 #  SELECT LAST_DAY(CURRENT_DATE()); -- 2020-01-31 当月1日〜当月末日 #  SELECT * FROM sample_table WHERE sample_column \u0026gt;= DATE_FORMAT(CURRENT_DATE(), \u0026#39;%Y-%m-01\u0026#39;) AND sample_column \u0026lt;= LAST_DAY(CURRENT_DATE()); 先月1日 #  SELECT DATE_FORMAT(DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH), \u0026#39;%Y-%m-01\u0026#39;); -- 2019-12-01 -- or SELECT DATE_FORMAT(DATE_ADD(CURRENT_DATE(), INTERVAL -1 MONTH), \u0026#39;%Y-%m-01\u0026#39;); -- 2019-12-01 先月末日 #  SELECT LAST_DAY(DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)); -- 2019-12-31 -- or SELECT LAST_DAY(DATE_ADD(CURRENT_DATE(), INTERVAL -1 MONTH)); -- 2019-12-31 来月1日 #  SELECT DATE_FORMAT(DATE_ADD(CURRENT_DATE(), INTERVAL 1 MONTH), \u0026#39;%Y-%m-01\u0026#39;); -- 2020-02-01 来月末日 #  SELECT LAST_DAY(DATE_ADD(CURRENT_DATE(), INTERVAL 1 MONTH)); -- 2020-02-29 昨年 #  SELECT DATE_FORMAT((NOW() - INTERVAL 1 YEAR), \u0026#39;%Y-%m-%d\u0026#39;); 来年 #  SELECT DATE_FORMAT((NOW() + INTERVAL 1 YEAR), \u0026#39;%Y-%m-%d\u0026#39;); 3年前 #  SELECT DATE_FORMAT((NOW() - INTERVAL 3 YEAR), \u0026#39;%Y-%m-%d\u0026#39;); 3年後 #  SELECT DATE_FORMAT((NOW() + INTERVAL 3 YEAR), \u0026#39;%Y-%m-%d\u0026#39;); 日付の差分 #  SELECT DATEDIFF(\u0026#39;2020-12-31 23:59:59\u0026#39;,\u0026#39;2020-12-30\u0026#39;); -- 1 SELECT DATEDIFF(\u0026#39;2020-11-30 23:59:59\u0026#39;,\u0026#39;2020-12-31\u0026#39;); -- -31 年のみ #  SELECT YEAR(\u0026#39;2020-12-31\u0026#39;); -- 2020 月のみ #  SELECT MONTH(\u0026#39;2020-12-31\u0026#39;); -- 12 -- or SELECT DAYOFMONTH(\u0026#39;2020-12-31\u0026#39;); -- 12 日のみ #  SELECT DAY(\u0026#39;2020-12-31\u0026#39;); -- 31 -- or SELECT DAYOFMONTH(\u0026#39;2020-12-31\u0026#39;); -- 31 曜日 #  曜日インデックス (1 = Sunday、2 = Monday、…、7 = Saturday)\nSELECT DAYOFWEEK(\u0026#39;2007-02-03\u0026#39;); -- 7 曜日インデックス (0 = Monday、1 = Tuesday、…6 = Sunday)\nSELECT WEEKDAY(\u0026#39;2008-02-03 22:23:00\u0026#39;); -- 6 曜日（日本語） #  SELECT CASE DATE_FORMAT(NOW(), \u0026#39;%w\u0026#39;) WHEN 0 THEN \u0026#39;日\u0026#39; WHEN 1 THEN \u0026#39;月\u0026#39; WHEN 2 THEN \u0026#39;火\u0026#39; WHEN 3 THEN \u0026#39;水\u0026#39; WHEN 4 THEN \u0026#39;木\u0026#39; WHEN 5 THEN \u0026#39;金\u0026#39; WHEN 6 THEN \u0026#39;土\u0026#39; END; 年内の歴週 #  SELECT WEEKOFYEAR(\u0026#39;2008-02-20\u0026#39;); -- 8 年内の通日 #  SELECT DAYOFYEAR(\u0026#39;2007-02-03\u0026#39;); -- 34 便利関数 #  値がNULLの場合の初期値を返却 IFNULL #  SELECT IFNULL(name, \u0026#39;anonym\u0026#39;) AS name FROM sample_table; 最初のNULL以外の値を返却 COALESCE #  NULL以外の値がない場合 NULLを返却\nSELECT COALESCE( phone_number_smart_private, phone_number_home, phone_number_office, NULL ) AS phone_number FROM sample_table; カンマ区切りで結合 GROUP_CONCAT #  SELECT GROUP_CONCAT(id) AS id -- \u0026#39;1,2,3,4,5\u0026#39; FROM sample_table ORDER BY id; カンマ区切りの値を検索 FIND_IN_SET #  INDEXが効かないため要注意  SELECT * FROM sample_table WHERE FIND_IN_SET(id, \u0026#39;1,2,3,4\u0026#39;); 指定した順番に並べ替え FIELD #  SELECT * FROM sample_table WHERE id IN(1, 2, 3) ORDER BY FIELD(id, 3, 1, 2); 条件分岐 CASE #  SELECT CASE WHEN active_flag = true THEN \u0026#39;ON\u0026#39; WHEN active_flag = false THEN \u0026#39;OFF\u0026#39; ELSE \u0026#39;\u0026#39; END FROM sample_table;  SELECT id, name, score, CASE WHEN score \u0026gt;= 80 THEN \u0026#39;Excellent\u0026#39; WHEN 80 \u0026gt; score AND score \u0026gt;= 70 THEN \u0026#39;Good\u0026#39; WHEN 70 \u0026gt; score AND score \u0026gt;= 60 THEN \u0026#39;Average\u0026#39; WHEN 60 \u0026gt; score AND score \u0026gt;= 50 THEN \u0026#39;Below Average\u0026#39; WHEN 50 \u0026gt; score THEN \u0026#39;Poor\u0026#39; ELSE \u0026#39;\u0026#39; END AS \u0026#39;evaluation\u0026#39; FROM scores; 便利SQL #  SELECT句の値を変数にセット #  SELECT 100, \u0026#39;sample\u0026#39; INTO @HOGE, @FOO;  SELECT @HOGE, @FOO; +-------+--------+ | @HOGE | @FOO | +-------+--------+ | 100 | sample | +-------+--------+ SELECT したデータを INSERT #  INSERT INTO sample_table_1 (sample_column_1, sample_column_2, sample_column_3) SELECT sample_column_1, sample_column_2, sample_column_3 FROM sample_table_2; 一部の値を固定値で登録（以下の例では sample_column_3 に 固定値 \u0026lsquo;hoge\u0026rsquo; を登録\nINSERT INTO sample_table_1 (sample_column_1, sample_column_2, sample_column_3) SELECT sample_column_1, sample_column_2, \u0026#39;hoge\u0026#39; AS sample_column_3 FROM sample_table_2; 特定のカラムの値が重複しているレコードを抽出 HAVING/GROUP BY #  SELECT sample_column, COUNT(*) AS count FROM sample_table GROUP BY sample_column HAVING count \u0026gt; 1 ORDER BY sample_column; 置換 #  文字列を置換して更新 #  UPDATE sample_table SET sample_column = REPLACE(sample_column, \u0026#39;Search String\u0026#39;, \u0026#39;Replacement String\u0026#39;) WHERE sample_column LIKE \u0026#39;%Search String%\u0026#39;; 改行コード #  Carriage Return (CR) #  \\r CHAR(13) Line Feed (LF) #  \\n CHAR(10) 改行コードを半角スペースに置換 #  SELECT REPLACE(REPLACE(REPLACE(sample_column, \u0026#39;\\r\\n\u0026#39;, \u0026#39; \u0026#39;), \u0026#39;\\r\u0026#39;, \u0026#39; \u0026#39;), \u0026#39;\\n\u0026#39;, \u0026#39; \u0026#39;) FROM sample_table; SELECT REPLACE(REPLACE(REPLACE(sample_column, CHAR(13) + CHAR(10), \u0026#39; \u0026#39;), CHAR(13), \u0026#39; \u0026#39;), CHAR(10), \u0026#39; \u0026#39;) FROM sample_table; UPDATE sample_table SET sample_column = REPLACE(REPLACE(REPLACE(sample_column, \u0026#39;\\r\\n\u0026#39;, \u0026#39; \u0026#39;), \u0026#39;\\r\u0026#39;, \u0026#39; \u0026#39;), \u0026#39;\\n\u0026#39;,\u0026#39; \u0026#39;); UPDATE sample_table SET REPLACE(REPLACE(REPLACE(sample_column, CHAR(13) + CHAR(10), \u0026#39; \u0026#39;), CHAR(13), \u0026#39; \u0026#39;), CHAR(10), \u0026#39; \u0026#39;); VIEW #  VIEWの一括DROP文 #  SELECT CONCAT(\u0026#39;DROP VIEW \u0026#39;, table_name, \u0026#39;;\u0026#39;) AS view_drop_sql FROM information_schema.tables WHERE table_schema NOT IN ( \u0026#39;mysql\u0026#39;, \u0026#39;perfomance_schema\u0026#39;, \u0026#39;information_schema\u0026#39; ) AND table_type = \u0026#39;VIEW\u0026#39; ORDER BY table_schema, table_name; VIEWの一覧を作成するCREATE文の一覧 #  SELECT CONCAT(TABLE_SCHEMA, \u0026#39;.\u0026#39;, TABLE_NAME) AS target_view, CONCAT( \u0026#39;CREATE ALGORITHM=UNDEFINED DEFINER=`\u0026#39;, DEFINER, \u0026#39;` SQL SECURITY \u0026#39;, SECURITY_TYPE, \u0026#39; VIEW `\u0026#39;, TABLE_NAME, \u0026#39;` AS \u0026#39;, VIEW_DEFINITION, \u0026#39;;\u0026#39; ) AS create_view FROM information_schema.views; その他 #  SQLの実行計画 #  EXPLAIN SELECT * FROM sample_table WHERE sample_flag = 1; 一時的なテーブルの作成 #  CREATE TEMPORARY TABLE new_table SELECT * FROM original_table データベースへのコネクション数 #  threads へのアクセスには相互排他ロックは必要なく、サーバーパフォーマンスへの影響は最小です。INFORMATION_SCHEMA.PROCESSLIST と SHOW PROCESSLIST では相互排他ロックが必要になるため、パフォーマンスの低下につながります。 https://dev.mysql.com/doc/refman/5.6/ja/performance-schema-threads-table.html  SELECT processlist_host, COUNT(*) AS connection_count FROM performance_schema.threads WHERE TYPE = \u0026#39;FOREGROUND\u0026#39; GROUP BY processlist_host ORDER BY processlist_host; テーブルのロック状態 #  ストレージエンジンがInnoDBの場合\nSELECT * FROM information_schema.innodb_locks; トランザクション #  BEGIN; UPDATE sample_table SET email = \u0026#39;sample1@email.com\u0026#39; WHERE id = 1; UPDATE sample_table SET email = \u0026#39;sample1@email.com\u0026#39; WHERE id = 2; -- 失敗した場合は ROLLBACK;  COMMIT; or\nSTART TRANSACTION; UPDATE sample_table SET email = \u0026#39;sample1@email.com\u0026#39; WHERE id = 1; UPDATE sample_table SET email = \u0026#39;sample1@email.com\u0026#39; WHERE id = 2; -- 失敗した場合は ROLLBACK;  COMMIT; AUTO_INCREMENT（自動採番） #  AUTO_INCREMENT（自動採番）の値を確認 #  SELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = \u0026#39;sample_database\u0026#39; AND TABLE_NAME = \u0026#39;sample_table\u0026#39;;  SHOW TABLE STATUS WHERE name = \u0026#39;sample_table\u0026#39;;  SHOW TABLE STATUS LIKE \u0026#39;sample_table_prefix%\u0026#39;; AUTO_INCREMENT（自動採番）の値を変更 #  ALTER TABLE sample_table AUTO_INCREMENT = 1000; 設定 #  トランザクションのタイムアウト #  SHOW GLOBAL VARIABLES LIKE \u0026#39;%lock_wait_time_out\u0026#39; +----------------------+--------+ | Variable_name | Value | +----------------------+--------+ | lock_wait_timeout_ms | 300000 | +----------------------+--------+ 1 row in set (0.01 sec) 暗号化 #  MySQL Reference Manual - Encryption and Compression Functions\nSET block_encryption_mode = \u0026#39;aes-256-cbc\u0026#39;; SET @key_str = SHA2(\u0026#39;My secret passphrase\u0026#39;,512); SET @init_vector = RANDOM_BYTES(16); SET @crypt_str = AES_ENCRYPT(\u0026#39;text\u0026#39;,@key_str,@init_vector); SELECT AES_DECRYPT(@crypt_str,@key_str,@init_vector); +-----------------------------------------------+ | AES_DECRYPT(@crypt_str,@key_str,@init_vector) | +-----------------------------------------------+ | text | +-----------------------------------------------+ References #   https://qiita.com/devopsCoordinator/items/9b70e506150888e190be https://qiita.com/CyberMergina/items/f889519e6be19c46f5f4 https://qiita.com/Tocyuki/items/cb613c51a0e9c6e4f23c https://qiita.com/marnie_ms4/items/576055abc355184c51a1 https://qiita.com/fururun02/items/148a1eee68a1fb978f06 https://qiita.com/dodonki1223/items/776a3520e45626773c60 https://dev.mysql.com/doc/refman/8.0/ja/select.html  "},{"id":11,"href":"/tech-blog/php/phpmetrics/","title":"PhpMetrics","section":"Php","content":"PhpMetrics #  PhpMetrics とは #   PHPプログラムの静的解析ツール 結果レポートをHTMLで出力 期待する効果  可読性・メンテナンス性・再利用性・テスト容易性の向上 バグ混入率の低下    解析時の評価指標 #   複雑度(循環的複雑度、経路複雑度) オブジェク指向(凝集度、結合度、抽象化) コード量 etc.  インストール #  $ composer require phpmetrics/phpmetrics --dev 使用方法 #  $ php ./vendor/bin/phpmetrics --report-html=myreport.html /path/to/your/sources/ 参考 #   https://phpmetrics.org/ https://github.com/phpmetrics/PhpMetrics  "},{"id":12,"href":"/tech-blog/php/phpunit/","title":"PHPUnit","section":"Php","content":"PHPUnit #  事前準備 #  インストール #  composer.json\n\u0026#34;require-dev\u0026#34;: { \u0026#34;fzaninotto/faker\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;mikey179/vfsstream\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;mockery/mockery\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;phpunit/phpunit\u0026#34;: \u0026#34;*\u0026#34; }, $ composer install バージョンの確認 #  $ ./vendor/bin/phpunit --version 基本 #  \u0026lt;?php use Aaa\\ClassA; use Bbb\\ClassB; use Eee\\ExceptionA; use Mockery; use PHPUnit\\Framework\\TestCase; /** * @coversDefaultClass Aaa\\ClassA */ class ClassATest extends TestCase { // Omitted  /** * This method is called before class.　TestCaseクラス実行前の処理。 * * @return void */ public static function setUpBeforeClass(): void { parent::setUpBeforeClass(); // static 変数を使用（static メソッドのため）  self::$hoge = \u0026#39;some value\u0026#39;; } /** * This method is called before each test.　各テストのメソッドが実行される前の処理。 * * @return void */ protected function setUp(): void { parent::setUp(); // インスタンス変数  $this-\u0026gt;classA = new ClassA(); } /** * This method is called after each test. 各テストのメソッドが実行された後の処理。 * * @return void */ protected function tearDown(): void { parent::tearDown(); } /** * Test ClassA::method1 * * @covers ::method1 カバレッジを算出する際に使用。テスト対象のクラス名（名前空間を含む）とメソッド名を記載。 * @return void */ public function testMethod1ExpectedValue(): void // メソッド名の命名規則：lowerCamelCase test[TargetFunctionName][Description|ExpectedValue]  { $classA = new ClassA(); $actualValue = $classA-\u0026gt;method1(); $this-\u0026gt;assertEquals($expectedValue, $actualValue); // 引数は期待値、実際の値の順番  } } アノテーション #  デフォルトのテスト対象クラスをテスト・クラスのアノテーションで指定 #  メソッドのアノテーションでクラス名の記述を省略しクラス名のタイポを未然に防止 @coversDefaultClass https://phpunit.readthedocs.io/en/latest/annotations.html#coversdefaultclass\n\u0026lt;?php use PHPUnit\\Framework\\TestCase; /** * @coversDefaultClass \\Foo\\CoveredClass */ class CoversDefaultClassTest extends TestCase { /** * @covers ::publicMethod */ public function testSomething() { $o = new Foo\\CoveredClass; $o-\u0026gt;publicMethod(); } } 未実装のテストをスキップする #  use Aaa\\ClassA; // Omitted  /** * Skip unimplemented tests * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $this-\u0026gt;markTestIncomplete(\u0026#39;This test has not been implemented yet.\u0026#39;); } アサーションがないテストをリスキーと見なさない #  /** * Do not consider a test without an assertion as risky * * @covers Aaa\\ClassA::method1ClassA * @doesNotPerformAssertions * @return void */ public function testSampleMethod(): void { // Omitted } PHP Code Sniffer で警告が発生するのを 以下のアノテーションで回避 #  コールバック関数で使用する引数が未使用扱いとなり PHP Code Sniffer で警告が発生するのを 以下のアノテーションで回避\nprotected function getSample() : callable { // PHP Code Sniffer で警告が発生するのを 以下のアノテーションで回避  // @codingStandardsIgnoreStart  return function ($sample) { // Omitted  } // @codingStandardsIgnoreEnd } 例外 #  例外が発生することをテスト #  PHPUnit 8+ #  use Aaa\\ClassA; use Eee\\ExceptionA // Omitted  /** * Test that ExceptionA occurs * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $this-\u0026gt;expectException(ExceptionA::class);　// クラス名（名前空間を含む）の文字列を使用する場合は クラス名::class を使用  $classA = new ClassA(); $classA-\u0026gt;method1ClassA(); } PHPUnit 7 #  use Aaa\\ClassA; use Eee\\ExceptionA // Omitted  /** * Test that Exception occurs * * @covers Aaa\\ClassA::method1ClassA * @expectedException Eee\\ExceptionA * @return void */ public function testSampleMethod(): void { $classA = new ClassA(); $classA-\u0026gt;method1ClassA(); } 例外が発生しないことをテスト #  use Aaa\\ClassA; use Eee\\ExceptionA // Omitted  /** * Test that no ExceptionA occurs * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $classA = new ClassA(); try { $classA-\u0026gt;method1ClassA(); } catch (ExceptionA $e) { $this-\u0026gt;fail(); } $this-\u0026gt;assertTrue(true); } public メソッド,プロパティ #  publicメソッドのモックを作ってテスト #  use Aaa\\ClassA; use Bbb\\ClassB; use Eee\\ExceptionA use Mockery; // Omitted  /** * Test using a mock of public method * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $mockClassB = Mockery::mock(ClassB::class); // 引数は with() で指定、返り値は andReturn() で指定  $mockClassB-\u0026gt;shouldReceive(\u0026#39;method1ClassB\u0026#39;)-\u0026gt;with(\u0026#39;argument value 1\u0026#39;, \u0026#39;argument value 2\u0026#39;)-\u0026gt;andReturn(\u0026#39;some value\u0026#39;); $classA = new ClassA($mockClassB);  $classA-\u0026gt;method1ClassA(); } publicプロパティのモックを作ってテスト #  use Aaa\\ClassA; use Bbb\\ClassB; use Mockery; // Omitted  /** * Test using a mock of public property * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $mockClassB = Mockery::mock(ClassB::class); $mockClassB-\u0026gt;property1ClassB = \u0026#39;some value\u0026#39;; $classA = new ClassA($mockClassB);  $classA-\u0026gt;method1ClassA(); } public staticメソッドのモックを作ってテスト #  @runInSeparateProcess そのテストを個別の PHP プロセスで実行するように指示する\nuse Aaa\\ClassA; use Bbb\\ClassB; use Mockery; // Omitted  /** * Test using a mock of public static method * * @covers Aaa\\ClassA::method1ClassA * @runInSeparateProcess * @preserveGlobalState disabled * @return void */ public function testSampleMethod(): void { $mockClassB = Mockery::mock(\u0026#39;alias:\u0026#39; . ClassB::class); $mockClassB-\u0026gt;shouldReceive(\u0026#39;method1ClassB\u0026#39;)-\u0026gt;andReturn(\u0026#39;some value\u0026#39;);  $classA = new ClassA(); $classA-\u0026gt;method1ClassA(); } publicメソッドのモックを作ってテスト（クラス名がハードコーディングされている場合） #  use Aaa\\ClassA; use Bbb\\ClassB; use Mockery; // Omitted  /** * Test using a mock of public method if a class name is hard coded * * @covers Aaa\\ClassA::method1ClassA * @runInSeparateProcess * @preserveGlobalState disabled * @return void */ public function testSampleMethod(): void { $mockClassB = Mockery::mock(\u0026#39;overload:\u0026#39; . ClassB::class); $mockClassB-\u0026gt;shouldReceive(\u0026#39;method1ClassB\u0026#39;)-\u0026gt;andReturn(\u0026#39;some value\u0026#39;);  $classA = new ClassA(); $classA-\u0026gt;method1ClassA(); } 自クラスのpublicメソッドのモックを作ってテスト #  use Aaa\\ClassA; use Mockery; // Omitted  /** * Test using a mock of public method of the class itself * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $partialMockClassA = Mockery::mock(ClassA::class)-\u0026gt;makePartial(); $partialMockClassA-\u0026gt;shouldReceive(\u0026#39;method2ClassA\u0026#39;)-\u0026gt;andReturn(\u0026#39;some value\u0026#39;);  $partialMockClassA-\u0026gt;method1ClassA(); } 依存クラスのコンストラクタ呼び出しをモックしてテスト #  namespace Aaa; use Bbb\\ClassB; // Omitted  class ClassA { public function method1ClassA() { $classB = $this-\u0026gt;newClassB();  // Omitted  } /** * Wrap the instance generation process because the mock of the constructor cannot be created * コンストラクタのモックは作れないのでインスタンス生成処理をラップする */ public function newClassB(): ClassB { return new ClassB(); } } use Aaa\\ClassA; use Bbb\\ClassB; use Mockery; // Omitted  /** * Mock constructor call of a dependent class and test * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $mockClassB = Mockery::mock(ClassB::class); $partialMockClassA = Mockery::mock(ClassA::class)-\u0026gt;makePartial(); $partialMockClassA-\u0026gt;shouldReceive(\u0026#39;newClassB\u0026#39;)-\u0026gt;andReturn($mockClassB);  $partialMockClassA-\u0026gt;method1ClassA(); } チェインしたpublicメソッドのモックを作ってテスト #  チェーンしたメソッドが引数をとる場合は1つずつ Mockery でモック化する必要あり\nuse Aaa\\ClassA; use Bbb\\ClassB; use Mockery; // Omitted  /** * Test using a mock of chained public method * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $mockClassB = Mockery::mock(ClassB::class); $mockClassB-\u0026gt;shouldReceive(\u0026#39;method1ClassB-\u0026gt;method2ClassB\u0026#39;)-\u0026gt;andReturn(\u0026#39;some value\u0026#39;); $classA = new ClassA($mockClassB);  $classA-\u0026gt;method1ClassA(); } [Laravel] ファサードのpublicメソッドのモックを作ってテスト #  use Aaa\\ClassA; use Fff\\FacadeA; use Mockery; // Omitted  /** * Test using a mock of a public method of Laravel Facade * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { FacadeA::shouldReceive(\u0026#39;method1FacadeA\u0026#39;)-\u0026gt;andReturn(\u0026#39;some value\u0026#39;);  $classA = new ClassA(); $classA-\u0026gt;method1ClassA(); } [Laravel] Eloquentのpublicメソッドのモックを作ってテスト #  use Aaa\\ClassA; use Eee\\EloquentA; use Mockery; // Omitted  /** * Test using a mock of a public method of Laravel Eloquent * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $mockEloquentA = Mockery::mock(EloquentA::class); $mockEloquentA-\u0026gt;shouldReceive(\u0026#39;method1EloquentA\u0026#39;)-\u0026gt;andReturn(\u0026#39;some value\u0026#39;); $classA = new ClassA($mockEloquentA);  $classA-\u0026gt;method1ClassA(); } [Laravel] Eloquentのpublicプロパティのモックを作ってテスト #  use Aaa\\ClassA; use Eee\\EloquentA; use Mockery; // Omitted  /** * Test using a mock of a public property of Laravel Eloquent * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $mockEloquentA = Mockery::mock(EloquentA::class)-\u0026gt;makePartial(); $mockEloquentA-\u0026gt;property1EloquentA = \u0026#39;some value\u0026#39;; $classA = new ClassA($mockEloquentA);  $classA-\u0026gt;method1ClassA(); } private/protected #  private/protectedメソッドをテスト #  use Aaa\\ClassA; use ReflectionMethod; // Omitted  /** * Test private/protected methods * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $classA = new ClassA(); $reflectionMethod1ClassA = new ReflectionMethod($classA, \u0026#39;method1ClassA\u0026#39;); $reflectionMethod1ClassA-\u0026gt;setAccessible(true); $reflectionMethod1ClassA-\u0026gt;invoke($classA); } private/protectedプロパティの値を書き換えてテスト #  use Aaa\\ClassA; use ReflectionClass; // Omitted  /** * Rewrite private/protected property value and test * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $classA = new ClassA(); $reflectionClassA = new ReflectionClass($classA); $reflectionProperty1ClassA = $reflectionClassA-\u0026gt;getProperty(\u0026#39;property1ClassA\u0026#39;); $reflectionProperty1ClassA-\u0026gt;setAccessible(true); $reflectionProperty1ClassA-\u0026gt;setValue($classA, \u0026#39;some value\u0026#39;);  $classA-\u0026gt;method1ClassA(); } private/protectedプロパティの値をテスト #  use Aaa\\ClassA; use ReflectionClass; // Omitted  /** * Test private/protected property value * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $classA = new ClassA(); $classA-\u0026gt;method1ClassA(); $reflectionClassA = new ReflectionClass($classA); $reflectionProperty1ClassA = $reflectionClassA-\u0026gt;getProperty(\u0026#39;property1ClassA\u0026#39;); $reflectionProperty1ClassA-\u0026gt;setAccessible(true); $valueReflectionProperty1ClassA = $reflectionProperty1ClassA-\u0026gt;getValue($classA);  $this-\u0026gt;assertEquals(\u0026#39;some value\u0026#39;, $valueReflectionProperty1ClassA); } ファイル #  仮想ファイルを使ってファイルの読み書きをテスト #  use Aaa\\ClassA; use org\\bovigo\\vfs\\vfsStream; // Omitted  /** * Test reading and writing a file using a virtual file * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $root = vfsStream::setup(\u0026#39;root\u0026#39;); vfsStream::newFile(\u0026#39;file\u0026#39;)-\u0026gt;at($root)-\u0026gt;setContent(\u0026#39;some contents\u0026#39;); $path = vfsStream::url(\u0026#39;root/file\u0026#39;);  $classA = new ClassA($path); $classA-\u0026gt;method1ClassA(); } その他 #  無名クラスを使ってトレイトをテスト #  トレイトとは\nhttps://www.php.net/manual/ja/language.oop5.traits.php\nPHPのような単一継承言語でコードを再利用するための仕組みの一つ。\nトレイトは単にいくつかの機能をまとめるためだけのもの。\nトレイト自身のインスタンスを作成することはできない。\nuse Aaa\\ClassA; use Ttt\\TraitA; // Omitted  /** * Test a trait using an anonymous class * * @covers Aaa\\ClassA::method1ClassA * @return void */ public function testSampleMethod(): void { $classUsingTrait = new class($property) { use TraitA; public function __construct($property) { $this-\u0026gt;method1TraitA($property); } }; $classUsingTrait-\u0026gt;method2TraitA(); } References #   PHPUnit のイディオム https://qiita.com/ngmy/items/08af9f74f6308ef6281c PHPUnit のアノテーション https://phpunit.readthedocs.io/ja/latest/annotations.html Mockery のクラス指定 https://qiita.com/prex-uchida/items/7563f7f33153da463802 Mockery https://qiita.com/ttn_tt/items/a35638ab12d4dc2ea488 Mockery（モック化用ライブラリ） https://github.com/mockery/mockery vfsStream（ファイル操作用ライブラリ） https://github.com/bovigo/vfsStream Trait https://www.php.net/manual/ja/language.oop5.traits.php  "},{"id":13,"href":"/tech-blog/postgresql/","title":"PostgreSQL Memo","section":"Tech Blog","content":"PostgreSQL Memo #  PostgreSQL\u0026rsquo;s Information #  Table Schema #  SELECT col.table_name, col.ordinal_position, -- No.  col.column_name, col.data_type, col.character_maximum_length, -- 文字数(文字列型)  col.character_octet_length, -- バイト数(文字列型)  col.numeric_precision, -- 桁数(数値型)  col.numeric_scale, -- 小数部(数値型)  col.datetime_precision, -- ミリ秒以下(日付型)  col.interval_type, -- インターバルの単位(日付型)  col.is_nullable, -- NULLを許可するか否か  col.column_default -- 初期値 FROM information_schema.columns col WHERE col.table_name = \u0026#39;sample_table\u0026#39; -- 対象テーブル名を指定 ORDER BY col.table_name, col.ordinal_position "},{"id":14,"href":"/tech-blog/todo/","title":"TODO","section":"Tech Blog","content":"TODO #  Topic #   Container  Docker★ Kubernetes istio   English  IT English  https://qiita.com/Ted-HM/items/7dde25dcffae4cdc7923   TOEIC★   Database  PostgreSQL   Programing Language  Golang★ PHP  phpcs   Typescript Python Kotlin   Framework/Library  Laravel   CI/CD  Jenkins CircleCI   Agile  Scrum Jira Redmine Team Building Project Management https://qiita.com/br_branch/items/bbbaba835b45e79efa5b   VCS  Git Github   Public Cloud  AWS GCP Azure   Check Sheet  Coding Unit Test/Functional Test Integration Test   Tool  Excel    Soft Skill #   Presence Management Power and Influence LinkedIn Resume/CV Interview  Topic - In Progress #   MySQL Microservices PHPUnit  faker★    Topic - Done #   Hugo phpmetrics VS Code  Improvement #   Mermaid Diagram https://mermaid-js.github.io/mermaid/#/examples  mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) graph LR; A(A) --- B(B)  last updated date of the articles profile books links left navi i18n(English, Japanese) https://gohugo.io/content-management/multilingual/ favicon logo Twitter hands-on site hands-on movie  "},{"id":15,"href":"/tech-blog/linux/ubuntu/","title":"Ubuntu","section":"Linux","content":"Ubuntu #  apt-get #     command description     apt-get install \u0026lt;package\u0026gt; 指定パッケージのインストールと更新   apt-get update パッケージ・リストを更新   apt-get upgrade インストール済パッケージを更新   apt-get dist-upgrade 追加で必要なパッケージをインストール、不要パッケージを削除、ディストリビューションのバージョンを更新(セキュリティパッチをあてる場合などにも使用)   apt-get remove \u0026lt;package\u0026gt; 指定パッケージを削除   apt-get autoremove 未使用パッケージを削除 (設定ファイルは削除しない)   apt-get purge \u0026lt;package\u0026gt; 未使用パッケージを削除 (設定ファイルも削除する)   apt-get clean パッケージをインストールした際のアーカイブ・ファイル(*.tar.gzなど)を削除   apt-get autoclean 未使用パッケージのアーカイブ・ファイルを削除    apt-cache #     command description     apt-cache search \u0026lt;query\u0026gt; パッケージを検索 (パッケージ名と説明が \u0026lt;query\u0026gt; の対象)   apt-cache policy \u0026lt;query\u0026gt; パッケージを検索 (インストール可能なバージョンの表示)   apt-cache madison \u0026lt;query\u0026gt; パッケージを検索 (インストール可能なバージョンの一覧)    dpkg #     command description     dpkg -l \u0026lt;package\u0026gt; インストール済パッケージの一覧を表示、\u0026lt;package\u0026gt; を省略した場合 全パッケージを表示   dpkg -L \u0026lt;package\u0026gt; インストール時のファイルの一覧を表示    References #   Ubuntu apt-get まとめ  "},{"id":16,"href":"/tech-blog/tool/vscode/","title":"VS Code","section":"Tool","content":"VS Code (Visual Studio Code) #  設定 #  設定を開く #   Macの場合：Code \u0026gt; Preferences... \u0026gt; Settings  ファイルを常に新しいタブで開く方法 #   workbench.editor.enablePreview　を検索しチェックを解除  プロジェクトを常に新しいウィンドウで開く方法 #   window.openFoldersInNewWindow を検索し on を選択  ショートカット #  開く・閉じる #     内容 Mac Windows     設定を開く command + , ctrl + ,   コマンドパレットを開く command + shift + p ctrl + shift + p   新しいウィンドウを開く command + shift + n ctrl + shift + n   ファイル名を指定して開く command + p ctrl + p   アクティブなファイルを閉じる command + w ctrl + w   全てのファイル閉じる command + k w ctrl + k w    拡大・縮小 #     内容 Mac Windows     拡大(ズームイン) command + = ctrl + =   縮小(ズームアウト) command + - ctrl + -   全画面表示 command + control + - F11    コピー・切り取り・削除 #     内容 Mac Windows     行末尾のスペースを削除 command + k x ctrl + k x   行のインデントを追加 command + ] ctrl + ]   行のインデントを削除 command + [ ctrl + [   行のコピー(未選択時) command + c ctrl + c   行の切り取り(未選択時) command + x ctrl + x   ファイルの相対パスをコピー shift + option + command + c -   ファイルの絶対パスをコピー option + command + c -   コメント化/コメント解除 option + shift + a ctrl + /    選択 #     内容 Mac Windows     矩形選択 shift + option + マウス・ドラッグ shift + alt + マウス・ドラッグ    検索 #     内容 Mac Windows     プロジェクト全体を検索 command + shift + f ctrl + shift + f    移動 #     内容 Mac Windows     カーソル行を下に移動 option + ↓ alt + ↓   カーソル行を下に移動 option + ↑ alt + ↑   ファイル履歴を表示し移動 control + tab ctrl + tab   サイドバーにフォーカスを移動 command + 0 ctrl + 0   指定行に移動 control + g ctrl + g   最後に編集した箇所に移動 command + k q ctrl + k q   対応するカッコに移動 command + shift + \\ ctrl + shift + ¥   前に移動(戻る) option + ← alt + ←   次に移動(進む) option + → alt + →    参考 #   https://qiita.com/TakahiRoyte/items/cdab6fca64da386a690b  "}]